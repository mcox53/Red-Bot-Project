
Red Bot Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001a  00800100  000009fe  00000a92  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000009fe  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000095  0080011a  0080011a  00000aac  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000aac  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000adc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000100  00000000  00000000  00000b1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000138c  00000000  00000000  00000c1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009f7  00000000  00000000  00001fa8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a29  00000000  00000000  0000299f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002dc  00000000  00000000  000033c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000664  00000000  00000000  000036a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008cb  00000000  00000000  00003d08  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000160  00000000  00000000  000045d3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 88 00 	jmp	0x110	; 0x110 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 99 00 	jmp	0x132	; 0x132 <__vector_14>
  3c:	0c 94 a8 00 	jmp	0x150	; 0x150 <__vector_15>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee ef       	ldi	r30, 0xFE	; 254
  7c:	f9 e0       	ldi	r31, 0x09	; 9
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 31       	cpi	r26, 0x1A	; 26
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	aa e1       	ldi	r26, 0x1A	; 26
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	af 3a       	cpi	r26, 0xAF	; 175
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 21 01 	call	0x242	; 0x242 <main>
  9e:	0c 94 fd 04 	jmp	0x9fa	; 0x9fa <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <initialize_all>:
		DDRD |= (1 << DDD5);			// Set PIND5 as Output
		new_left_duty_cycle = pwm_duty_cycle;	//(int)((float)(255 * (pwm_duty_cycle/100)));			// Set Compare register for desired duty cycle
		break;
		case MOTOR_RIGHT_PWM:
		DDRD |= (1 << DDD6);			// Set PIND6 as Output
		new_right_duty_cycle = pwm_duty_cycle;		//(int)((float)(255 * (pwm_duty_cycle/100)));			// Set Compare registers for desired duty cycle
  a6:	78 94       	sei
  a8:	8a b1       	in	r24, 0x0a	; 10
  aa:	84 63       	ori	r24, 0x34	; 52
  ac:	8a b9       	out	0x0a, r24	; 10
  ae:	84 b1       	in	r24, 0x04	; 4
  b0:	80 6c       	ori	r24, 0xC0	; 192
  b2:	84 b9       	out	0x04, r24	; 4
  b4:	20 9a       	sbi	0x04, 0	; 4
  b6:	0e 94 e6 02 	call	0x5cc	; 0x5cc <uart_init>
  ba:	e9 ea       	ldi	r30, 0xA9	; 169
  bc:	f1 e0       	ldi	r31, 0x01	; 1
  be:	84 e0       	ldi	r24, 0x04	; 4
  c0:	91 e0       	ldi	r25, 0x01	; 1
  c2:	95 83       	std	Z+5, r25	; 0x05
  c4:	84 83       	std	Z+4, r24	; 0x04
  c6:	93 83       	std	Z+3, r25	; 0x03
  c8:	82 83       	std	Z+2, r24	; 0x02
  ca:	91 83       	std	Z+1, r25	; 0x01
  cc:	80 83       	st	Z, r24
  ce:	ea e7       	ldi	r30, 0x7A	; 122
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	80 81       	ld	r24, Z
  d4:	87 60       	ori	r24, 0x07	; 7
  d6:	80 83       	st	Z, r24
  d8:	80 81       	ld	r24, Z
  da:	80 68       	ori	r24, 0x80	; 128
  dc:	80 83       	st	Z, r24
  de:	ec e7       	ldi	r30, 0x7C	; 124
  e0:	f0 e0       	ldi	r31, 0x00	; 0
  e2:	80 81       	ld	r24, Z
  e4:	80 64       	ori	r24, 0x40	; 64
  e6:	80 83       	st	Z, r24
  e8:	89 e6       	ldi	r24, 0x69	; 105
  ea:	98 e1       	ldi	r25, 0x18	; 24
  ec:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
  f0:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
  f4:	e1 e8       	ldi	r30, 0x81	; 129
  f6:	f0 e0       	ldi	r31, 0x00	; 0
  f8:	80 81       	ld	r24, Z
  fa:	83 60       	ori	r24, 0x03	; 3
  fc:	80 83       	st	Z, r24
  fe:	80 81       	ld	r24, Z
 100:	88 60       	ori	r24, 0x08	; 8
 102:	80 83       	st	Z, r24
 104:	ef e6       	ldi	r30, 0x6F	; 111
 106:	f0 e0       	ldi	r31, 0x00	; 0
 108:	80 81       	ld	r24, Z
 10a:	82 60       	ori	r24, 0x02	; 2
 10c:	80 83       	st	Z, r24
 10e:	08 95       	ret

00000110 <__vector_11>:
 110:	1f 92       	push	r1
 112:	0f 92       	push	r0
 114:	0f b6       	in	r0, 0x3f	; 63
 116:	0f 92       	push	r0
 118:	11 24       	eor	r1, r1
 11a:	8f 93       	push	r24
 11c:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <__data_end>
 120:	8f 5f       	subi	r24, 0xFF	; 255
 122:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <__data_end>
 126:	8f 91       	pop	r24
 128:	0f 90       	pop	r0
 12a:	0f be       	out	0x3f, r0	; 63
 12c:	0f 90       	pop	r0
 12e:	1f 90       	pop	r1
 130:	18 95       	reti

00000132 <__vector_14>:
 132:	1f 92       	push	r1
 134:	0f 92       	push	r0
 136:	0f b6       	in	r0, 0x3f	; 63
 138:	0f 92       	push	r0
 13a:	11 24       	eor	r1, r1
 13c:	8f 93       	push	r24
 13e:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <new_right_duty_cycle>
 142:	87 bd       	out	0x27, r24	; 39
 144:	8f 91       	pop	r24
 146:	0f 90       	pop	r0
 148:	0f be       	out	0x3f, r0	; 63
 14a:	0f 90       	pop	r0
 14c:	1f 90       	pop	r1
 14e:	18 95       	reti

00000150 <__vector_15>:
 150:	1f 92       	push	r1
 152:	0f 92       	push	r0
 154:	0f b6       	in	r0, 0x3f	; 63
 156:	0f 92       	push	r0
 158:	11 24       	eor	r1, r1
 15a:	8f 93       	push	r24
 15c:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <new_left_duty_cycle>
 160:	88 bd       	out	0x28, r24	; 40
 162:	8f 91       	pop	r24
 164:	0f 90       	pop	r0
 166:	0f be       	out	0x3f, r0	; 63
 168:	0f 90       	pop	r0
 16a:	1f 90       	pop	r1
 16c:	18 95       	reti

0000016e <start_ADC_and_wait>:
 16e:	ea e7       	ldi	r30, 0x7A	; 122
 170:	f0 e0       	ldi	r31, 0x00	; 0
 172:	80 81       	ld	r24, Z
 174:	80 64       	ori	r24, 0x40	; 64
 176:	80 83       	st	Z, r24
 178:	80 81       	ld	r24, Z
 17a:	86 fd       	sbrc	r24, 6
 17c:	fd cf       	rjmp	.-6      	; 0x178 <start_ADC_and_wait+0xa>
 17e:	08 95       	ret

00000180 <READ_LINE_SENSOR>:
		default:
		break;
	}
}

void READ_LINE_SENSOR(void){
 180:	ef 92       	push	r14
 182:	ff 92       	push	r15
 184:	0f 93       	push	r16
 186:	1f 93       	push	r17
 188:	cf 93       	push	r28
 18a:	df 93       	push	r29
	
	ADMUX = LINE_LEFT_IN;
 18c:	cc e7       	ldi	r28, 0x7C	; 124
 18e:	d0 e0       	ldi	r29, 0x00	; 0
 190:	81 e0       	ldi	r24, 0x01	; 1
 192:	88 83       	st	Y, r24
	ADMUX |= (1 << REFS0);
 194:	88 81       	ld	r24, Y
 196:	80 64       	ori	r24, 0x40	; 64
 198:	88 83       	st	Y, r24
	
	start_ADC_and_wait();
 19a:	0e 94 b7 00 	call	0x16e	; 0x16e <start_ADC_and_wait>
	left_line = (ADCL);
 19e:	0f 2e       	mov	r0, r31
 1a0:	f8 e7       	ldi	r31, 0x78	; 120
 1a2:	ef 2e       	mov	r14, r31
 1a4:	f1 2c       	mov	r15, r1
 1a6:	f0 2d       	mov	r31, r0
 1a8:	f7 01       	movw	r30, r14
 1aa:	80 81       	ld	r24, Z
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	90 93 a5 01 	sts	0x01A5, r25	; 0x8001a5 <left_line+0x1>
 1b2:	80 93 a4 01 	sts	0x01A4, r24	; 0x8001a4 <left_line>
	left_line |= (ADCH << 8);
 1b6:	09 e7       	ldi	r16, 0x79	; 121
 1b8:	10 e0       	ldi	r17, 0x00	; 0
 1ba:	f8 01       	movw	r30, r16
 1bc:	20 81       	ld	r18, Z
 1be:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <left_line>
 1c2:	90 91 a5 01 	lds	r25, 0x01A5	; 0x8001a5 <left_line+0x1>
 1c6:	92 2b       	or	r25, r18
 1c8:	90 93 a5 01 	sts	0x01A5, r25	; 0x8001a5 <left_line+0x1>
 1cc:	80 93 a4 01 	sts	0x01A4, r24	; 0x8001a4 <left_line>
	
	ADMUX = LINE_CENTER_IN;
 1d0:	86 e0       	ldi	r24, 0x06	; 6
 1d2:	88 83       	st	Y, r24
	ADMUX |= (1 << REFS0);
 1d4:	88 81       	ld	r24, Y
 1d6:	80 64       	ori	r24, 0x40	; 64
 1d8:	88 83       	st	Y, r24
	
	start_ADC_and_wait();
 1da:	0e 94 b7 00 	call	0x16e	; 0x16e <start_ADC_and_wait>
	center_line = (ADCL);
 1de:	f7 01       	movw	r30, r14
 1e0:	80 81       	ld	r24, Z
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	90 93 a8 01 	sts	0x01A8, r25	; 0x8001a8 <center_line+0x1>
 1e8:	80 93 a7 01 	sts	0x01A7, r24	; 0x8001a7 <center_line>
	center_line |= (ADCH << 8);
 1ec:	f8 01       	movw	r30, r16
 1ee:	20 81       	ld	r18, Z
 1f0:	80 91 a7 01 	lds	r24, 0x01A7	; 0x8001a7 <center_line>
 1f4:	90 91 a8 01 	lds	r25, 0x01A8	; 0x8001a8 <center_line+0x1>
 1f8:	92 2b       	or	r25, r18
 1fa:	90 93 a8 01 	sts	0x01A8, r25	; 0x8001a8 <center_line+0x1>
 1fe:	80 93 a7 01 	sts	0x01A7, r24	; 0x8001a7 <center_line>

	ADMUX = LINE_RIGHT_IN;
 202:	84 e0       	ldi	r24, 0x04	; 4
 204:	88 83       	st	Y, r24
	ADMUX |= (1 << REFS0);
 206:	88 81       	ld	r24, Y
 208:	80 64       	ori	r24, 0x40	; 64
 20a:	88 83       	st	Y, r24
	
	start_ADC_and_wait();
 20c:	0e 94 b7 00 	call	0x16e	; 0x16e <start_ADC_and_wait>
	right_line = (ADCL);
 210:	f7 01       	movw	r30, r14
 212:	80 81       	ld	r24, Z
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	90 93 6e 01 	sts	0x016E, r25	; 0x80016e <right_line+0x1>
 21a:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <right_line>
	right_line |= (ADCH << 8);
 21e:	f8 01       	movw	r30, r16
 220:	20 81       	ld	r18, Z
 222:	80 91 6d 01 	lds	r24, 0x016D	; 0x80016d <right_line>
 226:	90 91 6e 01 	lds	r25, 0x016E	; 0x80016e <right_line+0x1>
 22a:	92 2b       	or	r25, r18
 22c:	90 93 6e 01 	sts	0x016E, r25	; 0x80016e <right_line+0x1>
 230:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <right_line>
}
 234:	df 91       	pop	r29
 236:	cf 91       	pop	r28
 238:	1f 91       	pop	r17
 23a:	0f 91       	pop	r16
 23c:	ff 90       	pop	r15
 23e:	ef 90       	pop	r14
 240:	08 95       	ret

00000242 <main>:


int main(void)
{
    initialize_all();
 242:	0e 94 53 00 	call	0xa6	; 0xa6 <initialize_all>
	pwm_timer_init();
 246:	0e 94 ce 02 	call	0x59c	; 0x59c <pwm_timer_init>
	RIGHT_MOTOR_FWD();
 24a:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <RIGHT_MOTOR_FWD>
	LEFT_MOTOR_FWD();
 24e:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <LEFT_MOTOR_FWD>
		case MOTOR_LEFT_PWM:
		DDRD |= (1 << DDD5);			// Set PIND5 as Output
		new_left_duty_cycle = pwm_duty_cycle;	//(int)((float)(255 * (pwm_duty_cycle/100)));			// Set Compare register for desired duty cycle
		break;
		case MOTOR_RIGHT_PWM:
		DDRD |= (1 << DDD6);			// Set PIND6 as Output
 252:	56 9a       	sbi	0x0a, 6	; 10
		new_right_duty_cycle = pwm_duty_cycle;		//(int)((float)(255 * (pwm_duty_cycle/100)));			// Set Compare registers for desired duty cycle
 254:	86 e9       	ldi	r24, 0x96	; 150
 256:	80 93 a6 01 	sts	0x01A6, r24	; 0x8001a6 <new_right_duty_cycle>

void SET_PWM_OUTPUT(float pwm_duty_cycle, uint8_t channel){
	switch (channel)
	{
		case MOTOR_LEFT_PWM:
		DDRD |= (1 << DDD5);			// Set PIND5 as Output
 25a:	55 9a       	sbi	0x0a, 5	; 10
		new_left_duty_cycle = pwm_duty_cycle;	//(int)((float)(255 * (pwm_duty_cycle/100)));			// Set Compare register for desired duty cycle
 25c:	80 93 70 01 	sts	0x0170, r24	; 0x800170 <new_left_duty_cycle>
		break;
		case MOTOR_RIGHT_PWM:
		DDRD |= (1 << DDD6);			// Set PIND6 as Output
		new_right_duty_cycle = pwm_duty_cycle;		//(int)((float)(255 * (pwm_duty_cycle/100)));			// Set Compare registers for desired duty cycle
 260:	cd e7       	ldi	r28, 0x7D	; 125
 262:	0f 2e       	mov	r0, r31
 264:	fa e5       	ldi	r31, 0x5A	; 90
 266:	af 2e       	mov	r10, r31
 268:	f0 2d       	mov	r31, r0
void SET_PWM_OUTPUT(float pwm_duty_cycle, uint8_t channel){
	switch (channel)
	{
		case MOTOR_LEFT_PWM:
		DDRD |= (1 << DDD5);			// Set PIND5 as Output
		new_left_duty_cycle = pwm_duty_cycle;	//(int)((float)(255 * (pwm_duty_cycle/100)));			// Set Compare register for desired duty cycle
 26a:	0f 2e       	mov	r0, r31
 26c:	f8 e7       	ldi	r31, 0x78	; 120
 26e:	bf 2e       	mov	r11, r31
 270:	f0 2d       	mov	r31, r0
 272:	02 e3       	ldi	r16, 0x32	; 50
		break;
		case MOTOR_RIGHT_PWM:
		DDRD |= (1 << DDD6);			// Set PIND6 as Output
		new_right_duty_cycle = pwm_duty_cycle;		//(int)((float)(255 * (pwm_duty_cycle/100)));			// Set Compare registers for desired duty cycle
 274:	1c e8       	ldi	r17, 0x8C	; 140
void SET_PWM_OUTPUT(float pwm_duty_cycle, uint8_t channel){
	switch (channel)
	{
		case MOTOR_LEFT_PWM:
		DDRD |= (1 << DDD5);			// Set PIND5 as Output
		new_left_duty_cycle = pwm_duty_cycle;	//(int)((float)(255 * (pwm_duty_cycle/100)));			// Set Compare register for desired duty cycle
 276:	d6 e9       	ldi	r29, 0x96	; 150
			SET_PWM_OUTPUT(PID_to_duty_left, MOTOR_LEFT_PWM);
			SET_PWM_OUTPUT(PID_to_duty_right, MOTOR_RIGHT_PWM);
		
		}*/
	
		if (program_counter_one >= 1)
 278:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <__data_end>
 27c:	88 23       	and	r24, r24
 27e:	e1 f3       	breq	.-8      	; 0x278 <main+0x36>
		{
			READ_LINE_SENSOR();
 280:	0e 94 c0 00 	call	0x180	; 0x180 <READ_LINE_SENSOR>
			if (center_line > setpoint && left_line < setpoint && right_line < setpoint){
 284:	60 91 a7 01 	lds	r22, 0x01A7	; 0x8001a7 <center_line>
 288:	70 91 a8 01 	lds	r23, 0x01A8	; 0x8001a8 <center_line+0x1>
 28c:	c0 90 00 01 	lds	r12, 0x0100	; 0x800100 <__data_start>
 290:	d0 90 01 01 	lds	r13, 0x0101	; 0x800101 <__data_start+0x1>
 294:	e0 90 02 01 	lds	r14, 0x0102	; 0x800102 <__data_start+0x2>
 298:	f0 90 03 01 	lds	r15, 0x0103	; 0x800103 <__data_start+0x3>
 29c:	80 e0       	ldi	r24, 0x00	; 0
 29e:	90 e0       	ldi	r25, 0x00	; 0
 2a0:	0e 94 2c 04 	call	0x858	; 0x858 <__floatunsisf>
 2a4:	a7 01       	movw	r20, r14
 2a6:	96 01       	movw	r18, r12
 2a8:	0e 94 8d 04 	call	0x91a	; 0x91a <__gesf2>
 2ac:	18 16       	cp	r1, r24
 2ae:	bc f5       	brge	.+110    	; 0x31e <main+0xdc>
 2b0:	60 91 a4 01 	lds	r22, 0x01A4	; 0x8001a4 <left_line>
 2b4:	70 91 a5 01 	lds	r23, 0x01A5	; 0x8001a5 <left_line+0x1>
 2b8:	c0 90 00 01 	lds	r12, 0x0100	; 0x800100 <__data_start>
 2bc:	d0 90 01 01 	lds	r13, 0x0101	; 0x800101 <__data_start+0x1>
 2c0:	e0 90 02 01 	lds	r14, 0x0102	; 0x800102 <__data_start+0x2>
 2c4:	f0 90 03 01 	lds	r15, 0x0103	; 0x800103 <__data_start+0x3>
 2c8:	80 e0       	ldi	r24, 0x00	; 0
 2ca:	90 e0       	ldi	r25, 0x00	; 0
 2cc:	0e 94 2c 04 	call	0x858	; 0x858 <__floatunsisf>
 2d0:	a7 01       	movw	r20, r14
 2d2:	96 01       	movw	r18, r12
 2d4:	0e 94 27 04 	call	0x84e	; 0x84e <__cmpsf2>
 2d8:	88 23       	and	r24, r24
 2da:	0c f5       	brge	.+66     	; 0x31e <main+0xdc>
 2dc:	60 91 6d 01 	lds	r22, 0x016D	; 0x80016d <right_line>
 2e0:	70 91 6e 01 	lds	r23, 0x016E	; 0x80016e <right_line+0x1>
 2e4:	c0 90 00 01 	lds	r12, 0x0100	; 0x800100 <__data_start>
 2e8:	d0 90 01 01 	lds	r13, 0x0101	; 0x800101 <__data_start+0x1>
 2ec:	e0 90 02 01 	lds	r14, 0x0102	; 0x800102 <__data_start+0x2>
 2f0:	f0 90 03 01 	lds	r15, 0x0103	; 0x800103 <__data_start+0x3>
 2f4:	80 e0       	ldi	r24, 0x00	; 0
 2f6:	90 e0       	ldi	r25, 0x00	; 0
 2f8:	0e 94 2c 04 	call	0x858	; 0x858 <__floatunsisf>
 2fc:	a7 01       	movw	r20, r14
 2fe:	96 01       	movw	r18, r12
 300:	0e 94 27 04 	call	0x84e	; 0x84e <__cmpsf2>
 304:	88 23       	and	r24, r24
 306:	5c f4       	brge	.+22     	; 0x31e <main+0xdc>
				RIGHT_MOTOR_FWD();
 308:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <RIGHT_MOTOR_FWD>
				LEFT_MOTOR_FWD();
 30c:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <LEFT_MOTOR_FWD>

void SET_PWM_OUTPUT(float pwm_duty_cycle, uint8_t channel){
	switch (channel)
	{
		case MOTOR_LEFT_PWM:
		DDRD |= (1 << DDD5);			// Set PIND5 as Output
 310:	55 9a       	sbi	0x0a, 5	; 10
		new_left_duty_cycle = pwm_duty_cycle;	//(int)((float)(255 * (pwm_duty_cycle/100)));			// Set Compare register for desired duty cycle
 312:	d0 93 70 01 	sts	0x0170, r29	; 0x800170 <new_left_duty_cycle>
		break;
		case MOTOR_RIGHT_PWM:
		DDRD |= (1 << DDD6);			// Set PIND6 as Output
 316:	56 9a       	sbi	0x0a, 6	; 10
		new_right_duty_cycle = pwm_duty_cycle;		//(int)((float)(255 * (pwm_duty_cycle/100)));			// Set Compare registers for desired duty cycle
 318:	d0 93 a6 01 	sts	0x01A6, r29	; 0x8001a6 <new_right_duty_cycle>
 31c:	ad cf       	rjmp	.-166    	; 0x278 <main+0x36>
			if (center_line > setpoint && left_line < setpoint && right_line < setpoint){
				RIGHT_MOTOR_FWD();
				LEFT_MOTOR_FWD();
				SET_PWM_OUTPUT(150, MOTOR_LEFT_PWM);
				SET_PWM_OUTPUT(150, MOTOR_RIGHT_PWM);
			} else if (right_line > setpoint && left_line < setpoint && center_line < setpoint){
 31e:	60 91 6d 01 	lds	r22, 0x016D	; 0x80016d <right_line>
 322:	70 91 6e 01 	lds	r23, 0x016E	; 0x80016e <right_line+0x1>
 326:	c0 90 00 01 	lds	r12, 0x0100	; 0x800100 <__data_start>
 32a:	d0 90 01 01 	lds	r13, 0x0101	; 0x800101 <__data_start+0x1>
 32e:	e0 90 02 01 	lds	r14, 0x0102	; 0x800102 <__data_start+0x2>
 332:	f0 90 03 01 	lds	r15, 0x0103	; 0x800103 <__data_start+0x3>
 336:	80 e0       	ldi	r24, 0x00	; 0
 338:	90 e0       	ldi	r25, 0x00	; 0
 33a:	0e 94 2c 04 	call	0x858	; 0x858 <__floatunsisf>
 33e:	a7 01       	movw	r20, r14
 340:	96 01       	movw	r18, r12
 342:	0e 94 8d 04 	call	0x91a	; 0x91a <__gesf2>
 346:	18 16       	cp	r1, r24
 348:	bc f5       	brge	.+110    	; 0x3b8 <main+0x176>
 34a:	60 91 a4 01 	lds	r22, 0x01A4	; 0x8001a4 <left_line>
 34e:	70 91 a5 01 	lds	r23, 0x01A5	; 0x8001a5 <left_line+0x1>
 352:	c0 90 00 01 	lds	r12, 0x0100	; 0x800100 <__data_start>
 356:	d0 90 01 01 	lds	r13, 0x0101	; 0x800101 <__data_start+0x1>
 35a:	e0 90 02 01 	lds	r14, 0x0102	; 0x800102 <__data_start+0x2>
 35e:	f0 90 03 01 	lds	r15, 0x0103	; 0x800103 <__data_start+0x3>
 362:	80 e0       	ldi	r24, 0x00	; 0
 364:	90 e0       	ldi	r25, 0x00	; 0
 366:	0e 94 2c 04 	call	0x858	; 0x858 <__floatunsisf>
 36a:	a7 01       	movw	r20, r14
 36c:	96 01       	movw	r18, r12
 36e:	0e 94 27 04 	call	0x84e	; 0x84e <__cmpsf2>
 372:	88 23       	and	r24, r24
 374:	0c f5       	brge	.+66     	; 0x3b8 <main+0x176>
 376:	60 91 a7 01 	lds	r22, 0x01A7	; 0x8001a7 <center_line>
 37a:	70 91 a8 01 	lds	r23, 0x01A8	; 0x8001a8 <center_line+0x1>
 37e:	c0 90 00 01 	lds	r12, 0x0100	; 0x800100 <__data_start>
 382:	d0 90 01 01 	lds	r13, 0x0101	; 0x800101 <__data_start+0x1>
 386:	e0 90 02 01 	lds	r14, 0x0102	; 0x800102 <__data_start+0x2>
 38a:	f0 90 03 01 	lds	r15, 0x0103	; 0x800103 <__data_start+0x3>
 38e:	80 e0       	ldi	r24, 0x00	; 0
 390:	90 e0       	ldi	r25, 0x00	; 0
 392:	0e 94 2c 04 	call	0x858	; 0x858 <__floatunsisf>
 396:	a7 01       	movw	r20, r14
 398:	96 01       	movw	r18, r12
 39a:	0e 94 27 04 	call	0x84e	; 0x84e <__cmpsf2>
 39e:	88 23       	and	r24, r24
 3a0:	5c f4       	brge	.+22     	; 0x3b8 <main+0x176>
				RIGHT_MOTOR_FWD();
 3a2:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <RIGHT_MOTOR_FWD>
		case MOTOR_LEFT_PWM:
		DDRD |= (1 << DDD5);			// Set PIND5 as Output
		new_left_duty_cycle = pwm_duty_cycle;	//(int)((float)(255 * (pwm_duty_cycle/100)));			// Set Compare register for desired duty cycle
		break;
		case MOTOR_RIGHT_PWM:
		DDRD |= (1 << DDD6);			// Set PIND6 as Output
 3a6:	56 9a       	sbi	0x0a, 6	; 10
		new_right_duty_cycle = pwm_duty_cycle;		//(int)((float)(255 * (pwm_duty_cycle/100)));			// Set Compare registers for desired duty cycle
 3a8:	00 93 a6 01 	sts	0x01A6, r16	; 0x8001a6 <new_right_duty_cycle>
				SET_PWM_OUTPUT(150, MOTOR_LEFT_PWM);
				SET_PWM_OUTPUT(150, MOTOR_RIGHT_PWM);
			} else if (right_line > setpoint && left_line < setpoint && center_line < setpoint){
				RIGHT_MOTOR_FWD();
				SET_PWM_OUTPUT(50, MOTOR_RIGHT_PWM);
				LEFT_MOTOR_FWD();
 3ac:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <LEFT_MOTOR_FWD>

void SET_PWM_OUTPUT(float pwm_duty_cycle, uint8_t channel){
	switch (channel)
	{
		case MOTOR_LEFT_PWM:
		DDRD |= (1 << DDD5);			// Set PIND5 as Output
 3b0:	55 9a       	sbi	0x0a, 5	; 10
		new_left_duty_cycle = pwm_duty_cycle;	//(int)((float)(255 * (pwm_duty_cycle/100)));			// Set Compare register for desired duty cycle
 3b2:	10 93 70 01 	sts	0x0170, r17	; 0x800170 <new_left_duty_cycle>
 3b6:	60 cf       	rjmp	.-320    	; 0x278 <main+0x36>
			} else if (right_line > setpoint && left_line < setpoint && center_line < setpoint){
				RIGHT_MOTOR_FWD();
				SET_PWM_OUTPUT(50, MOTOR_RIGHT_PWM);
				LEFT_MOTOR_FWD();
				SET_PWM_OUTPUT(140, MOTOR_LEFT_PWM);
			}else if (left_line > setpoint && right_line < setpoint && center_line < setpoint){
 3b8:	60 91 a4 01 	lds	r22, 0x01A4	; 0x8001a4 <left_line>
 3bc:	70 91 a5 01 	lds	r23, 0x01A5	; 0x8001a5 <left_line+0x1>
 3c0:	c0 90 00 01 	lds	r12, 0x0100	; 0x800100 <__data_start>
 3c4:	d0 90 01 01 	lds	r13, 0x0101	; 0x800101 <__data_start+0x1>
 3c8:	e0 90 02 01 	lds	r14, 0x0102	; 0x800102 <__data_start+0x2>
 3cc:	f0 90 03 01 	lds	r15, 0x0103	; 0x800103 <__data_start+0x3>
 3d0:	80 e0       	ldi	r24, 0x00	; 0
 3d2:	90 e0       	ldi	r25, 0x00	; 0
 3d4:	0e 94 2c 04 	call	0x858	; 0x858 <__floatunsisf>
 3d8:	a7 01       	movw	r20, r14
 3da:	96 01       	movw	r18, r12
 3dc:	0e 94 8d 04 	call	0x91a	; 0x91a <__gesf2>
 3e0:	18 16       	cp	r1, r24
 3e2:	bc f5       	brge	.+110    	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
 3e4:	60 91 6d 01 	lds	r22, 0x016D	; 0x80016d <right_line>
 3e8:	70 91 6e 01 	lds	r23, 0x016E	; 0x80016e <right_line+0x1>
 3ec:	c0 90 00 01 	lds	r12, 0x0100	; 0x800100 <__data_start>
 3f0:	d0 90 01 01 	lds	r13, 0x0101	; 0x800101 <__data_start+0x1>
 3f4:	e0 90 02 01 	lds	r14, 0x0102	; 0x800102 <__data_start+0x2>
 3f8:	f0 90 03 01 	lds	r15, 0x0103	; 0x800103 <__data_start+0x3>
 3fc:	80 e0       	ldi	r24, 0x00	; 0
 3fe:	90 e0       	ldi	r25, 0x00	; 0
 400:	0e 94 2c 04 	call	0x858	; 0x858 <__floatunsisf>
 404:	a7 01       	movw	r20, r14
 406:	96 01       	movw	r18, r12
 408:	0e 94 27 04 	call	0x84e	; 0x84e <__cmpsf2>
 40c:	88 23       	and	r24, r24
 40e:	0c f5       	brge	.+66     	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
 410:	60 91 a7 01 	lds	r22, 0x01A7	; 0x8001a7 <center_line>
 414:	70 91 a8 01 	lds	r23, 0x01A8	; 0x8001a8 <center_line+0x1>
 418:	c0 90 00 01 	lds	r12, 0x0100	; 0x800100 <__data_start>
 41c:	d0 90 01 01 	lds	r13, 0x0101	; 0x800101 <__data_start+0x1>
 420:	e0 90 02 01 	lds	r14, 0x0102	; 0x800102 <__data_start+0x2>
 424:	f0 90 03 01 	lds	r15, 0x0103	; 0x800103 <__data_start+0x3>
 428:	80 e0       	ldi	r24, 0x00	; 0
 42a:	90 e0       	ldi	r25, 0x00	; 0
 42c:	0e 94 2c 04 	call	0x858	; 0x858 <__floatunsisf>
 430:	a7 01       	movw	r20, r14
 432:	96 01       	movw	r18, r12
 434:	0e 94 27 04 	call	0x84e	; 0x84e <__cmpsf2>
 438:	88 23       	and	r24, r24
 43a:	5c f4       	brge	.+22     	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
				LEFT_MOTOR_FWD();
 43c:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <LEFT_MOTOR_FWD>

void SET_PWM_OUTPUT(float pwm_duty_cycle, uint8_t channel){
	switch (channel)
	{
		case MOTOR_LEFT_PWM:
		DDRD |= (1 << DDD5);			// Set PIND5 as Output
 440:	55 9a       	sbi	0x0a, 5	; 10
		new_left_duty_cycle = pwm_duty_cycle;	//(int)((float)(255 * (pwm_duty_cycle/100)));			// Set Compare register for desired duty cycle
 442:	00 93 70 01 	sts	0x0170, r16	; 0x800170 <new_left_duty_cycle>
				LEFT_MOTOR_FWD();
				SET_PWM_OUTPUT(140, MOTOR_LEFT_PWM);
			}else if (left_line > setpoint && right_line < setpoint && center_line < setpoint){
				LEFT_MOTOR_FWD();
				SET_PWM_OUTPUT(50, MOTOR_LEFT_PWM);
				RIGHT_MOTOR_FWD();
 446:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <RIGHT_MOTOR_FWD>
		case MOTOR_LEFT_PWM:
		DDRD |= (1 << DDD5);			// Set PIND5 as Output
		new_left_duty_cycle = pwm_duty_cycle;	//(int)((float)(255 * (pwm_duty_cycle/100)));			// Set Compare register for desired duty cycle
		break;
		case MOTOR_RIGHT_PWM:
		DDRD |= (1 << DDD6);			// Set PIND6 as Output
 44a:	56 9a       	sbi	0x0a, 6	; 10
		new_right_duty_cycle = pwm_duty_cycle;		//(int)((float)(255 * (pwm_duty_cycle/100)));			// Set Compare registers for desired duty cycle
 44c:	10 93 a6 01 	sts	0x01A6, r17	; 0x8001a6 <new_right_duty_cycle>
 450:	13 cf       	rjmp	.-474    	; 0x278 <main+0x36>
			}else if (left_line > setpoint && right_line < setpoint && center_line < setpoint){
				LEFT_MOTOR_FWD();
				SET_PWM_OUTPUT(50, MOTOR_LEFT_PWM);
				RIGHT_MOTOR_FWD();
				SET_PWM_OUTPUT(140, MOTOR_RIGHT_PWM);
			}else if (left_line > setpoint && center_line > setpoint && right_line < setpoint){
 452:	60 91 a4 01 	lds	r22, 0x01A4	; 0x8001a4 <left_line>
 456:	70 91 a5 01 	lds	r23, 0x01A5	; 0x8001a5 <left_line+0x1>
 45a:	c0 90 00 01 	lds	r12, 0x0100	; 0x800100 <__data_start>
 45e:	d0 90 01 01 	lds	r13, 0x0101	; 0x800101 <__data_start+0x1>
 462:	e0 90 02 01 	lds	r14, 0x0102	; 0x800102 <__data_start+0x2>
 466:	f0 90 03 01 	lds	r15, 0x0103	; 0x800103 <__data_start+0x3>
 46a:	80 e0       	ldi	r24, 0x00	; 0
 46c:	90 e0       	ldi	r25, 0x00	; 0
 46e:	0e 94 2c 04 	call	0x858	; 0x858 <__floatunsisf>
 472:	a7 01       	movw	r20, r14
 474:	96 01       	movw	r18, r12
 476:	0e 94 8d 04 	call	0x91a	; 0x91a <__gesf2>
 47a:	18 16       	cp	r1, r24
 47c:	bc f5       	brge	.+110    	; 0x4ec <__LOCK_REGION_LENGTH__+0xec>
 47e:	60 91 a7 01 	lds	r22, 0x01A7	; 0x8001a7 <center_line>
 482:	70 91 a8 01 	lds	r23, 0x01A8	; 0x8001a8 <center_line+0x1>
 486:	c0 90 00 01 	lds	r12, 0x0100	; 0x800100 <__data_start>
 48a:	d0 90 01 01 	lds	r13, 0x0101	; 0x800101 <__data_start+0x1>
 48e:	e0 90 02 01 	lds	r14, 0x0102	; 0x800102 <__data_start+0x2>
 492:	f0 90 03 01 	lds	r15, 0x0103	; 0x800103 <__data_start+0x3>
 496:	80 e0       	ldi	r24, 0x00	; 0
 498:	90 e0       	ldi	r25, 0x00	; 0
 49a:	0e 94 2c 04 	call	0x858	; 0x858 <__floatunsisf>
 49e:	a7 01       	movw	r20, r14
 4a0:	96 01       	movw	r18, r12
 4a2:	0e 94 8d 04 	call	0x91a	; 0x91a <__gesf2>
 4a6:	18 16       	cp	r1, r24
 4a8:	0c f5       	brge	.+66     	; 0x4ec <__LOCK_REGION_LENGTH__+0xec>
 4aa:	60 91 6d 01 	lds	r22, 0x016D	; 0x80016d <right_line>
 4ae:	70 91 6e 01 	lds	r23, 0x016E	; 0x80016e <right_line+0x1>
 4b2:	c0 90 00 01 	lds	r12, 0x0100	; 0x800100 <__data_start>
 4b6:	d0 90 01 01 	lds	r13, 0x0101	; 0x800101 <__data_start+0x1>
 4ba:	e0 90 02 01 	lds	r14, 0x0102	; 0x800102 <__data_start+0x2>
 4be:	f0 90 03 01 	lds	r15, 0x0103	; 0x800103 <__data_start+0x3>
 4c2:	80 e0       	ldi	r24, 0x00	; 0
 4c4:	90 e0       	ldi	r25, 0x00	; 0
 4c6:	0e 94 2c 04 	call	0x858	; 0x858 <__floatunsisf>
 4ca:	a7 01       	movw	r20, r14
 4cc:	96 01       	movw	r18, r12
 4ce:	0e 94 27 04 	call	0x84e	; 0x84e <__cmpsf2>
 4d2:	88 23       	and	r24, r24
 4d4:	5c f4       	brge	.+22     	; 0x4ec <__LOCK_REGION_LENGTH__+0xec>
				LEFT_MOTOR_FWD();
 4d6:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <LEFT_MOTOR_FWD>

void SET_PWM_OUTPUT(float pwm_duty_cycle, uint8_t channel){
	switch (channel)
	{
		case MOTOR_LEFT_PWM:
		DDRD |= (1 << DDD5);			// Set PIND5 as Output
 4da:	55 9a       	sbi	0x0a, 5	; 10
		new_left_duty_cycle = pwm_duty_cycle;	//(int)((float)(255 * (pwm_duty_cycle/100)));			// Set Compare register for desired duty cycle
 4dc:	a0 92 70 01 	sts	0x0170, r10	; 0x800170 <new_left_duty_cycle>
				RIGHT_MOTOR_FWD();
				SET_PWM_OUTPUT(140, MOTOR_RIGHT_PWM);
			}else if (left_line > setpoint && center_line > setpoint && right_line < setpoint){
				LEFT_MOTOR_FWD();
				SET_PWM_OUTPUT(90, MOTOR_LEFT_PWM);
				RIGHT_MOTOR_FWD();
 4e0:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <RIGHT_MOTOR_FWD>
		case MOTOR_LEFT_PWM:
		DDRD |= (1 << DDD5);			// Set PIND5 as Output
		new_left_duty_cycle = pwm_duty_cycle;	//(int)((float)(255 * (pwm_duty_cycle/100)));			// Set Compare register for desired duty cycle
		break;
		case MOTOR_RIGHT_PWM:
		DDRD |= (1 << DDD6);			// Set PIND6 as Output
 4e4:	56 9a       	sbi	0x0a, 6	; 10
		new_right_duty_cycle = pwm_duty_cycle;		//(int)((float)(255 * (pwm_duty_cycle/100)));			// Set Compare registers for desired duty cycle
 4e6:	b0 92 a6 01 	sts	0x01A6, r11	; 0x8001a6 <new_right_duty_cycle>
 4ea:	c6 ce       	rjmp	.-628    	; 0x278 <main+0x36>
			}else if (left_line > setpoint && center_line > setpoint && right_line < setpoint){
				LEFT_MOTOR_FWD();
				SET_PWM_OUTPUT(90, MOTOR_LEFT_PWM);
				RIGHT_MOTOR_FWD();
				SET_PWM_OUTPUT(120, MOTOR_RIGHT_PWM);
			}else if (right_line > setpoint && center_line > setpoint && left_line < setpoint){
 4ec:	60 91 6d 01 	lds	r22, 0x016D	; 0x80016d <right_line>
 4f0:	70 91 6e 01 	lds	r23, 0x016E	; 0x80016e <right_line+0x1>
 4f4:	c0 90 00 01 	lds	r12, 0x0100	; 0x800100 <__data_start>
 4f8:	d0 90 01 01 	lds	r13, 0x0101	; 0x800101 <__data_start+0x1>
 4fc:	e0 90 02 01 	lds	r14, 0x0102	; 0x800102 <__data_start+0x2>
 500:	f0 90 03 01 	lds	r15, 0x0103	; 0x800103 <__data_start+0x3>
 504:	80 e0       	ldi	r24, 0x00	; 0
 506:	90 e0       	ldi	r25, 0x00	; 0
 508:	0e 94 2c 04 	call	0x858	; 0x858 <__floatunsisf>
 50c:	a7 01       	movw	r20, r14
 50e:	96 01       	movw	r18, r12
 510:	0e 94 8d 04 	call	0x91a	; 0x91a <__gesf2>
 514:	18 16       	cp	r1, r24
 516:	bc f5       	brge	.+110    	; 0x586 <__LOCK_REGION_LENGTH__+0x186>
 518:	60 91 a7 01 	lds	r22, 0x01A7	; 0x8001a7 <center_line>
 51c:	70 91 a8 01 	lds	r23, 0x01A8	; 0x8001a8 <center_line+0x1>
 520:	c0 90 00 01 	lds	r12, 0x0100	; 0x800100 <__data_start>
 524:	d0 90 01 01 	lds	r13, 0x0101	; 0x800101 <__data_start+0x1>
 528:	e0 90 02 01 	lds	r14, 0x0102	; 0x800102 <__data_start+0x2>
 52c:	f0 90 03 01 	lds	r15, 0x0103	; 0x800103 <__data_start+0x3>
 530:	80 e0       	ldi	r24, 0x00	; 0
 532:	90 e0       	ldi	r25, 0x00	; 0
 534:	0e 94 2c 04 	call	0x858	; 0x858 <__floatunsisf>
 538:	a7 01       	movw	r20, r14
 53a:	96 01       	movw	r18, r12
 53c:	0e 94 8d 04 	call	0x91a	; 0x91a <__gesf2>
 540:	18 16       	cp	r1, r24
 542:	0c f5       	brge	.+66     	; 0x586 <__LOCK_REGION_LENGTH__+0x186>
 544:	60 91 a4 01 	lds	r22, 0x01A4	; 0x8001a4 <left_line>
 548:	70 91 a5 01 	lds	r23, 0x01A5	; 0x8001a5 <left_line+0x1>
 54c:	c0 90 00 01 	lds	r12, 0x0100	; 0x800100 <__data_start>
 550:	d0 90 01 01 	lds	r13, 0x0101	; 0x800101 <__data_start+0x1>
 554:	e0 90 02 01 	lds	r14, 0x0102	; 0x800102 <__data_start+0x2>
 558:	f0 90 03 01 	lds	r15, 0x0103	; 0x800103 <__data_start+0x3>
 55c:	80 e0       	ldi	r24, 0x00	; 0
 55e:	90 e0       	ldi	r25, 0x00	; 0
 560:	0e 94 2c 04 	call	0x858	; 0x858 <__floatunsisf>
 564:	a7 01       	movw	r20, r14
 566:	96 01       	movw	r18, r12
 568:	0e 94 27 04 	call	0x84e	; 0x84e <__cmpsf2>
 56c:	88 23       	and	r24, r24
 56e:	5c f4       	brge	.+22     	; 0x586 <__LOCK_REGION_LENGTH__+0x186>
				RIGHT_MOTOR_FWD();
 570:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <RIGHT_MOTOR_FWD>
		case MOTOR_LEFT_PWM:
		DDRD |= (1 << DDD5);			// Set PIND5 as Output
		new_left_duty_cycle = pwm_duty_cycle;	//(int)((float)(255 * (pwm_duty_cycle/100)));			// Set Compare register for desired duty cycle
		break;
		case MOTOR_RIGHT_PWM:
		DDRD |= (1 << DDD6);			// Set PIND6 as Output
 574:	56 9a       	sbi	0x0a, 6	; 10
		new_right_duty_cycle = pwm_duty_cycle;		//(int)((float)(255 * (pwm_duty_cycle/100)));			// Set Compare registers for desired duty cycle
 576:	a0 92 a6 01 	sts	0x01A6, r10	; 0x8001a6 <new_right_duty_cycle>
				RIGHT_MOTOR_FWD();
				SET_PWM_OUTPUT(120, MOTOR_RIGHT_PWM);
			}else if (right_line > setpoint && center_line > setpoint && left_line < setpoint){
				RIGHT_MOTOR_FWD();
				SET_PWM_OUTPUT(90, MOTOR_RIGHT_PWM);
				LEFT_MOTOR_FWD();
 57a:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <LEFT_MOTOR_FWD>

void SET_PWM_OUTPUT(float pwm_duty_cycle, uint8_t channel){
	switch (channel)
	{
		case MOTOR_LEFT_PWM:
		DDRD |= (1 << DDD5);			// Set PIND5 as Output
 57e:	55 9a       	sbi	0x0a, 5	; 10
		new_left_duty_cycle = pwm_duty_cycle;	//(int)((float)(255 * (pwm_duty_cycle/100)));			// Set Compare register for desired duty cycle
 580:	b0 92 70 01 	sts	0x0170, r11	; 0x800170 <new_left_duty_cycle>
 584:	79 ce       	rjmp	.-782    	; 0x278 <main+0x36>
				RIGHT_MOTOR_FWD();
				SET_PWM_OUTPUT(90, MOTOR_RIGHT_PWM);
				LEFT_MOTOR_FWD();
				SET_PWM_OUTPUT(120, MOTOR_LEFT_PWM);
			}else{
				RIGHT_MOTOR_FWD();
 586:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <RIGHT_MOTOR_FWD>
		case MOTOR_LEFT_PWM:
		DDRD |= (1 << DDD5);			// Set PIND5 as Output
		new_left_duty_cycle = pwm_duty_cycle;	//(int)((float)(255 * (pwm_duty_cycle/100)));			// Set Compare register for desired duty cycle
		break;
		case MOTOR_RIGHT_PWM:
		DDRD |= (1 << DDD6);			// Set PIND6 as Output
 58a:	56 9a       	sbi	0x0a, 6	; 10
		new_right_duty_cycle = pwm_duty_cycle;		//(int)((float)(255 * (pwm_duty_cycle/100)));			// Set Compare registers for desired duty cycle
 58c:	c0 93 a6 01 	sts	0x01A6, r28	; 0x8001a6 <new_right_duty_cycle>
				LEFT_MOTOR_FWD();
				SET_PWM_OUTPUT(120, MOTOR_LEFT_PWM);
			}else{
				RIGHT_MOTOR_FWD();
				SET_PWM_OUTPUT(125, MOTOR_RIGHT_PWM);
				LEFT_MOTOR_FWD();
 590:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <LEFT_MOTOR_FWD>

void SET_PWM_OUTPUT(float pwm_duty_cycle, uint8_t channel){
	switch (channel)
	{
		case MOTOR_LEFT_PWM:
		DDRD |= (1 << DDD5);			// Set PIND5 as Output
 594:	55 9a       	sbi	0x0a, 5	; 10
		new_left_duty_cycle = pwm_duty_cycle;	//(int)((float)(255 * (pwm_duty_cycle/100)));			// Set Compare register for desired duty cycle
 596:	c0 93 70 01 	sts	0x0170, r28	; 0x800170 <new_left_duty_cycle>
 59a:	6e ce       	rjmp	.-804    	; 0x278 <main+0x36>

0000059c <pwm_timer_init>:
	TCCR0B |= (1 << CS01);									// Prescaler of 8 for 7.812kHz PWM signal
	TIMSK0 |= (1 << OCIE0A) | (1 << OCIE0B);				// Set Compare Match Interrupts for OC0A and OC0B
}

void pwm_timer_stop(void){
	TCCR0A &= ~(1 << COM0A1) | ~(1 << COM0A0);		// Disables PWM output for timer and enables normal port operation
 59c:	84 b5       	in	r24, 0x24	; 36
 59e:	80 68       	ori	r24, 0x80	; 128
 5a0:	84 bd       	out	0x24, r24	; 36
 5a2:	84 b5       	in	r24, 0x24	; 36
 5a4:	80 62       	ori	r24, 0x20	; 32
 5a6:	84 bd       	out	0x24, r24	; 36
 5a8:	84 b5       	in	r24, 0x24	; 36
 5aa:	83 60       	ori	r24, 0x03	; 3
 5ac:	84 bd       	out	0x24, r24	; 36
 5ae:	85 b5       	in	r24, 0x25	; 37
 5b0:	82 60       	ori	r24, 0x02	; 2
 5b2:	85 bd       	out	0x25, r24	; 37
 5b4:	ee e6       	ldi	r30, 0x6E	; 110
 5b6:	f0 e0       	ldi	r31, 0x00	; 0
 5b8:	80 81       	ld	r24, Z
 5ba:	86 60       	ori	r24, 0x06	; 6
 5bc:	80 83       	st	Z, r24
 5be:	08 95       	ret

000005c0 <RIGHT_MOTOR_FWD>:
}

void RIGHT_MOTOR_FWD(void){
	PORTD |= (1 << MOTOR_RIGHT_CONTROL1);			// Set IN1 to High according to motor driver datasheet
 5c0:	5f 9a       	sbi	0x0b, 7	; 11
	PORTB &= ~(1 << MOTOR_RIGHT_CONTROL2);			// Set IN2 to Low according to motor driver datasheet
 5c2:	28 98       	cbi	0x05, 0	; 5
 5c4:	08 95       	ret

000005c6 <LEFT_MOTOR_FWD>:
}

void LEFT_MOTOR_FWD(void){
	PORTD |= (1 << MOTOR_LEFT_CONTROL1);			// Set IN1 to High according to motor driver datasheet
 5c6:	5a 9a       	sbi	0x0b, 2	; 11
	PORTD &= ~(1 << MOTOR_LEFT_CONTROL2);			// Set IN2 To Low according to motor driver datasheet
 5c8:	5c 98       	cbi	0x0b, 4	; 11
 5ca:	08 95       	ret

000005cc <uart_init>:
{
#if F_CPU < 2000000UL && defined(U2X)
  UCSR0A = _BV(U2X);             /* improve baud rate error by using 2x clk */
  UBRR0L = (F_CPU / (8UL * UART_BAUD)) - 1;
#else
  UBRR0L = (F_CPU / (16UL * UART_BAUD)) - 1;
 5cc:	87 e6       	ldi	r24, 0x67	; 103
 5ce:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
#endif
  UCSR0B = _BV(TXEN0) | _BV(RXEN0); /* tx/rx enable */
 5d2:	88 e1       	ldi	r24, 0x18	; 24
 5d4:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 5d8:	08 95       	ret

000005da <uart_putchar>:
 * Send character c down the UART Tx, wait until tx holding register
 * is empty.
 */
int
uart_putchar(char c, FILE *stream)
{
 5da:	cf 93       	push	r28
 5dc:	c8 2f       	mov	r28, r24

  if (c == '\a')
 5de:	87 30       	cpi	r24, 0x07	; 7
 5e0:	69 f4       	brne	.+26     	; 0x5fc <uart_putchar+0x22>
    {
      fputs("*ring*\n", stderr);
 5e2:	20 91 ad 01 	lds	r18, 0x01AD	; 0x8001ad <__iob+0x4>
 5e6:	30 91 ae 01 	lds	r19, 0x01AE	; 0x8001ae <__iob+0x5>
 5ea:	47 e0       	ldi	r20, 0x07	; 7
 5ec:	50 e0       	ldi	r21, 0x00	; 0
 5ee:	61 e0       	ldi	r22, 0x01	; 1
 5f0:	70 e0       	ldi	r23, 0x00	; 0
 5f2:	82 e1       	ldi	r24, 0x12	; 18
 5f4:	91 e0       	ldi	r25, 0x01	; 1
 5f6:	0e 94 92 04 	call	0x924	; 0x924 <fwrite>
      return 0;
 5fa:	0c c0       	rjmp	.+24     	; 0x614 <uart_putchar+0x3a>
    }

  if (c == '\n')
 5fc:	8a 30       	cpi	r24, 0x0A	; 10
 5fe:	19 f4       	brne	.+6      	; 0x606 <uart_putchar+0x2c>
    uart_putchar('\r', stream);
 600:	8d e0       	ldi	r24, 0x0D	; 13
 602:	0e 94 ed 02 	call	0x5da	; 0x5da <uart_putchar>
  loop_until_bit_is_set(UCSR0A, UDRE0);
 606:	e0 ec       	ldi	r30, 0xC0	; 192
 608:	f0 e0       	ldi	r31, 0x00	; 0
 60a:	80 81       	ld	r24, Z
 60c:	85 ff       	sbrs	r24, 5
 60e:	fd cf       	rjmp	.-6      	; 0x60a <uart_putchar+0x30>
  UDR0 = c;
 610:	c0 93 c6 00 	sts	0x00C6, r28	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>

  return 0;
}
 614:	80 e0       	ldi	r24, 0x00	; 0
 616:	90 e0       	ldi	r25, 0x00	; 0
 618:	cf 91       	pop	r28
 61a:	08 95       	ret

0000061c <uart_getchar>:
 * Successive calls to uart_getchar() will be satisfied from the
 * internal buffer until that buffer is emptied again.
 */
int
uart_getchar(FILE *stream)
{
 61c:	6f 92       	push	r6
 61e:	7f 92       	push	r7
 620:	8f 92       	push	r8
 622:	9f 92       	push	r9
 624:	af 92       	push	r10
 626:	bf 92       	push	r11
 628:	cf 92       	push	r12
 62a:	df 92       	push	r13
 62c:	ef 92       	push	r14
 62e:	ff 92       	push	r15
 630:	0f 93       	push	r16
 632:	1f 93       	push	r17
 634:	cf 93       	push	r28
 636:	df 93       	push	r29
  uint8_t c;
  char *cp, *cp2;
  static char b[RX_BUFSIZE];
  static char *rxp;

  if (rxp == 0)
 638:	20 91 6b 01 	lds	r18, 0x016B	; 0x80016b <rxp.1827>
 63c:	30 91 6c 01 	lds	r19, 0x016C	; 0x80016c <rxp.1827+0x1>
 640:	23 2b       	or	r18, r19
 642:	09 f0       	breq	.+2      	; 0x646 <uart_getchar+0x2a>
 644:	da c0       	rjmp	.+436    	; 0x7fa <uart_getchar+0x1de>
 646:	8c 01       	movw	r16, r24
 648:	0f 2e       	mov	r0, r31
 64a:	fb e1       	ldi	r31, 0x1B	; 27
 64c:	8f 2e       	mov	r8, r31
 64e:	f1 e0       	ldi	r31, 0x01	; 1
 650:	9f 2e       	mov	r9, r31
 652:	f0 2d       	mov	r31, r0
    for (cp = b;;)
      {
	loop_until_bit_is_set(UCSR0A, RXC0);
 654:	c0 ec       	ldi	r28, 0xC0	; 192
 656:	d0 e0       	ldi	r29, 0x00	; 0
	if (UCSR0A & _BV(FE0))
	  return _FDEV_EOF;
	if (UCSR0A & _BV(DOR0))
	  return _FDEV_ERR;
	c = UDR0;
 658:	0f 2e       	mov	r0, r31
 65a:	f6 ec       	ldi	r31, 0xC6	; 198
 65c:	cf 2e       	mov	r12, r31
 65e:	d1 2c       	mov	r13, r1
 660:	f0 2d       	mov	r31, r0
 662:	54 01       	movw	r10, r8
 664:	0f 2e       	mov	r0, r31
 666:	fa e1       	ldi	r31, 0x1A	; 26
 668:	6f 2e       	mov	r6, r31
 66a:	f1 e0       	ldi	r31, 0x01	; 1
 66c:	7f 2e       	mov	r7, r31
 66e:	f0 2d       	mov	r31, r0
  static char *rxp;

  if (rxp == 0)
    for (cp = b;;)
      {
	loop_until_bit_is_set(UCSR0A, RXC0);
 670:	88 81       	ld	r24, Y
 672:	88 23       	and	r24, r24
 674:	ec f7       	brge	.-6      	; 0x670 <uart_getchar+0x54>
	if (UCSR0A & _BV(FE0))
 676:	88 81       	ld	r24, Y
 678:	84 fd       	sbrc	r24, 4
 67a:	d2 c0       	rjmp	.+420    	; 0x820 <uart_getchar+0x204>
	  return _FDEV_EOF;
	if (UCSR0A & _BV(DOR0))
 67c:	88 81       	ld	r24, Y
 67e:	83 fd       	sbrc	r24, 3
 680:	d2 c0       	rjmp	.+420    	; 0x826 <uart_getchar+0x20a>
	  return _FDEV_ERR;
	c = UDR0;
 682:	f6 01       	movw	r30, r12
 684:	80 81       	ld	r24, Z
	/* behaviour similar to Unix stty ICRNL */
	if (c == '\r')
 686:	8d 30       	cpi	r24, 0x0D	; 13
 688:	11 f0       	breq	.+4      	; 0x68e <uart_getchar+0x72>
	  c = '\n';
	if (c == '\n')
 68a:	8a 30       	cpi	r24, 0x0A	; 10
 68c:	69 f4       	brne	.+26     	; 0x6a8 <uart_getchar+0x8c>
	  {
	    *cp = c;
 68e:	8a e0       	ldi	r24, 0x0A	; 10
 690:	f4 01       	movw	r30, r8
 692:	80 83       	st	Z, r24
	    uart_putchar(c, stream);
 694:	b8 01       	movw	r22, r16
 696:	0e 94 ed 02 	call	0x5da	; 0x5da <uart_putchar>
	    rxp = b;
 69a:	8b e1       	ldi	r24, 0x1B	; 27
 69c:	91 e0       	ldi	r25, 0x01	; 1
 69e:	90 93 6c 01 	sts	0x016C, r25	; 0x80016c <rxp.1827+0x1>
 6a2:	80 93 6b 01 	sts	0x016B, r24	; 0x80016b <rxp.1827>
	    break;
 6a6:	a9 c0       	rjmp	.+338    	; 0x7fa <uart_getchar+0x1de>
	  }
	else if (c == '\t')
 6a8:	89 30       	cpi	r24, 0x09	; 9
 6aa:	39 f0       	breq	.+14     	; 0x6ba <uart_getchar+0x9e>
	  c = ' ';

	if ((c >= (uint8_t)' ' && c <= (uint8_t)'\x7e') ||
 6ac:	90 ee       	ldi	r25, 0xE0	; 224
 6ae:	98 0f       	add	r25, r24
 6b0:	9f 35       	cpi	r25, 0x5F	; 95
 6b2:	20 f0       	brcs	.+8      	; 0x6bc <uart_getchar+0xa0>
 6b4:	80 3a       	cpi	r24, 0xA0	; 160
 6b6:	b8 f0       	brcs	.+46     	; 0x6e6 <uart_getchar+0xca>
 6b8:	01 c0       	rjmp	.+2      	; 0x6bc <uart_getchar+0xa0>
	    uart_putchar(c, stream);
	    rxp = b;
	    break;
	  }
	else if (c == '\t')
	  c = ' ';
 6ba:	80 e2       	ldi	r24, 0x20	; 32

	if ((c >= (uint8_t)' ' && c <= (uint8_t)'\x7e') ||
	    c >= (uint8_t)'\xa0')
	  {
	    if (cp == b + RX_BUFSIZE - 1)
 6bc:	fa e6       	ldi	r31, 0x6A	; 106
 6be:	8f 16       	cp	r8, r31
 6c0:	f1 e0       	ldi	r31, 0x01	; 1
 6c2:	9f 06       	cpc	r9, r31
 6c4:	29 f4       	brne	.+10     	; 0x6d0 <uart_getchar+0xb4>
	      uart_putchar('\a', stream);
 6c6:	b8 01       	movw	r22, r16
 6c8:	87 e0       	ldi	r24, 0x07	; 7
 6ca:	0e 94 ed 02 	call	0x5da	; 0x5da <uart_putchar>
 6ce:	d0 cf       	rjmp	.-96     	; 0x670 <uart_getchar+0x54>
	    else
	      {
		*cp++ = c;
 6d0:	74 01       	movw	r14, r8
 6d2:	9f ef       	ldi	r25, 0xFF	; 255
 6d4:	e9 1a       	sub	r14, r25
 6d6:	f9 0a       	sbc	r15, r25
 6d8:	f4 01       	movw	r30, r8
 6da:	80 83       	st	Z, r24
		uart_putchar(c, stream);
 6dc:	b8 01       	movw	r22, r16
 6de:	0e 94 ed 02 	call	0x5da	; 0x5da <uart_putchar>
	  {
	    if (cp == b + RX_BUFSIZE - 1)
	      uart_putchar('\a', stream);
	    else
	      {
		*cp++ = c;
 6e2:	47 01       	movw	r8, r14
 6e4:	c5 cf       	rjmp	.-118    	; 0x670 <uart_getchar+0x54>
		uart_putchar(c, stream);
	      }
	    continue;
	  }

	switch (c)
 6e6:	82 31       	cpi	r24, 0x12	; 18
 6e8:	d1 f1       	breq	.+116    	; 0x75e <uart_getchar+0x142>
 6ea:	30 f4       	brcc	.+12     	; 0x6f8 <uart_getchar+0xdc>
 6ec:	83 30       	cpi	r24, 0x03	; 3
 6ee:	09 f4       	brne	.+2      	; 0x6f2 <uart_getchar+0xd6>
 6f0:	9d c0       	rjmp	.+314    	; 0x82c <uart_getchar+0x210>
 6f2:	88 30       	cpi	r24, 0x08	; 8
 6f4:	e9 f0       	breq	.+58     	; 0x730 <uart_getchar+0x114>
 6f6:	bc cf       	rjmp	.-136    	; 0x670 <uart_getchar+0x54>
 6f8:	87 31       	cpi	r24, 0x17	; 23
 6fa:	29 f0       	breq	.+10     	; 0x706 <uart_getchar+0xea>
 6fc:	8f 37       	cpi	r24, 0x7F	; 127
 6fe:	c1 f0       	breq	.+48     	; 0x730 <uart_getchar+0x114>
 700:	85 31       	cpi	r24, 0x15	; 21
 702:	79 f0       	breq	.+30     	; 0x722 <uart_getchar+0x106>
 704:	b5 cf       	rjmp	.-150    	; 0x670 <uart_getchar+0x54>
		cp--;
	      }
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
 706:	fb e1       	ldi	r31, 0x1B	; 27
 708:	8f 16       	cp	r8, r31
 70a:	f1 e0       	ldi	r31, 0x01	; 1
 70c:	9f 06       	cpc	r9, r31
 70e:	09 f0       	breq	.+2      	; 0x712 <uart_getchar+0xf6>
 710:	08 f4       	brcc	.+2      	; 0x714 <uart_getchar+0xf8>
 712:	ae cf       	rjmp	.-164    	; 0x670 <uart_getchar+0x54>
 714:	f4 01       	movw	r30, r8
 716:	31 97       	sbiw	r30, 0x01	; 1
 718:	80 81       	ld	r24, Z
 71a:	80 32       	cpi	r24, 0x20	; 32
 71c:	09 f0       	breq	.+2      	; 0x720 <uart_getchar+0x104>
 71e:	52 c0       	rjmp	.+164    	; 0x7c4 <uart_getchar+0x1a8>
 720:	a7 cf       	rjmp	.-178    	; 0x670 <uart_getchar+0x54>
	    for (cp2 = b; cp2 < cp; cp2++)
	      uart_putchar(*cp2, stream);
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
 722:	8b e1       	ldi	r24, 0x1B	; 27
 724:	88 16       	cp	r8, r24
 726:	81 e0       	ldi	r24, 0x01	; 1
 728:	98 06       	cpc	r9, r24
 72a:	09 f0       	breq	.+2      	; 0x72e <uart_getchar+0x112>
 72c:	98 f5       	brcc	.+102    	; 0x794 <uart_getchar+0x178>
 72e:	a0 cf       	rjmp	.-192    	; 0x670 <uart_getchar+0x54>
	  case 'c' & 0x1f:
	    return -1;

	  case '\b':
	  case '\x7f':
	    if (cp > b)
 730:	9b e1       	ldi	r25, 0x1B	; 27
 732:	89 16       	cp	r8, r25
 734:	91 e0       	ldi	r25, 0x01	; 1
 736:	99 06       	cpc	r9, r25
 738:	09 f0       	breq	.+2      	; 0x73c <uart_getchar+0x120>
 73a:	08 f4       	brcc	.+2      	; 0x73e <uart_getchar+0x122>
 73c:	99 cf       	rjmp	.-206    	; 0x670 <uart_getchar+0x54>
	      {
		uart_putchar('\b', stream);
 73e:	b8 01       	movw	r22, r16
 740:	88 e0       	ldi	r24, 0x08	; 8
 742:	0e 94 ed 02 	call	0x5da	; 0x5da <uart_putchar>
		uart_putchar(' ', stream);
 746:	b8 01       	movw	r22, r16
 748:	80 e2       	ldi	r24, 0x20	; 32
 74a:	0e 94 ed 02 	call	0x5da	; 0x5da <uart_putchar>
		uart_putchar('\b', stream);
 74e:	b8 01       	movw	r22, r16
 750:	88 e0       	ldi	r24, 0x08	; 8
 752:	0e 94 ed 02 	call	0x5da	; 0x5da <uart_putchar>
		cp--;
 756:	e1 e0       	ldi	r30, 0x01	; 1
 758:	8e 1a       	sub	r8, r30
 75a:	91 08       	sbc	r9, r1
 75c:	89 cf       	rjmp	.-238    	; 0x670 <uart_getchar+0x54>
	      }
	    break;

	  case 'r' & 0x1f:
	    uart_putchar('\r', stream);
 75e:	b8 01       	movw	r22, r16
 760:	8d e0       	ldi	r24, 0x0D	; 13
 762:	0e 94 ed 02 	call	0x5da	; 0x5da <uart_putchar>
	    for (cp2 = b; cp2 < cp; cp2++)
 766:	fb e1       	ldi	r31, 0x1B	; 27
 768:	8f 16       	cp	r8, r31
 76a:	f1 e0       	ldi	r31, 0x01	; 1
 76c:	9f 06       	cpc	r9, r31
 76e:	09 f0       	breq	.+2      	; 0x772 <uart_getchar+0x156>
 770:	08 f4       	brcc	.+2      	; 0x774 <uart_getchar+0x158>
 772:	7e cf       	rjmp	.-260    	; 0x670 <uart_getchar+0x54>
 774:	0f 2e       	mov	r0, r31
 776:	fb e1       	ldi	r31, 0x1B	; 27
 778:	ef 2e       	mov	r14, r31
 77a:	f1 e0       	ldi	r31, 0x01	; 1
 77c:	ff 2e       	mov	r15, r31
 77e:	f0 2d       	mov	r31, r0
	      uart_putchar(*cp2, stream);
 780:	b8 01       	movw	r22, r16
 782:	f7 01       	movw	r30, r14
 784:	81 91       	ld	r24, Z+
 786:	7f 01       	movw	r14, r30
 788:	0e 94 ed 02 	call	0x5da	; 0x5da <uart_putchar>
	      }
	    break;

	  case 'r' & 0x1f:
	    uart_putchar('\r', stream);
	    for (cp2 = b; cp2 < cp; cp2++)
 78c:	8e 14       	cp	r8, r14
 78e:	9f 04       	cpc	r9, r15
 790:	b9 f7       	brne	.-18     	; 0x780 <uart_getchar+0x164>
 792:	6e cf       	rjmp	.-292    	; 0x670 <uart_getchar+0x54>
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
	      {
		uart_putchar('\b', stream);
 794:	b8 01       	movw	r22, r16
 796:	88 e0       	ldi	r24, 0x08	; 8
 798:	0e 94 ed 02 	call	0x5da	; 0x5da <uart_putchar>
		uart_putchar(' ', stream);
 79c:	b8 01       	movw	r22, r16
 79e:	80 e2       	ldi	r24, 0x20	; 32
 7a0:	0e 94 ed 02 	call	0x5da	; 0x5da <uart_putchar>
		uart_putchar('\b', stream);
 7a4:	b8 01       	movw	r22, r16
 7a6:	88 e0       	ldi	r24, 0x08	; 8
 7a8:	0e 94 ed 02 	call	0x5da	; 0x5da <uart_putchar>
		cp--;
 7ac:	f1 e0       	ldi	r31, 0x01	; 1
 7ae:	8f 1a       	sub	r8, r31
 7b0:	91 08       	sbc	r9, r1
	    for (cp2 = b; cp2 < cp; cp2++)
	      uart_putchar(*cp2, stream);
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
 7b2:	8b e1       	ldi	r24, 0x1B	; 27
 7b4:	88 16       	cp	r8, r24
 7b6:	81 e0       	ldi	r24, 0x01	; 1
 7b8:	98 06       	cpc	r9, r24
 7ba:	61 f7       	brne	.-40     	; 0x794 <uart_getchar+0x178>
 7bc:	f3 01       	movw	r30, r6
 7be:	31 96       	adiw	r30, 0x01	; 1
 7c0:	4f 01       	movw	r8, r30
 7c2:	56 cf       	rjmp	.-340    	; 0x670 <uart_getchar+0x54>
 7c4:	74 01       	movw	r14, r8
 7c6:	f1 e0       	ldi	r31, 0x01	; 1
 7c8:	ef 1a       	sub	r14, r31
 7ca:	f1 08       	sbc	r15, r1
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
	      {
		uart_putchar('\b', stream);
 7cc:	b8 01       	movw	r22, r16
 7ce:	88 e0       	ldi	r24, 0x08	; 8
 7d0:	0e 94 ed 02 	call	0x5da	; 0x5da <uart_putchar>
		uart_putchar(' ', stream);
 7d4:	b8 01       	movw	r22, r16
 7d6:	80 e2       	ldi	r24, 0x20	; 32
 7d8:	0e 94 ed 02 	call	0x5da	; 0x5da <uart_putchar>
		uart_putchar('\b', stream);
 7dc:	b8 01       	movw	r22, r16
 7de:	88 e0       	ldi	r24, 0x08	; 8
 7e0:	0e 94 ed 02 	call	0x5da	; 0x5da <uart_putchar>
		cp--;
 7e4:	47 01       	movw	r8, r14
		cp--;
	      }
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
 7e6:	ea 14       	cp	r14, r10
 7e8:	fb 04       	cpc	r15, r11
 7ea:	09 f4       	brne	.+2      	; 0x7ee <uart_getchar+0x1d2>
 7ec:	41 cf       	rjmp	.-382    	; 0x670 <uart_getchar+0x54>
 7ee:	f7 01       	movw	r30, r14
 7f0:	82 91       	ld	r24, -Z
 7f2:	7f 01       	movw	r14, r30
 7f4:	80 32       	cpi	r24, 0x20	; 32
 7f6:	51 f7       	brne	.-44     	; 0x7cc <uart_getchar+0x1b0>
 7f8:	3b cf       	rjmp	.-394    	; 0x670 <uart_getchar+0x54>
	      }
	    break;
	  }
      }

  c = *rxp++;
 7fa:	e0 91 6b 01 	lds	r30, 0x016B	; 0x80016b <rxp.1827>
 7fe:	f0 91 6c 01 	lds	r31, 0x016C	; 0x80016c <rxp.1827+0x1>
 802:	cf 01       	movw	r24, r30
 804:	01 96       	adiw	r24, 0x01	; 1
 806:	90 93 6c 01 	sts	0x016C, r25	; 0x80016c <rxp.1827+0x1>
 80a:	80 93 6b 01 	sts	0x016B, r24	; 0x80016b <rxp.1827>
 80e:	80 81       	ld	r24, Z
  if (c == '\n')
 810:	8a 30       	cpi	r24, 0x0A	; 10
 812:	21 f4       	brne	.+8      	; 0x81c <uart_getchar+0x200>
    rxp = 0;
 814:	10 92 6c 01 	sts	0x016C, r1	; 0x80016c <rxp.1827+0x1>
 818:	10 92 6b 01 	sts	0x016B, r1	; 0x80016b <rxp.1827>

  return c;
 81c:	90 e0       	ldi	r25, 0x00	; 0
 81e:	08 c0       	rjmp	.+16     	; 0x830 <uart_getchar+0x214>
  if (rxp == 0)
    for (cp = b;;)
      {
	loop_until_bit_is_set(UCSR0A, RXC0);
	if (UCSR0A & _BV(FE0))
	  return _FDEV_EOF;
 820:	8e ef       	ldi	r24, 0xFE	; 254
 822:	9f ef       	ldi	r25, 0xFF	; 255
 824:	05 c0       	rjmp	.+10     	; 0x830 <uart_getchar+0x214>
	if (UCSR0A & _BV(DOR0))
	  return _FDEV_ERR;
 826:	8f ef       	ldi	r24, 0xFF	; 255
 828:	9f ef       	ldi	r25, 0xFF	; 255
 82a:	02 c0       	rjmp	.+4      	; 0x830 <uart_getchar+0x214>
	  }

	switch (c)
	  {
	  case 'c' & 0x1f:
	    return -1;
 82c:	8f ef       	ldi	r24, 0xFF	; 255
 82e:	9f ef       	ldi	r25, 0xFF	; 255
  c = *rxp++;
  if (c == '\n')
    rxp = 0;

  return c;
}
 830:	df 91       	pop	r29
 832:	cf 91       	pop	r28
 834:	1f 91       	pop	r17
 836:	0f 91       	pop	r16
 838:	ff 90       	pop	r15
 83a:	ef 90       	pop	r14
 83c:	df 90       	pop	r13
 83e:	cf 90       	pop	r12
 840:	bf 90       	pop	r11
 842:	af 90       	pop	r10
 844:	9f 90       	pop	r9
 846:	8f 90       	pop	r8
 848:	7f 90       	pop	r7
 84a:	6f 90       	pop	r6
 84c:	08 95       	ret

0000084e <__cmpsf2>:
 84e:	0e 94 69 04 	call	0x8d2	; 0x8d2 <__fp_cmp>
 852:	08 f4       	brcc	.+2      	; 0x856 <__cmpsf2+0x8>
 854:	81 e0       	ldi	r24, 0x01	; 1
 856:	08 95       	ret

00000858 <__floatunsisf>:
 858:	e8 94       	clt
 85a:	09 c0       	rjmp	.+18     	; 0x86e <__floatsisf+0x12>

0000085c <__floatsisf>:
 85c:	97 fb       	bst	r25, 7
 85e:	3e f4       	brtc	.+14     	; 0x86e <__floatsisf+0x12>
 860:	90 95       	com	r25
 862:	80 95       	com	r24
 864:	70 95       	com	r23
 866:	61 95       	neg	r22
 868:	7f 4f       	sbci	r23, 0xFF	; 255
 86a:	8f 4f       	sbci	r24, 0xFF	; 255
 86c:	9f 4f       	sbci	r25, 0xFF	; 255
 86e:	99 23       	and	r25, r25
 870:	a9 f0       	breq	.+42     	; 0x89c <__floatsisf+0x40>
 872:	f9 2f       	mov	r31, r25
 874:	96 e9       	ldi	r25, 0x96	; 150
 876:	bb 27       	eor	r27, r27
 878:	93 95       	inc	r25
 87a:	f6 95       	lsr	r31
 87c:	87 95       	ror	r24
 87e:	77 95       	ror	r23
 880:	67 95       	ror	r22
 882:	b7 95       	ror	r27
 884:	f1 11       	cpse	r31, r1
 886:	f8 cf       	rjmp	.-16     	; 0x878 <__floatsisf+0x1c>
 888:	fa f4       	brpl	.+62     	; 0x8c8 <__floatsisf+0x6c>
 88a:	bb 0f       	add	r27, r27
 88c:	11 f4       	brne	.+4      	; 0x892 <__floatsisf+0x36>
 88e:	60 ff       	sbrs	r22, 0
 890:	1b c0       	rjmp	.+54     	; 0x8c8 <__floatsisf+0x6c>
 892:	6f 5f       	subi	r22, 0xFF	; 255
 894:	7f 4f       	sbci	r23, 0xFF	; 255
 896:	8f 4f       	sbci	r24, 0xFF	; 255
 898:	9f 4f       	sbci	r25, 0xFF	; 255
 89a:	16 c0       	rjmp	.+44     	; 0x8c8 <__floatsisf+0x6c>
 89c:	88 23       	and	r24, r24
 89e:	11 f0       	breq	.+4      	; 0x8a4 <__floatsisf+0x48>
 8a0:	96 e9       	ldi	r25, 0x96	; 150
 8a2:	11 c0       	rjmp	.+34     	; 0x8c6 <__floatsisf+0x6a>
 8a4:	77 23       	and	r23, r23
 8a6:	21 f0       	breq	.+8      	; 0x8b0 <__floatsisf+0x54>
 8a8:	9e e8       	ldi	r25, 0x8E	; 142
 8aa:	87 2f       	mov	r24, r23
 8ac:	76 2f       	mov	r23, r22
 8ae:	05 c0       	rjmp	.+10     	; 0x8ba <__floatsisf+0x5e>
 8b0:	66 23       	and	r22, r22
 8b2:	71 f0       	breq	.+28     	; 0x8d0 <__floatsisf+0x74>
 8b4:	96 e8       	ldi	r25, 0x86	; 134
 8b6:	86 2f       	mov	r24, r22
 8b8:	70 e0       	ldi	r23, 0x00	; 0
 8ba:	60 e0       	ldi	r22, 0x00	; 0
 8bc:	2a f0       	brmi	.+10     	; 0x8c8 <__floatsisf+0x6c>
 8be:	9a 95       	dec	r25
 8c0:	66 0f       	add	r22, r22
 8c2:	77 1f       	adc	r23, r23
 8c4:	88 1f       	adc	r24, r24
 8c6:	da f7       	brpl	.-10     	; 0x8be <__floatsisf+0x62>
 8c8:	88 0f       	add	r24, r24
 8ca:	96 95       	lsr	r25
 8cc:	87 95       	ror	r24
 8ce:	97 f9       	bld	r25, 7
 8d0:	08 95       	ret

000008d2 <__fp_cmp>:
 8d2:	99 0f       	add	r25, r25
 8d4:	00 08       	sbc	r0, r0
 8d6:	55 0f       	add	r21, r21
 8d8:	aa 0b       	sbc	r26, r26
 8da:	e0 e8       	ldi	r30, 0x80	; 128
 8dc:	fe ef       	ldi	r31, 0xFE	; 254
 8de:	16 16       	cp	r1, r22
 8e0:	17 06       	cpc	r1, r23
 8e2:	e8 07       	cpc	r30, r24
 8e4:	f9 07       	cpc	r31, r25
 8e6:	c0 f0       	brcs	.+48     	; 0x918 <__stack+0x19>
 8e8:	12 16       	cp	r1, r18
 8ea:	13 06       	cpc	r1, r19
 8ec:	e4 07       	cpc	r30, r20
 8ee:	f5 07       	cpc	r31, r21
 8f0:	98 f0       	brcs	.+38     	; 0x918 <__stack+0x19>
 8f2:	62 1b       	sub	r22, r18
 8f4:	73 0b       	sbc	r23, r19
 8f6:	84 0b       	sbc	r24, r20
 8f8:	95 0b       	sbc	r25, r21
 8fa:	39 f4       	brne	.+14     	; 0x90a <__stack+0xb>
 8fc:	0a 26       	eor	r0, r26
 8fe:	61 f0       	breq	.+24     	; 0x918 <__stack+0x19>
 900:	23 2b       	or	r18, r19
 902:	24 2b       	or	r18, r20
 904:	25 2b       	or	r18, r21
 906:	21 f4       	brne	.+8      	; 0x910 <__stack+0x11>
 908:	08 95       	ret
 90a:	0a 26       	eor	r0, r26
 90c:	09 f4       	brne	.+2      	; 0x910 <__stack+0x11>
 90e:	a1 40       	sbci	r26, 0x01	; 1
 910:	a6 95       	lsr	r26
 912:	8f ef       	ldi	r24, 0xFF	; 255
 914:	81 1d       	adc	r24, r1
 916:	81 1d       	adc	r24, r1
 918:	08 95       	ret

0000091a <__gesf2>:
 91a:	0e 94 69 04 	call	0x8d2	; 0x8d2 <__fp_cmp>
 91e:	08 f4       	brcc	.+2      	; 0x922 <__gesf2+0x8>
 920:	8f ef       	ldi	r24, 0xFF	; 255
 922:	08 95       	ret

00000924 <fwrite>:
 924:	a0 e0       	ldi	r26, 0x00	; 0
 926:	b0 e0       	ldi	r27, 0x00	; 0
 928:	e8 e9       	ldi	r30, 0x98	; 152
 92a:	f4 e0       	ldi	r31, 0x04	; 4
 92c:	0c 94 cc 04 	jmp	0x998	; 0x998 <__prologue_saves__+0xc>
 930:	5b 01       	movw	r10, r22
 932:	4a 01       	movw	r8, r20
 934:	79 01       	movw	r14, r18
 936:	d9 01       	movw	r26, r18
 938:	13 96       	adiw	r26, 0x03	; 3
 93a:	2c 91       	ld	r18, X
 93c:	21 ff       	sbrs	r18, 1
 93e:	1d c0       	rjmp	.+58     	; 0x97a <fwrite+0x56>
 940:	c0 e0       	ldi	r28, 0x00	; 0
 942:	d0 e0       	ldi	r29, 0x00	; 0
 944:	c8 15       	cp	r28, r8
 946:	d9 05       	cpc	r29, r9
 948:	d9 f0       	breq	.+54     	; 0x980 <fwrite+0x5c>
 94a:	8c 01       	movw	r16, r24
 94c:	6c 01       	movw	r12, r24
 94e:	ca 0c       	add	r12, r10
 950:	db 1c       	adc	r13, r11
 952:	c8 01       	movw	r24, r16
 954:	0c 15       	cp	r16, r12
 956:	1d 05       	cpc	r17, r13
 958:	71 f0       	breq	.+28     	; 0x976 <fwrite+0x52>
 95a:	0f 5f       	subi	r16, 0xFF	; 255
 95c:	1f 4f       	sbci	r17, 0xFF	; 255
 95e:	d7 01       	movw	r26, r14
 960:	18 96       	adiw	r26, 0x08	; 8
 962:	ed 91       	ld	r30, X+
 964:	fc 91       	ld	r31, X
 966:	19 97       	sbiw	r26, 0x09	; 9
 968:	b7 01       	movw	r22, r14
 96a:	dc 01       	movw	r26, r24
 96c:	8c 91       	ld	r24, X
 96e:	09 95       	icall
 970:	89 2b       	or	r24, r25
 972:	79 f3       	breq	.-34     	; 0x952 <fwrite+0x2e>
 974:	05 c0       	rjmp	.+10     	; 0x980 <fwrite+0x5c>
 976:	21 96       	adiw	r28, 0x01	; 1
 978:	e5 cf       	rjmp	.-54     	; 0x944 <fwrite+0x20>
 97a:	80 e0       	ldi	r24, 0x00	; 0
 97c:	90 e0       	ldi	r25, 0x00	; 0
 97e:	01 c0       	rjmp	.+2      	; 0x982 <fwrite+0x5e>
 980:	ce 01       	movw	r24, r28
 982:	cd b7       	in	r28, 0x3d	; 61
 984:	de b7       	in	r29, 0x3e	; 62
 986:	ec e0       	ldi	r30, 0x0C	; 12
 988:	0c 94 e8 04 	jmp	0x9d0	; 0x9d0 <__epilogue_restores__+0xc>

0000098c <__prologue_saves__>:
 98c:	2f 92       	push	r2
 98e:	3f 92       	push	r3
 990:	4f 92       	push	r4
 992:	5f 92       	push	r5
 994:	6f 92       	push	r6
 996:	7f 92       	push	r7
 998:	8f 92       	push	r8
 99a:	9f 92       	push	r9
 99c:	af 92       	push	r10
 99e:	bf 92       	push	r11
 9a0:	cf 92       	push	r12
 9a2:	df 92       	push	r13
 9a4:	ef 92       	push	r14
 9a6:	ff 92       	push	r15
 9a8:	0f 93       	push	r16
 9aa:	1f 93       	push	r17
 9ac:	cf 93       	push	r28
 9ae:	df 93       	push	r29
 9b0:	cd b7       	in	r28, 0x3d	; 61
 9b2:	de b7       	in	r29, 0x3e	; 62
 9b4:	ca 1b       	sub	r28, r26
 9b6:	db 0b       	sbc	r29, r27
 9b8:	0f b6       	in	r0, 0x3f	; 63
 9ba:	f8 94       	cli
 9bc:	de bf       	out	0x3e, r29	; 62
 9be:	0f be       	out	0x3f, r0	; 63
 9c0:	cd bf       	out	0x3d, r28	; 61
 9c2:	09 94       	ijmp

000009c4 <__epilogue_restores__>:
 9c4:	2a 88       	ldd	r2, Y+18	; 0x12
 9c6:	39 88       	ldd	r3, Y+17	; 0x11
 9c8:	48 88       	ldd	r4, Y+16	; 0x10
 9ca:	5f 84       	ldd	r5, Y+15	; 0x0f
 9cc:	6e 84       	ldd	r6, Y+14	; 0x0e
 9ce:	7d 84       	ldd	r7, Y+13	; 0x0d
 9d0:	8c 84       	ldd	r8, Y+12	; 0x0c
 9d2:	9b 84       	ldd	r9, Y+11	; 0x0b
 9d4:	aa 84       	ldd	r10, Y+10	; 0x0a
 9d6:	b9 84       	ldd	r11, Y+9	; 0x09
 9d8:	c8 84       	ldd	r12, Y+8	; 0x08
 9da:	df 80       	ldd	r13, Y+7	; 0x07
 9dc:	ee 80       	ldd	r14, Y+6	; 0x06
 9de:	fd 80       	ldd	r15, Y+5	; 0x05
 9e0:	0c 81       	ldd	r16, Y+4	; 0x04
 9e2:	1b 81       	ldd	r17, Y+3	; 0x03
 9e4:	aa 81       	ldd	r26, Y+2	; 0x02
 9e6:	b9 81       	ldd	r27, Y+1	; 0x01
 9e8:	ce 0f       	add	r28, r30
 9ea:	d1 1d       	adc	r29, r1
 9ec:	0f b6       	in	r0, 0x3f	; 63
 9ee:	f8 94       	cli
 9f0:	de bf       	out	0x3e, r29	; 62
 9f2:	0f be       	out	0x3f, r0	; 63
 9f4:	cd bf       	out	0x3d, r28	; 61
 9f6:	ed 01       	movw	r28, r26
 9f8:	08 95       	ret

000009fa <_exit>:
 9fa:	f8 94       	cli

000009fc <__stop_program>:
 9fc:	ff cf       	rjmp	.-2      	; 0x9fc <__stop_program>
