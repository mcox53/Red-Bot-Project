
Red Bot Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000038  00800100  00000bf8  00000c8c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000bf8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000098  00800138  00800138  00000cc4  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000cc4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000d20  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d8  00000000  00000000  00000d60  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f62  00000000  00000000  00000e38  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000942  00000000  00000000  00001d9a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000816  00000000  00000000  000026dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000254  00000000  00000000  00002ef4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000602  00000000  00000000  00003148  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000510  00000000  00000000  0000374a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b8  00000000  00000000  00003c5a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 88 00 	jmp	0x110	; 0x110 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 9e 00 	jmp	0x13c	; 0x13c <__vector_14>
  3c:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__vector_15>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 ef       	ldi	r30, 0xF8	; 248
  7c:	fb e0       	ldi	r31, 0x0B	; 11
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 33       	cpi	r26, 0x38	; 56
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a8 e3       	ldi	r26, 0x38	; 56
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a0 3d       	cpi	r26, 0xD0	; 208
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 4b 01 	call	0x296	; 0x296 <main>
  9e:	0c 94 fa 05 	jmp	0xbf4	; 0xbf4 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <initialize_all>:

void LEFT_MOTOR_BRAKE(void){
	PORTD |= (1 << MOTOR_LEFT_CONTROL1);			// Set IN1 to High according to motor driver datasheet
	PORTD |= (1 << MOTOR_LEFT_CONTROL2);			// Set IN2 to High according to motor driver datasheet
	pwm_timer_stop();
	PORTD |= (1 << PIND5);							// Set PWM output pin to be high. PWM out is a don't care state for short brake
  a6:	78 94       	sei
  a8:	8a b1       	in	r24, 0x0a	; 10
  aa:	84 63       	ori	r24, 0x34	; 52
  ac:	8a b9       	out	0x0a, r24	; 10
  ae:	84 b1       	in	r24, 0x04	; 4
  b0:	80 6c       	ori	r24, 0xC0	; 192
  b2:	84 b9       	out	0x04, r24	; 4
  b4:	20 9a       	sbi	0x04, 0	; 4
  b6:	0e 94 ab 01 	call	0x356	; 0x356 <uart_init>
  ba:	ea ec       	ldi	r30, 0xCA	; 202
  bc:	f1 e0       	ldi	r31, 0x01	; 1
  be:	80 e0       	ldi	r24, 0x00	; 0
  c0:	91 e0       	ldi	r25, 0x01	; 1
  c2:	95 83       	std	Z+5, r25	; 0x05
  c4:	84 83       	std	Z+4, r24	; 0x04
  c6:	93 83       	std	Z+3, r25	; 0x03
  c8:	82 83       	std	Z+2, r24	; 0x02
  ca:	91 83       	std	Z+1, r25	; 0x01
  cc:	80 83       	st	Z, r24
  ce:	ea e7       	ldi	r30, 0x7A	; 122
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	80 81       	ld	r24, Z
  d4:	87 60       	ori	r24, 0x07	; 7
  d6:	80 83       	st	Z, r24
  d8:	80 81       	ld	r24, Z
  da:	80 68       	ori	r24, 0x80	; 128
  dc:	80 83       	st	Z, r24
  de:	ec e7       	ldi	r30, 0x7C	; 124
  e0:	f0 e0       	ldi	r31, 0x00	; 0
  e2:	80 81       	ld	r24, Z
  e4:	80 64       	ori	r24, 0x40	; 64
  e6:	80 83       	st	Z, r24
  e8:	89 e6       	ldi	r24, 0x69	; 105
  ea:	98 e1       	ldi	r25, 0x18	; 24
  ec:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
  f0:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
  f4:	e1 e8       	ldi	r30, 0x81	; 129
  f6:	f0 e0       	ldi	r31, 0x00	; 0
  f8:	80 81       	ld	r24, Z
  fa:	83 60       	ori	r24, 0x03	; 3
  fc:	80 83       	st	Z, r24
  fe:	80 81       	ld	r24, Z
 100:	88 60       	ori	r24, 0x08	; 8
 102:	80 83       	st	Z, r24
 104:	ef e6       	ldi	r30, 0x6F	; 111
 106:	f0 e0       	ldi	r31, 0x00	; 0
 108:	80 81       	ld	r24, Z
 10a:	82 60       	ori	r24, 0x02	; 2
 10c:	80 83       	st	Z, r24
 10e:	08 95       	ret

00000110 <__vector_11>:
 110:	1f 92       	push	r1
 112:	0f 92       	push	r0
 114:	0f b6       	in	r0, 0x3f	; 63
 116:	0f 92       	push	r0
 118:	11 24       	eor	r1, r1
 11a:	8f 93       	push	r24
 11c:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <program_counter_one>
 120:	8f 5f       	subi	r24, 0xFF	; 255
 122:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <program_counter_one>
 126:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <__data_end>
 12a:	8f 5f       	subi	r24, 0xFF	; 255
 12c:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <__data_end>
 130:	8f 91       	pop	r24
 132:	0f 90       	pop	r0
 134:	0f be       	out	0x3f, r0	; 63
 136:	0f 90       	pop	r0
 138:	1f 90       	pop	r1
 13a:	18 95       	reti

0000013c <__vector_14>:
 13c:	1f 92       	push	r1
 13e:	0f 92       	push	r0
 140:	0f b6       	in	r0, 0x3f	; 63
 142:	0f 92       	push	r0
 144:	11 24       	eor	r1, r1
 146:	8f 93       	push	r24
 148:	80 91 c7 01 	lds	r24, 0x01C7	; 0x8001c7 <new_right_duty_cycle>
 14c:	87 bd       	out	0x27, r24	; 39
 14e:	8f 91       	pop	r24
 150:	0f 90       	pop	r0
 152:	0f be       	out	0x3f, r0	; 63
 154:	0f 90       	pop	r0
 156:	1f 90       	pop	r1
 158:	18 95       	reti

0000015a <__vector_15>:
 15a:	1f 92       	push	r1
 15c:	0f 92       	push	r0
 15e:	0f b6       	in	r0, 0x3f	; 63
 160:	0f 92       	push	r0
 162:	11 24       	eor	r1, r1
 164:	8f 93       	push	r24
 166:	80 91 8f 01 	lds	r24, 0x018F	; 0x80018f <new_left_duty_cycle>
 16a:	88 bd       	out	0x28, r24	; 40
 16c:	8f 91       	pop	r24
 16e:	0f 90       	pop	r0
 170:	0f be       	out	0x3f, r0	; 63
 172:	0f 90       	pop	r0
 174:	1f 90       	pop	r1
 176:	18 95       	reti

00000178 <start_ADC_and_wait>:
 178:	ea e7       	ldi	r30, 0x7A	; 122
 17a:	f0 e0       	ldi	r31, 0x00	; 0
 17c:	80 81       	ld	r24, Z
 17e:	80 64       	ori	r24, 0x40	; 64
 180:	80 83       	st	Z, r24
 182:	80 81       	ld	r24, Z
 184:	86 fd       	sbrc	r24, 6
 186:	fd cf       	rjmp	.-6      	; 0x182 <start_ADC_and_wait+0xa>
 188:	08 95       	ret

0000018a <pwm_timer_init>:
 18a:	84 b5       	in	r24, 0x24	; 36
 18c:	80 68       	ori	r24, 0x80	; 128
 18e:	84 bd       	out	0x24, r24	; 36
 190:	84 b5       	in	r24, 0x24	; 36
 192:	80 62       	ori	r24, 0x20	; 32
 194:	84 bd       	out	0x24, r24	; 36
 196:	84 b5       	in	r24, 0x24	; 36
 198:	83 60       	ori	r24, 0x03	; 3
 19a:	84 bd       	out	0x24, r24	; 36
 19c:	85 b5       	in	r24, 0x25	; 37
 19e:	84 60       	ori	r24, 0x04	; 4
 1a0:	85 bd       	out	0x25, r24	; 37
 1a2:	ee e6       	ldi	r30, 0x6E	; 110
 1a4:	f0 e0       	ldi	r31, 0x00	; 0
 1a6:	80 81       	ld	r24, Z
 1a8:	86 60       	ori	r24, 0x06	; 6
 1aa:	80 83       	st	Z, r24
 1ac:	08 95       	ret

000001ae <RIGHT_MOTOR_FWD>:
 1ae:	5f 9a       	sbi	0x0b, 7	; 11
 1b0:	28 98       	cbi	0x05, 0	; 5
 1b2:	08 95       	ret

000001b4 <LEFT_MOTOR_FWD>:
 1b4:	5a 9a       	sbi	0x0b, 2	; 11
 1b6:	5c 98       	cbi	0x0b, 4	; 11
 1b8:	08 95       	ret

000001ba <SET_PWM_OUTPUT>:
}

void SET_PWM_OUTPUT(uint8_t pwm_duty_cycle, uint8_t channel){
	switch (channel)
 1ba:	65 30       	cpi	r22, 0x05	; 5
 1bc:	19 f0       	breq	.+6      	; 0x1c4 <SET_PWM_OUTPUT+0xa>
 1be:	66 30       	cpi	r22, 0x06	; 6
 1c0:	29 f0       	breq	.+10     	; 0x1cc <SET_PWM_OUTPUT+0x12>
 1c2:	08 95       	ret
	{
		case MOTOR_LEFT_PWM:
		DDRD |= (1 << DDD5);			// Set PIND5 as Output
 1c4:	55 9a       	sbi	0x0a, 5	; 10
		new_left_duty_cycle = pwm_duty_cycle;			// Set Compare register for desired duty cycle
 1c6:	80 93 8f 01 	sts	0x018F, r24	; 0x80018f <new_left_duty_cycle>
		break;
 1ca:	08 95       	ret
		case MOTOR_RIGHT_PWM:
		DDRD |= (1 << DDD6);			// Set PIND6 as Output
 1cc:	56 9a       	sbi	0x0a, 6	; 10
		new_right_duty_cycle = pwm_duty_cycle;			// Set Compare registers for desired duty cycle
 1ce:	80 93 c7 01 	sts	0x01C7, r24	; 0x8001c7 <new_right_duty_cycle>
 1d2:	08 95       	ret

000001d4 <READ_LINE_SENSOR>:
		default:
		break;
	}
}

void READ_LINE_SENSOR(void){
 1d4:	ef 92       	push	r14
 1d6:	ff 92       	push	r15
 1d8:	0f 93       	push	r16
 1da:	1f 93       	push	r17
 1dc:	cf 93       	push	r28
 1de:	df 93       	push	r29
	
	ADMUX = LINE_LEFT_IN;
 1e0:	cc e7       	ldi	r28, 0x7C	; 124
 1e2:	d0 e0       	ldi	r29, 0x00	; 0
 1e4:	84 e0       	ldi	r24, 0x04	; 4
 1e6:	88 83       	st	Y, r24
	ADMUX |= (1 << REFS0);
 1e8:	88 81       	ld	r24, Y
 1ea:	80 64       	ori	r24, 0x40	; 64
 1ec:	88 83       	st	Y, r24
	
	start_ADC_and_wait();
 1ee:	0e 94 bc 00 	call	0x178	; 0x178 <start_ADC_and_wait>
	left_line = (ADCL);
 1f2:	0f 2e       	mov	r0, r31
 1f4:	f8 e7       	ldi	r31, 0x78	; 120
 1f6:	ef 2e       	mov	r14, r31
 1f8:	f1 2c       	mov	r15, r1
 1fa:	f0 2d       	mov	r31, r0
 1fc:	f7 01       	movw	r30, r14
 1fe:	80 81       	ld	r24, Z
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	90 93 c6 01 	sts	0x01C6, r25	; 0x8001c6 <left_line+0x1>
 206:	80 93 c5 01 	sts	0x01C5, r24	; 0x8001c5 <left_line>
	left_line |= (ADCH << 8);
 20a:	09 e7       	ldi	r16, 0x79	; 121
 20c:	10 e0       	ldi	r17, 0x00	; 0
 20e:	f8 01       	movw	r30, r16
 210:	20 81       	ld	r18, Z
 212:	80 91 c5 01 	lds	r24, 0x01C5	; 0x8001c5 <left_line>
 216:	90 91 c6 01 	lds	r25, 0x01C6	; 0x8001c6 <left_line+0x1>
 21a:	92 2b       	or	r25, r18
 21c:	90 93 c6 01 	sts	0x01C6, r25	; 0x8001c6 <left_line+0x1>
 220:	80 93 c5 01 	sts	0x01C5, r24	; 0x8001c5 <left_line>
	
	ADMUX = LINE_CENTER_IN;
 224:	86 e0       	ldi	r24, 0x06	; 6
 226:	88 83       	st	Y, r24
	ADMUX |= (1 << REFS0);
 228:	88 81       	ld	r24, Y
 22a:	80 64       	ori	r24, 0x40	; 64
 22c:	88 83       	st	Y, r24
	
	start_ADC_and_wait();
 22e:	0e 94 bc 00 	call	0x178	; 0x178 <start_ADC_and_wait>
	center_line = (ADCL);
 232:	f7 01       	movw	r30, r14
 234:	80 81       	ld	r24, Z
 236:	90 e0       	ldi	r25, 0x00	; 0
 238:	90 93 c9 01 	sts	0x01C9, r25	; 0x8001c9 <center_line+0x1>
 23c:	80 93 c8 01 	sts	0x01C8, r24	; 0x8001c8 <center_line>
	center_line |= (ADCH << 8);
 240:	f8 01       	movw	r30, r16
 242:	20 81       	ld	r18, Z
 244:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <center_line>
 248:	90 91 c9 01 	lds	r25, 0x01C9	; 0x8001c9 <center_line+0x1>
 24c:	92 2b       	or	r25, r18
 24e:	90 93 c9 01 	sts	0x01C9, r25	; 0x8001c9 <center_line+0x1>
 252:	80 93 c8 01 	sts	0x01C8, r24	; 0x8001c8 <center_line>

	ADMUX = LINE_RIGHT_IN;
 256:	81 e0       	ldi	r24, 0x01	; 1
 258:	88 83       	st	Y, r24
	ADMUX |= (1 << REFS0);
 25a:	88 81       	ld	r24, Y
 25c:	80 64       	ori	r24, 0x40	; 64
 25e:	88 83       	st	Y, r24
	
	start_ADC_and_wait();
 260:	0e 94 bc 00 	call	0x178	; 0x178 <start_ADC_and_wait>
	right_line = (ADCL);
 264:	f7 01       	movw	r30, r14
 266:	80 81       	ld	r24, Z
 268:	90 e0       	ldi	r25, 0x00	; 0
 26a:	90 93 8d 01 	sts	0x018D, r25	; 0x80018d <right_line+0x1>
 26e:	80 93 8c 01 	sts	0x018C, r24	; 0x80018c <right_line>
	right_line |= (ADCH << 8);
 272:	f8 01       	movw	r30, r16
 274:	20 81       	ld	r18, Z
 276:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <right_line>
 27a:	90 91 8d 01 	lds	r25, 0x018D	; 0x80018d <right_line+0x1>
 27e:	92 2b       	or	r25, r18
 280:	90 93 8d 01 	sts	0x018D, r25	; 0x80018d <right_line+0x1>
 284:	80 93 8c 01 	sts	0x018C, r24	; 0x80018c <right_line>
}
 288:	df 91       	pop	r29
 28a:	cf 91       	pop	r28
 28c:	1f 91       	pop	r17
 28e:	0f 91       	pop	r16
 290:	ff 90       	pop	r15
 292:	ef 90       	pop	r14
 294:	08 95       	ret

00000296 <main>:


int main(void)
{
    initialize_all();
 296:	0e 94 53 00 	call	0xa6	; 0xa6 <initialize_all>
	pwm_timer_init();
 29a:	0e 94 c5 00 	call	0x18a	; 0x18a <pwm_timer_init>
		SET_PWM_OUTPUT(duty_cycle, MOTOR_RIGHT_PWM);
		
		
		READ_LINE_SENSOR();
		
		fprintf(stdout, "Left: %d\n", left_line);
 29e:	0f 2e       	mov	r0, r31
 2a0:	ff e0       	ldi	r31, 0x0F	; 15
 2a2:	cf 2e       	mov	r12, r31
 2a4:	f1 e0       	ldi	r31, 0x01	; 1
 2a6:	df 2e       	mov	r13, r31
 2a8:	f0 2d       	mov	r31, r0
 2aa:	ca ec       	ldi	r28, 0xCA	; 202
 2ac:	d1 e0       	ldi	r29, 0x01	; 1
		fprintf(stdout, "Right: %d\n", right_line);
 2ae:	0f 2e       	mov	r0, r31
 2b0:	f9 e1       	ldi	r31, 0x19	; 25
 2b2:	ef 2e       	mov	r14, r31
 2b4:	f1 e0       	ldi	r31, 0x01	; 1
 2b6:	ff 2e       	mov	r15, r31
 2b8:	f0 2d       	mov	r31, r0
		fprintf(stdout, "Center: %d\n", center_line);
 2ba:	04 e2       	ldi	r16, 0x24	; 36
 2bc:	11 e0       	ldi	r17, 0x01	; 1
{
    initialize_all();
	pwm_timer_init();
    while(1){
		
		RIGHT_MOTOR_FWD();
 2be:	0e 94 d7 00 	call	0x1ae	; 0x1ae <RIGHT_MOTOR_FWD>
		LEFT_MOTOR_FWD();
 2c2:	0e 94 da 00 	call	0x1b4	; 0x1b4 <LEFT_MOTOR_FWD>
		SET_PWM_OUTPUT(duty_cycle, MOTOR_LEFT_PWM);
 2c6:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <duty_cycle>
 2ca:	65 e0       	ldi	r22, 0x05	; 5
 2cc:	0e 94 dd 00 	call	0x1ba	; 0x1ba <SET_PWM_OUTPUT>
		SET_PWM_OUTPUT(duty_cycle, MOTOR_RIGHT_PWM);
 2d0:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <duty_cycle>
 2d4:	66 e0       	ldi	r22, 0x06	; 6
 2d6:	0e 94 dd 00 	call	0x1ba	; 0x1ba <SET_PWM_OUTPUT>
		
		
		READ_LINE_SENSOR();
 2da:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <READ_LINE_SENSOR>
		
		fprintf(stdout, "Left: %d\n", left_line);
 2de:	80 91 c5 01 	lds	r24, 0x01C5	; 0x8001c5 <left_line>
 2e2:	90 91 c6 01 	lds	r25, 0x01C6	; 0x8001c6 <left_line+0x1>
 2e6:	9f 93       	push	r25
 2e8:	8f 93       	push	r24
 2ea:	df 92       	push	r13
 2ec:	cf 92       	push	r12
 2ee:	8b 81       	ldd	r24, Y+3	; 0x03
 2f0:	8f 93       	push	r24
 2f2:	8a 81       	ldd	r24, Y+2	; 0x02
 2f4:	8f 93       	push	r24
 2f6:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <fprintf>
		fprintf(stdout, "Right: %d\n", right_line);
 2fa:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <right_line>
 2fe:	90 91 8d 01 	lds	r25, 0x018D	; 0x80018d <right_line+0x1>
 302:	9f 93       	push	r25
 304:	8f 93       	push	r24
 306:	ff 92       	push	r15
 308:	ef 92       	push	r14
 30a:	8b 81       	ldd	r24, Y+3	; 0x03
 30c:	8f 93       	push	r24
 30e:	8a 81       	ldd	r24, Y+2	; 0x02
 310:	8f 93       	push	r24
 312:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <fprintf>
		fprintf(stdout, "Center: %d\n", center_line);
 316:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <center_line>
 31a:	90 91 c9 01 	lds	r25, 0x01C9	; 0x8001c9 <center_line+0x1>
 31e:	9f 93       	push	r25
 320:	8f 93       	push	r24
 322:	1f 93       	push	r17
 324:	0f 93       	push	r16
 326:	8b 81       	ldd	r24, Y+3	; 0x03
 328:	8f 93       	push	r24
 32a:	8a 81       	ldd	r24, Y+2	; 0x02
 32c:	8f 93       	push	r24
 32e:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <fprintf>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 332:	2f ef       	ldi	r18, 0xFF	; 255
 334:	81 ee       	ldi	r24, 0xE1	; 225
 336:	94 e0       	ldi	r25, 0x04	; 4
 338:	21 50       	subi	r18, 0x01	; 1
 33a:	80 40       	sbci	r24, 0x00	; 0
 33c:	90 40       	sbci	r25, 0x00	; 0
 33e:	e1 f7       	brne	.-8      	; 0x338 <main+0xa2>
 340:	00 c0       	rjmp	.+0      	; 0x342 <main+0xac>
 342:	00 00       	nop
 344:	8d b7       	in	r24, 0x3d	; 61
 346:	9e b7       	in	r25, 0x3e	; 62
 348:	42 96       	adiw	r24, 0x12	; 18
 34a:	0f b6       	in	r0, 0x3f	; 63
 34c:	f8 94       	cli
 34e:	9e bf       	out	0x3e, r25	; 62
 350:	0f be       	out	0x3f, r0	; 63
 352:	8d bf       	out	0x3d, r24	; 61
 354:	b4 cf       	rjmp	.-152    	; 0x2be <main+0x28>

00000356 <uart_init>:
{
#if F_CPU < 2000000UL && defined(U2X)
  UCSR0A = _BV(U2X);             /* improve baud rate error by using 2x clk */
  UBRR0L = (F_CPU / (8UL * UART_BAUD)) - 1;
#else
  UBRR0L = (F_CPU / (16UL * UART_BAUD)) - 1;
 356:	87 e6       	ldi	r24, 0x67	; 103
 358:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
#endif
  UCSR0B = _BV(TXEN0) | _BV(RXEN0); /* tx/rx enable */
 35c:	88 e1       	ldi	r24, 0x18	; 24
 35e:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 362:	08 95       	ret

00000364 <uart_putchar>:
 * Send character c down the UART Tx, wait until tx holding register
 * is empty.
 */
int
uart_putchar(char c, FILE *stream)
{
 364:	cf 93       	push	r28
 366:	c8 2f       	mov	r28, r24

  if (c == '\a')
 368:	87 30       	cpi	r24, 0x07	; 7
 36a:	69 f4       	brne	.+26     	; 0x386 <uart_putchar+0x22>
    {
      fputs("*ring*\n", stderr);
 36c:	20 91 ce 01 	lds	r18, 0x01CE	; 0x8001ce <__iob+0x4>
 370:	30 91 cf 01 	lds	r19, 0x01CF	; 0x8001cf <__iob+0x5>
 374:	47 e0       	ldi	r20, 0x07	; 7
 376:	50 e0       	ldi	r21, 0x00	; 0
 378:	61 e0       	ldi	r22, 0x01	; 1
 37a:	70 e0       	ldi	r23, 0x00	; 0
 37c:	80 e3       	ldi	r24, 0x30	; 48
 37e:	91 e0       	ldi	r25, 0x01	; 1
 380:	0e 94 fe 02 	call	0x5fc	; 0x5fc <fwrite>
      return 0;
 384:	0c c0       	rjmp	.+24     	; 0x39e <uart_putchar+0x3a>
    }

  if (c == '\n')
 386:	8a 30       	cpi	r24, 0x0A	; 10
 388:	19 f4       	brne	.+6      	; 0x390 <uart_putchar+0x2c>
    uart_putchar('\r', stream);
 38a:	8d e0       	ldi	r24, 0x0D	; 13
 38c:	0e 94 b2 01 	call	0x364	; 0x364 <uart_putchar>
  loop_until_bit_is_set(UCSR0A, UDRE0);
 390:	e0 ec       	ldi	r30, 0xC0	; 192
 392:	f0 e0       	ldi	r31, 0x00	; 0
 394:	80 81       	ld	r24, Z
 396:	85 ff       	sbrs	r24, 5
 398:	fd cf       	rjmp	.-6      	; 0x394 <uart_putchar+0x30>
  UDR0 = c;
 39a:	c0 93 c6 00 	sts	0x00C6, r28	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>

  return 0;
}
 39e:	80 e0       	ldi	r24, 0x00	; 0
 3a0:	90 e0       	ldi	r25, 0x00	; 0
 3a2:	cf 91       	pop	r28
 3a4:	08 95       	ret

000003a6 <uart_getchar>:
 * Successive calls to uart_getchar() will be satisfied from the
 * internal buffer until that buffer is emptied again.
 */
int
uart_getchar(FILE *stream)
{
 3a6:	6f 92       	push	r6
 3a8:	7f 92       	push	r7
 3aa:	8f 92       	push	r8
 3ac:	9f 92       	push	r9
 3ae:	af 92       	push	r10
 3b0:	bf 92       	push	r11
 3b2:	cf 92       	push	r12
 3b4:	df 92       	push	r13
 3b6:	ef 92       	push	r14
 3b8:	ff 92       	push	r15
 3ba:	0f 93       	push	r16
 3bc:	1f 93       	push	r17
 3be:	cf 93       	push	r28
 3c0:	df 93       	push	r29
  uint8_t c;
  char *cp, *cp2;
  static char b[RX_BUFSIZE];
  static char *rxp;

  if (rxp == 0)
 3c2:	20 91 8a 01 	lds	r18, 0x018A	; 0x80018a <rxp.1827>
 3c6:	30 91 8b 01 	lds	r19, 0x018B	; 0x80018b <rxp.1827+0x1>
 3ca:	23 2b       	or	r18, r19
 3cc:	09 f0       	breq	.+2      	; 0x3d0 <uart_getchar+0x2a>
 3ce:	da c0       	rjmp	.+436    	; 0x584 <__LOCK_REGION_LENGTH__+0x184>
 3d0:	8c 01       	movw	r16, r24
 3d2:	0f 2e       	mov	r0, r31
 3d4:	fa e3       	ldi	r31, 0x3A	; 58
 3d6:	8f 2e       	mov	r8, r31
 3d8:	f1 e0       	ldi	r31, 0x01	; 1
 3da:	9f 2e       	mov	r9, r31
 3dc:	f0 2d       	mov	r31, r0
    for (cp = b;;)
      {
	loop_until_bit_is_set(UCSR0A, RXC0);
 3de:	c0 ec       	ldi	r28, 0xC0	; 192
 3e0:	d0 e0       	ldi	r29, 0x00	; 0
	if (UCSR0A & _BV(FE0))
	  return _FDEV_EOF;
	if (UCSR0A & _BV(DOR0))
	  return _FDEV_ERR;
	c = UDR0;
 3e2:	0f 2e       	mov	r0, r31
 3e4:	f6 ec       	ldi	r31, 0xC6	; 198
 3e6:	cf 2e       	mov	r12, r31
 3e8:	d1 2c       	mov	r13, r1
 3ea:	f0 2d       	mov	r31, r0
 3ec:	54 01       	movw	r10, r8
 3ee:	0f 2e       	mov	r0, r31
 3f0:	f9 e3       	ldi	r31, 0x39	; 57
 3f2:	6f 2e       	mov	r6, r31
 3f4:	f1 e0       	ldi	r31, 0x01	; 1
 3f6:	7f 2e       	mov	r7, r31
 3f8:	f0 2d       	mov	r31, r0
  static char *rxp;

  if (rxp == 0)
    for (cp = b;;)
      {
	loop_until_bit_is_set(UCSR0A, RXC0);
 3fa:	88 81       	ld	r24, Y
 3fc:	88 23       	and	r24, r24
 3fe:	ec f7       	brge	.-6      	; 0x3fa <uart_getchar+0x54>
	if (UCSR0A & _BV(FE0))
 400:	88 81       	ld	r24, Y
 402:	84 fd       	sbrc	r24, 4
 404:	d2 c0       	rjmp	.+420    	; 0x5aa <__LOCK_REGION_LENGTH__+0x1aa>
	  return _FDEV_EOF;
	if (UCSR0A & _BV(DOR0))
 406:	88 81       	ld	r24, Y
 408:	83 fd       	sbrc	r24, 3
 40a:	d2 c0       	rjmp	.+420    	; 0x5b0 <__LOCK_REGION_LENGTH__+0x1b0>
	  return _FDEV_ERR;
	c = UDR0;
 40c:	f6 01       	movw	r30, r12
 40e:	80 81       	ld	r24, Z
	/* behaviour similar to Unix stty ICRNL */
	if (c == '\r')
 410:	8d 30       	cpi	r24, 0x0D	; 13
 412:	11 f0       	breq	.+4      	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
	  c = '\n';
	if (c == '\n')
 414:	8a 30       	cpi	r24, 0x0A	; 10
 416:	69 f4       	brne	.+26     	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
	  {
	    *cp = c;
 418:	8a e0       	ldi	r24, 0x0A	; 10
 41a:	f4 01       	movw	r30, r8
 41c:	80 83       	st	Z, r24
	    uart_putchar(c, stream);
 41e:	b8 01       	movw	r22, r16
 420:	0e 94 b2 01 	call	0x364	; 0x364 <uart_putchar>
	    rxp = b;
 424:	8a e3       	ldi	r24, 0x3A	; 58
 426:	91 e0       	ldi	r25, 0x01	; 1
 428:	90 93 8b 01 	sts	0x018B, r25	; 0x80018b <rxp.1827+0x1>
 42c:	80 93 8a 01 	sts	0x018A, r24	; 0x80018a <rxp.1827>
	    break;
 430:	a9 c0       	rjmp	.+338    	; 0x584 <__LOCK_REGION_LENGTH__+0x184>
	  }
	else if (c == '\t')
 432:	89 30       	cpi	r24, 0x09	; 9
 434:	39 f0       	breq	.+14     	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
	  c = ' ';

	if ((c >= (uint8_t)' ' && c <= (uint8_t)'\x7e') ||
 436:	90 ee       	ldi	r25, 0xE0	; 224
 438:	98 0f       	add	r25, r24
 43a:	9f 35       	cpi	r25, 0x5F	; 95
 43c:	20 f0       	brcs	.+8      	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
 43e:	80 3a       	cpi	r24, 0xA0	; 160
 440:	b8 f0       	brcs	.+46     	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
 442:	01 c0       	rjmp	.+2      	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
	    uart_putchar(c, stream);
	    rxp = b;
	    break;
	  }
	else if (c == '\t')
	  c = ' ';
 444:	80 e2       	ldi	r24, 0x20	; 32

	if ((c >= (uint8_t)' ' && c <= (uint8_t)'\x7e') ||
	    c >= (uint8_t)'\xa0')
	  {
	    if (cp == b + RX_BUFSIZE - 1)
 446:	f9 e8       	ldi	r31, 0x89	; 137
 448:	8f 16       	cp	r8, r31
 44a:	f1 e0       	ldi	r31, 0x01	; 1
 44c:	9f 06       	cpc	r9, r31
 44e:	29 f4       	brne	.+10     	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
	      uart_putchar('\a', stream);
 450:	b8 01       	movw	r22, r16
 452:	87 e0       	ldi	r24, 0x07	; 7
 454:	0e 94 b2 01 	call	0x364	; 0x364 <uart_putchar>
 458:	d0 cf       	rjmp	.-96     	; 0x3fa <uart_getchar+0x54>
	    else
	      {
		*cp++ = c;
 45a:	74 01       	movw	r14, r8
 45c:	9f ef       	ldi	r25, 0xFF	; 255
 45e:	e9 1a       	sub	r14, r25
 460:	f9 0a       	sbc	r15, r25
 462:	f4 01       	movw	r30, r8
 464:	80 83       	st	Z, r24
		uart_putchar(c, stream);
 466:	b8 01       	movw	r22, r16
 468:	0e 94 b2 01 	call	0x364	; 0x364 <uart_putchar>
	  {
	    if (cp == b + RX_BUFSIZE - 1)
	      uart_putchar('\a', stream);
	    else
	      {
		*cp++ = c;
 46c:	47 01       	movw	r8, r14
 46e:	c5 cf       	rjmp	.-118    	; 0x3fa <uart_getchar+0x54>
		uart_putchar(c, stream);
	      }
	    continue;
	  }

	switch (c)
 470:	82 31       	cpi	r24, 0x12	; 18
 472:	d1 f1       	breq	.+116    	; 0x4e8 <__LOCK_REGION_LENGTH__+0xe8>
 474:	30 f4       	brcc	.+12     	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
 476:	83 30       	cpi	r24, 0x03	; 3
 478:	09 f4       	brne	.+2      	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
 47a:	9d c0       	rjmp	.+314    	; 0x5b6 <__LOCK_REGION_LENGTH__+0x1b6>
 47c:	88 30       	cpi	r24, 0x08	; 8
 47e:	e9 f0       	breq	.+58     	; 0x4ba <__LOCK_REGION_LENGTH__+0xba>
 480:	bc cf       	rjmp	.-136    	; 0x3fa <uart_getchar+0x54>
 482:	87 31       	cpi	r24, 0x17	; 23
 484:	29 f0       	breq	.+10     	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
 486:	8f 37       	cpi	r24, 0x7F	; 127
 488:	c1 f0       	breq	.+48     	; 0x4ba <__LOCK_REGION_LENGTH__+0xba>
 48a:	85 31       	cpi	r24, 0x15	; 21
 48c:	79 f0       	breq	.+30     	; 0x4ac <__LOCK_REGION_LENGTH__+0xac>
 48e:	b5 cf       	rjmp	.-150    	; 0x3fa <uart_getchar+0x54>
		cp--;
	      }
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
 490:	fa e3       	ldi	r31, 0x3A	; 58
 492:	8f 16       	cp	r8, r31
 494:	f1 e0       	ldi	r31, 0x01	; 1
 496:	9f 06       	cpc	r9, r31
 498:	09 f0       	breq	.+2      	; 0x49c <__LOCK_REGION_LENGTH__+0x9c>
 49a:	08 f4       	brcc	.+2      	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
 49c:	ae cf       	rjmp	.-164    	; 0x3fa <uart_getchar+0x54>
 49e:	f4 01       	movw	r30, r8
 4a0:	31 97       	sbiw	r30, 0x01	; 1
 4a2:	80 81       	ld	r24, Z
 4a4:	80 32       	cpi	r24, 0x20	; 32
 4a6:	09 f0       	breq	.+2      	; 0x4aa <__LOCK_REGION_LENGTH__+0xaa>
 4a8:	52 c0       	rjmp	.+164    	; 0x54e <__LOCK_REGION_LENGTH__+0x14e>
 4aa:	a7 cf       	rjmp	.-178    	; 0x3fa <uart_getchar+0x54>
	    for (cp2 = b; cp2 < cp; cp2++)
	      uart_putchar(*cp2, stream);
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
 4ac:	8a e3       	ldi	r24, 0x3A	; 58
 4ae:	88 16       	cp	r8, r24
 4b0:	81 e0       	ldi	r24, 0x01	; 1
 4b2:	98 06       	cpc	r9, r24
 4b4:	09 f0       	breq	.+2      	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
 4b6:	98 f5       	brcc	.+102    	; 0x51e <__LOCK_REGION_LENGTH__+0x11e>
 4b8:	a0 cf       	rjmp	.-192    	; 0x3fa <uart_getchar+0x54>
	  case 'c' & 0x1f:
	    return -1;

	  case '\b':
	  case '\x7f':
	    if (cp > b)
 4ba:	9a e3       	ldi	r25, 0x3A	; 58
 4bc:	89 16       	cp	r8, r25
 4be:	91 e0       	ldi	r25, 0x01	; 1
 4c0:	99 06       	cpc	r9, r25
 4c2:	09 f0       	breq	.+2      	; 0x4c6 <__LOCK_REGION_LENGTH__+0xc6>
 4c4:	08 f4       	brcc	.+2      	; 0x4c8 <__LOCK_REGION_LENGTH__+0xc8>
 4c6:	99 cf       	rjmp	.-206    	; 0x3fa <uart_getchar+0x54>
	      {
		uart_putchar('\b', stream);
 4c8:	b8 01       	movw	r22, r16
 4ca:	88 e0       	ldi	r24, 0x08	; 8
 4cc:	0e 94 b2 01 	call	0x364	; 0x364 <uart_putchar>
		uart_putchar(' ', stream);
 4d0:	b8 01       	movw	r22, r16
 4d2:	80 e2       	ldi	r24, 0x20	; 32
 4d4:	0e 94 b2 01 	call	0x364	; 0x364 <uart_putchar>
		uart_putchar('\b', stream);
 4d8:	b8 01       	movw	r22, r16
 4da:	88 e0       	ldi	r24, 0x08	; 8
 4dc:	0e 94 b2 01 	call	0x364	; 0x364 <uart_putchar>
		cp--;
 4e0:	e1 e0       	ldi	r30, 0x01	; 1
 4e2:	8e 1a       	sub	r8, r30
 4e4:	91 08       	sbc	r9, r1
 4e6:	89 cf       	rjmp	.-238    	; 0x3fa <uart_getchar+0x54>
	      }
	    break;

	  case 'r' & 0x1f:
	    uart_putchar('\r', stream);
 4e8:	b8 01       	movw	r22, r16
 4ea:	8d e0       	ldi	r24, 0x0D	; 13
 4ec:	0e 94 b2 01 	call	0x364	; 0x364 <uart_putchar>
	    for (cp2 = b; cp2 < cp; cp2++)
 4f0:	fa e3       	ldi	r31, 0x3A	; 58
 4f2:	8f 16       	cp	r8, r31
 4f4:	f1 e0       	ldi	r31, 0x01	; 1
 4f6:	9f 06       	cpc	r9, r31
 4f8:	09 f0       	breq	.+2      	; 0x4fc <__LOCK_REGION_LENGTH__+0xfc>
 4fa:	08 f4       	brcc	.+2      	; 0x4fe <__LOCK_REGION_LENGTH__+0xfe>
 4fc:	7e cf       	rjmp	.-260    	; 0x3fa <uart_getchar+0x54>
 4fe:	0f 2e       	mov	r0, r31
 500:	fa e3       	ldi	r31, 0x3A	; 58
 502:	ef 2e       	mov	r14, r31
 504:	f1 e0       	ldi	r31, 0x01	; 1
 506:	ff 2e       	mov	r15, r31
 508:	f0 2d       	mov	r31, r0
	      uart_putchar(*cp2, stream);
 50a:	b8 01       	movw	r22, r16
 50c:	f7 01       	movw	r30, r14
 50e:	81 91       	ld	r24, Z+
 510:	7f 01       	movw	r14, r30
 512:	0e 94 b2 01 	call	0x364	; 0x364 <uart_putchar>
	      }
	    break;

	  case 'r' & 0x1f:
	    uart_putchar('\r', stream);
	    for (cp2 = b; cp2 < cp; cp2++)
 516:	8e 14       	cp	r8, r14
 518:	9f 04       	cpc	r9, r15
 51a:	b9 f7       	brne	.-18     	; 0x50a <__LOCK_REGION_LENGTH__+0x10a>
 51c:	6e cf       	rjmp	.-292    	; 0x3fa <uart_getchar+0x54>
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
	      {
		uart_putchar('\b', stream);
 51e:	b8 01       	movw	r22, r16
 520:	88 e0       	ldi	r24, 0x08	; 8
 522:	0e 94 b2 01 	call	0x364	; 0x364 <uart_putchar>
		uart_putchar(' ', stream);
 526:	b8 01       	movw	r22, r16
 528:	80 e2       	ldi	r24, 0x20	; 32
 52a:	0e 94 b2 01 	call	0x364	; 0x364 <uart_putchar>
		uart_putchar('\b', stream);
 52e:	b8 01       	movw	r22, r16
 530:	88 e0       	ldi	r24, 0x08	; 8
 532:	0e 94 b2 01 	call	0x364	; 0x364 <uart_putchar>
		cp--;
 536:	f1 e0       	ldi	r31, 0x01	; 1
 538:	8f 1a       	sub	r8, r31
 53a:	91 08       	sbc	r9, r1
	    for (cp2 = b; cp2 < cp; cp2++)
	      uart_putchar(*cp2, stream);
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
 53c:	8a e3       	ldi	r24, 0x3A	; 58
 53e:	88 16       	cp	r8, r24
 540:	81 e0       	ldi	r24, 0x01	; 1
 542:	98 06       	cpc	r9, r24
 544:	61 f7       	brne	.-40     	; 0x51e <__LOCK_REGION_LENGTH__+0x11e>
 546:	f3 01       	movw	r30, r6
 548:	31 96       	adiw	r30, 0x01	; 1
 54a:	4f 01       	movw	r8, r30
 54c:	56 cf       	rjmp	.-340    	; 0x3fa <uart_getchar+0x54>
 54e:	74 01       	movw	r14, r8
 550:	f1 e0       	ldi	r31, 0x01	; 1
 552:	ef 1a       	sub	r14, r31
 554:	f1 08       	sbc	r15, r1
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
	      {
		uart_putchar('\b', stream);
 556:	b8 01       	movw	r22, r16
 558:	88 e0       	ldi	r24, 0x08	; 8
 55a:	0e 94 b2 01 	call	0x364	; 0x364 <uart_putchar>
		uart_putchar(' ', stream);
 55e:	b8 01       	movw	r22, r16
 560:	80 e2       	ldi	r24, 0x20	; 32
 562:	0e 94 b2 01 	call	0x364	; 0x364 <uart_putchar>
		uart_putchar('\b', stream);
 566:	b8 01       	movw	r22, r16
 568:	88 e0       	ldi	r24, 0x08	; 8
 56a:	0e 94 b2 01 	call	0x364	; 0x364 <uart_putchar>
		cp--;
 56e:	47 01       	movw	r8, r14
		cp--;
	      }
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
 570:	ea 14       	cp	r14, r10
 572:	fb 04       	cpc	r15, r11
 574:	09 f4       	brne	.+2      	; 0x578 <__LOCK_REGION_LENGTH__+0x178>
 576:	41 cf       	rjmp	.-382    	; 0x3fa <uart_getchar+0x54>
 578:	f7 01       	movw	r30, r14
 57a:	82 91       	ld	r24, -Z
 57c:	7f 01       	movw	r14, r30
 57e:	80 32       	cpi	r24, 0x20	; 32
 580:	51 f7       	brne	.-44     	; 0x556 <__LOCK_REGION_LENGTH__+0x156>
 582:	3b cf       	rjmp	.-394    	; 0x3fa <uart_getchar+0x54>
	      }
	    break;
	  }
      }

  c = *rxp++;
 584:	e0 91 8a 01 	lds	r30, 0x018A	; 0x80018a <rxp.1827>
 588:	f0 91 8b 01 	lds	r31, 0x018B	; 0x80018b <rxp.1827+0x1>
 58c:	cf 01       	movw	r24, r30
 58e:	01 96       	adiw	r24, 0x01	; 1
 590:	90 93 8b 01 	sts	0x018B, r25	; 0x80018b <rxp.1827+0x1>
 594:	80 93 8a 01 	sts	0x018A, r24	; 0x80018a <rxp.1827>
 598:	80 81       	ld	r24, Z
  if (c == '\n')
 59a:	8a 30       	cpi	r24, 0x0A	; 10
 59c:	21 f4       	brne	.+8      	; 0x5a6 <__LOCK_REGION_LENGTH__+0x1a6>
    rxp = 0;
 59e:	10 92 8b 01 	sts	0x018B, r1	; 0x80018b <rxp.1827+0x1>
 5a2:	10 92 8a 01 	sts	0x018A, r1	; 0x80018a <rxp.1827>

  return c;
 5a6:	90 e0       	ldi	r25, 0x00	; 0
 5a8:	08 c0       	rjmp	.+16     	; 0x5ba <__LOCK_REGION_LENGTH__+0x1ba>
  if (rxp == 0)
    for (cp = b;;)
      {
	loop_until_bit_is_set(UCSR0A, RXC0);
	if (UCSR0A & _BV(FE0))
	  return _FDEV_EOF;
 5aa:	8e ef       	ldi	r24, 0xFE	; 254
 5ac:	9f ef       	ldi	r25, 0xFF	; 255
 5ae:	05 c0       	rjmp	.+10     	; 0x5ba <__LOCK_REGION_LENGTH__+0x1ba>
	if (UCSR0A & _BV(DOR0))
	  return _FDEV_ERR;
 5b0:	8f ef       	ldi	r24, 0xFF	; 255
 5b2:	9f ef       	ldi	r25, 0xFF	; 255
 5b4:	02 c0       	rjmp	.+4      	; 0x5ba <__LOCK_REGION_LENGTH__+0x1ba>
	  }

	switch (c)
	  {
	  case 'c' & 0x1f:
	    return -1;
 5b6:	8f ef       	ldi	r24, 0xFF	; 255
 5b8:	9f ef       	ldi	r25, 0xFF	; 255
  c = *rxp++;
  if (c == '\n')
    rxp = 0;

  return c;
}
 5ba:	df 91       	pop	r29
 5bc:	cf 91       	pop	r28
 5be:	1f 91       	pop	r17
 5c0:	0f 91       	pop	r16
 5c2:	ff 90       	pop	r15
 5c4:	ef 90       	pop	r14
 5c6:	df 90       	pop	r13
 5c8:	cf 90       	pop	r12
 5ca:	bf 90       	pop	r11
 5cc:	af 90       	pop	r10
 5ce:	9f 90       	pop	r9
 5d0:	8f 90       	pop	r8
 5d2:	7f 90       	pop	r7
 5d4:	6f 90       	pop	r6
 5d6:	08 95       	ret

000005d8 <fprintf>:
 5d8:	a0 e0       	ldi	r26, 0x00	; 0
 5da:	b0 e0       	ldi	r27, 0x00	; 0
 5dc:	e2 ef       	ldi	r30, 0xF2	; 242
 5de:	f2 e0       	ldi	r31, 0x02	; 2
 5e0:	0c 94 d3 05 	jmp	0xba6	; 0xba6 <__prologue_saves__+0x20>
 5e4:	ae 01       	movw	r20, r28
 5e6:	47 5f       	subi	r20, 0xF7	; 247
 5e8:	5f 4f       	sbci	r21, 0xFF	; 255
 5ea:	6f 81       	ldd	r22, Y+7	; 0x07
 5ec:	78 85       	ldd	r23, Y+8	; 0x08
 5ee:	8d 81       	ldd	r24, Y+5	; 0x05
 5f0:	9e 81       	ldd	r25, Y+6	; 0x06
 5f2:	0e 94 32 03 	call	0x664	; 0x664 <vfprintf>
 5f6:	e2 e0       	ldi	r30, 0x02	; 2
 5f8:	0c 94 ef 05 	jmp	0xbde	; 0xbde <__epilogue_restores__+0x20>

000005fc <fwrite>:
 5fc:	a0 e0       	ldi	r26, 0x00	; 0
 5fe:	b0 e0       	ldi	r27, 0x00	; 0
 600:	e4 e0       	ldi	r30, 0x04	; 4
 602:	f3 e0       	ldi	r31, 0x03	; 3
 604:	0c 94 c9 05 	jmp	0xb92	; 0xb92 <__prologue_saves__+0xc>
 608:	5b 01       	movw	r10, r22
 60a:	4a 01       	movw	r8, r20
 60c:	79 01       	movw	r14, r18
 60e:	d9 01       	movw	r26, r18
 610:	13 96       	adiw	r26, 0x03	; 3
 612:	2c 91       	ld	r18, X
 614:	21 ff       	sbrs	r18, 1
 616:	1d c0       	rjmp	.+58     	; 0x652 <fwrite+0x56>
 618:	c0 e0       	ldi	r28, 0x00	; 0
 61a:	d0 e0       	ldi	r29, 0x00	; 0
 61c:	c8 15       	cp	r28, r8
 61e:	d9 05       	cpc	r29, r9
 620:	d9 f0       	breq	.+54     	; 0x658 <fwrite+0x5c>
 622:	8c 01       	movw	r16, r24
 624:	6c 01       	movw	r12, r24
 626:	ca 0c       	add	r12, r10
 628:	db 1c       	adc	r13, r11
 62a:	c8 01       	movw	r24, r16
 62c:	0c 15       	cp	r16, r12
 62e:	1d 05       	cpc	r17, r13
 630:	71 f0       	breq	.+28     	; 0x64e <fwrite+0x52>
 632:	0f 5f       	subi	r16, 0xFF	; 255
 634:	1f 4f       	sbci	r17, 0xFF	; 255
 636:	d7 01       	movw	r26, r14
 638:	18 96       	adiw	r26, 0x08	; 8
 63a:	ed 91       	ld	r30, X+
 63c:	fc 91       	ld	r31, X
 63e:	19 97       	sbiw	r26, 0x09	; 9
 640:	b7 01       	movw	r22, r14
 642:	dc 01       	movw	r26, r24
 644:	8c 91       	ld	r24, X
 646:	09 95       	icall
 648:	89 2b       	or	r24, r25
 64a:	79 f3       	breq	.-34     	; 0x62a <fwrite+0x2e>
 64c:	05 c0       	rjmp	.+10     	; 0x658 <fwrite+0x5c>
 64e:	21 96       	adiw	r28, 0x01	; 1
 650:	e5 cf       	rjmp	.-54     	; 0x61c <fwrite+0x20>
 652:	80 e0       	ldi	r24, 0x00	; 0
 654:	90 e0       	ldi	r25, 0x00	; 0
 656:	01 c0       	rjmp	.+2      	; 0x65a <fwrite+0x5e>
 658:	ce 01       	movw	r24, r28
 65a:	cd b7       	in	r28, 0x3d	; 61
 65c:	de b7       	in	r29, 0x3e	; 62
 65e:	ec e0       	ldi	r30, 0x0C	; 12
 660:	0c 94 e5 05 	jmp	0xbca	; 0xbca <__epilogue_restores__+0xc>

00000664 <vfprintf>:
 664:	ab e0       	ldi	r26, 0x0B	; 11
 666:	b0 e0       	ldi	r27, 0x00	; 0
 668:	e8 e3       	ldi	r30, 0x38	; 56
 66a:	f3 e0       	ldi	r31, 0x03	; 3
 66c:	0c 94 c3 05 	jmp	0xb86	; 0xb86 <__prologue_saves__>
 670:	6c 01       	movw	r12, r24
 672:	7b 01       	movw	r14, r22
 674:	8a 01       	movw	r16, r20
 676:	fc 01       	movw	r30, r24
 678:	17 82       	std	Z+7, r1	; 0x07
 67a:	16 82       	std	Z+6, r1	; 0x06
 67c:	83 81       	ldd	r24, Z+3	; 0x03
 67e:	81 ff       	sbrs	r24, 1
 680:	cc c1       	rjmp	.+920    	; 0xa1a <__stack+0x11b>
 682:	ce 01       	movw	r24, r28
 684:	01 96       	adiw	r24, 0x01	; 1
 686:	3c 01       	movw	r6, r24
 688:	f6 01       	movw	r30, r12
 68a:	93 81       	ldd	r25, Z+3	; 0x03
 68c:	f7 01       	movw	r30, r14
 68e:	93 fd       	sbrc	r25, 3
 690:	85 91       	lpm	r24, Z+
 692:	93 ff       	sbrs	r25, 3
 694:	81 91       	ld	r24, Z+
 696:	7f 01       	movw	r14, r30
 698:	88 23       	and	r24, r24
 69a:	09 f4       	brne	.+2      	; 0x69e <vfprintf+0x3a>
 69c:	ba c1       	rjmp	.+884    	; 0xa12 <__stack+0x113>
 69e:	85 32       	cpi	r24, 0x25	; 37
 6a0:	39 f4       	brne	.+14     	; 0x6b0 <vfprintf+0x4c>
 6a2:	93 fd       	sbrc	r25, 3
 6a4:	85 91       	lpm	r24, Z+
 6a6:	93 ff       	sbrs	r25, 3
 6a8:	81 91       	ld	r24, Z+
 6aa:	7f 01       	movw	r14, r30
 6ac:	85 32       	cpi	r24, 0x25	; 37
 6ae:	29 f4       	brne	.+10     	; 0x6ba <vfprintf+0x56>
 6b0:	b6 01       	movw	r22, r12
 6b2:	90 e0       	ldi	r25, 0x00	; 0
 6b4:	0e 94 29 05 	call	0xa52	; 0xa52 <fputc>
 6b8:	e7 cf       	rjmp	.-50     	; 0x688 <vfprintf+0x24>
 6ba:	91 2c       	mov	r9, r1
 6bc:	21 2c       	mov	r2, r1
 6be:	31 2c       	mov	r3, r1
 6c0:	ff e1       	ldi	r31, 0x1F	; 31
 6c2:	f3 15       	cp	r31, r3
 6c4:	d8 f0       	brcs	.+54     	; 0x6fc <vfprintf+0x98>
 6c6:	8b 32       	cpi	r24, 0x2B	; 43
 6c8:	79 f0       	breq	.+30     	; 0x6e8 <vfprintf+0x84>
 6ca:	38 f4       	brcc	.+14     	; 0x6da <vfprintf+0x76>
 6cc:	80 32       	cpi	r24, 0x20	; 32
 6ce:	79 f0       	breq	.+30     	; 0x6ee <vfprintf+0x8a>
 6d0:	83 32       	cpi	r24, 0x23	; 35
 6d2:	a1 f4       	brne	.+40     	; 0x6fc <vfprintf+0x98>
 6d4:	23 2d       	mov	r18, r3
 6d6:	20 61       	ori	r18, 0x10	; 16
 6d8:	1d c0       	rjmp	.+58     	; 0x714 <vfprintf+0xb0>
 6da:	8d 32       	cpi	r24, 0x2D	; 45
 6dc:	61 f0       	breq	.+24     	; 0x6f6 <vfprintf+0x92>
 6de:	80 33       	cpi	r24, 0x30	; 48
 6e0:	69 f4       	brne	.+26     	; 0x6fc <vfprintf+0x98>
 6e2:	23 2d       	mov	r18, r3
 6e4:	21 60       	ori	r18, 0x01	; 1
 6e6:	16 c0       	rjmp	.+44     	; 0x714 <vfprintf+0xb0>
 6e8:	83 2d       	mov	r24, r3
 6ea:	82 60       	ori	r24, 0x02	; 2
 6ec:	38 2e       	mov	r3, r24
 6ee:	e3 2d       	mov	r30, r3
 6f0:	e4 60       	ori	r30, 0x04	; 4
 6f2:	3e 2e       	mov	r3, r30
 6f4:	2a c0       	rjmp	.+84     	; 0x74a <vfprintf+0xe6>
 6f6:	f3 2d       	mov	r31, r3
 6f8:	f8 60       	ori	r31, 0x08	; 8
 6fa:	1d c0       	rjmp	.+58     	; 0x736 <vfprintf+0xd2>
 6fc:	37 fc       	sbrc	r3, 7
 6fe:	2d c0       	rjmp	.+90     	; 0x75a <vfprintf+0xf6>
 700:	20 ed       	ldi	r18, 0xD0	; 208
 702:	28 0f       	add	r18, r24
 704:	2a 30       	cpi	r18, 0x0A	; 10
 706:	40 f0       	brcs	.+16     	; 0x718 <vfprintf+0xb4>
 708:	8e 32       	cpi	r24, 0x2E	; 46
 70a:	b9 f4       	brne	.+46     	; 0x73a <vfprintf+0xd6>
 70c:	36 fc       	sbrc	r3, 6
 70e:	81 c1       	rjmp	.+770    	; 0xa12 <__stack+0x113>
 710:	23 2d       	mov	r18, r3
 712:	20 64       	ori	r18, 0x40	; 64
 714:	32 2e       	mov	r3, r18
 716:	19 c0       	rjmp	.+50     	; 0x74a <vfprintf+0xe6>
 718:	36 fe       	sbrs	r3, 6
 71a:	06 c0       	rjmp	.+12     	; 0x728 <vfprintf+0xc4>
 71c:	8a e0       	ldi	r24, 0x0A	; 10
 71e:	98 9e       	mul	r9, r24
 720:	20 0d       	add	r18, r0
 722:	11 24       	eor	r1, r1
 724:	92 2e       	mov	r9, r18
 726:	11 c0       	rjmp	.+34     	; 0x74a <vfprintf+0xe6>
 728:	ea e0       	ldi	r30, 0x0A	; 10
 72a:	2e 9e       	mul	r2, r30
 72c:	20 0d       	add	r18, r0
 72e:	11 24       	eor	r1, r1
 730:	22 2e       	mov	r2, r18
 732:	f3 2d       	mov	r31, r3
 734:	f0 62       	ori	r31, 0x20	; 32
 736:	3f 2e       	mov	r3, r31
 738:	08 c0       	rjmp	.+16     	; 0x74a <vfprintf+0xe6>
 73a:	8c 36       	cpi	r24, 0x6C	; 108
 73c:	21 f4       	brne	.+8      	; 0x746 <vfprintf+0xe2>
 73e:	83 2d       	mov	r24, r3
 740:	80 68       	ori	r24, 0x80	; 128
 742:	38 2e       	mov	r3, r24
 744:	02 c0       	rjmp	.+4      	; 0x74a <vfprintf+0xe6>
 746:	88 36       	cpi	r24, 0x68	; 104
 748:	41 f4       	brne	.+16     	; 0x75a <vfprintf+0xf6>
 74a:	f7 01       	movw	r30, r14
 74c:	93 fd       	sbrc	r25, 3
 74e:	85 91       	lpm	r24, Z+
 750:	93 ff       	sbrs	r25, 3
 752:	81 91       	ld	r24, Z+
 754:	7f 01       	movw	r14, r30
 756:	81 11       	cpse	r24, r1
 758:	b3 cf       	rjmp	.-154    	; 0x6c0 <vfprintf+0x5c>
 75a:	98 2f       	mov	r25, r24
 75c:	9f 7d       	andi	r25, 0xDF	; 223
 75e:	95 54       	subi	r25, 0x45	; 69
 760:	93 30       	cpi	r25, 0x03	; 3
 762:	28 f4       	brcc	.+10     	; 0x76e <vfprintf+0x10a>
 764:	0c 5f       	subi	r16, 0xFC	; 252
 766:	1f 4f       	sbci	r17, 0xFF	; 255
 768:	9f e3       	ldi	r25, 0x3F	; 63
 76a:	99 83       	std	Y+1, r25	; 0x01
 76c:	0d c0       	rjmp	.+26     	; 0x788 <vfprintf+0x124>
 76e:	83 36       	cpi	r24, 0x63	; 99
 770:	31 f0       	breq	.+12     	; 0x77e <vfprintf+0x11a>
 772:	83 37       	cpi	r24, 0x73	; 115
 774:	71 f0       	breq	.+28     	; 0x792 <vfprintf+0x12e>
 776:	83 35       	cpi	r24, 0x53	; 83
 778:	09 f0       	breq	.+2      	; 0x77c <vfprintf+0x118>
 77a:	59 c0       	rjmp	.+178    	; 0x82e <vfprintf+0x1ca>
 77c:	21 c0       	rjmp	.+66     	; 0x7c0 <vfprintf+0x15c>
 77e:	f8 01       	movw	r30, r16
 780:	80 81       	ld	r24, Z
 782:	89 83       	std	Y+1, r24	; 0x01
 784:	0e 5f       	subi	r16, 0xFE	; 254
 786:	1f 4f       	sbci	r17, 0xFF	; 255
 788:	88 24       	eor	r8, r8
 78a:	83 94       	inc	r8
 78c:	91 2c       	mov	r9, r1
 78e:	53 01       	movw	r10, r6
 790:	13 c0       	rjmp	.+38     	; 0x7b8 <vfprintf+0x154>
 792:	28 01       	movw	r4, r16
 794:	f2 e0       	ldi	r31, 0x02	; 2
 796:	4f 0e       	add	r4, r31
 798:	51 1c       	adc	r5, r1
 79a:	f8 01       	movw	r30, r16
 79c:	a0 80       	ld	r10, Z
 79e:	b1 80       	ldd	r11, Z+1	; 0x01
 7a0:	36 fe       	sbrs	r3, 6
 7a2:	03 c0       	rjmp	.+6      	; 0x7aa <vfprintf+0x146>
 7a4:	69 2d       	mov	r22, r9
 7a6:	70 e0       	ldi	r23, 0x00	; 0
 7a8:	02 c0       	rjmp	.+4      	; 0x7ae <vfprintf+0x14a>
 7aa:	6f ef       	ldi	r22, 0xFF	; 255
 7ac:	7f ef       	ldi	r23, 0xFF	; 255
 7ae:	c5 01       	movw	r24, r10
 7b0:	0e 94 1e 05 	call	0xa3c	; 0xa3c <strnlen>
 7b4:	4c 01       	movw	r8, r24
 7b6:	82 01       	movw	r16, r4
 7b8:	f3 2d       	mov	r31, r3
 7ba:	ff 77       	andi	r31, 0x7F	; 127
 7bc:	3f 2e       	mov	r3, r31
 7be:	16 c0       	rjmp	.+44     	; 0x7ec <vfprintf+0x188>
 7c0:	28 01       	movw	r4, r16
 7c2:	22 e0       	ldi	r18, 0x02	; 2
 7c4:	42 0e       	add	r4, r18
 7c6:	51 1c       	adc	r5, r1
 7c8:	f8 01       	movw	r30, r16
 7ca:	a0 80       	ld	r10, Z
 7cc:	b1 80       	ldd	r11, Z+1	; 0x01
 7ce:	36 fe       	sbrs	r3, 6
 7d0:	03 c0       	rjmp	.+6      	; 0x7d8 <vfprintf+0x174>
 7d2:	69 2d       	mov	r22, r9
 7d4:	70 e0       	ldi	r23, 0x00	; 0
 7d6:	02 c0       	rjmp	.+4      	; 0x7dc <vfprintf+0x178>
 7d8:	6f ef       	ldi	r22, 0xFF	; 255
 7da:	7f ef       	ldi	r23, 0xFF	; 255
 7dc:	c5 01       	movw	r24, r10
 7de:	0e 94 13 05 	call	0xa26	; 0xa26 <strnlen_P>
 7e2:	4c 01       	movw	r8, r24
 7e4:	f3 2d       	mov	r31, r3
 7e6:	f0 68       	ori	r31, 0x80	; 128
 7e8:	3f 2e       	mov	r3, r31
 7ea:	82 01       	movw	r16, r4
 7ec:	33 fc       	sbrc	r3, 3
 7ee:	1b c0       	rjmp	.+54     	; 0x826 <vfprintf+0x1c2>
 7f0:	82 2d       	mov	r24, r2
 7f2:	90 e0       	ldi	r25, 0x00	; 0
 7f4:	88 16       	cp	r8, r24
 7f6:	99 06       	cpc	r9, r25
 7f8:	b0 f4       	brcc	.+44     	; 0x826 <vfprintf+0x1c2>
 7fa:	b6 01       	movw	r22, r12
 7fc:	80 e2       	ldi	r24, 0x20	; 32
 7fe:	90 e0       	ldi	r25, 0x00	; 0
 800:	0e 94 29 05 	call	0xa52	; 0xa52 <fputc>
 804:	2a 94       	dec	r2
 806:	f4 cf       	rjmp	.-24     	; 0x7f0 <vfprintf+0x18c>
 808:	f5 01       	movw	r30, r10
 80a:	37 fc       	sbrc	r3, 7
 80c:	85 91       	lpm	r24, Z+
 80e:	37 fe       	sbrs	r3, 7
 810:	81 91       	ld	r24, Z+
 812:	5f 01       	movw	r10, r30
 814:	b6 01       	movw	r22, r12
 816:	90 e0       	ldi	r25, 0x00	; 0
 818:	0e 94 29 05 	call	0xa52	; 0xa52 <fputc>
 81c:	21 10       	cpse	r2, r1
 81e:	2a 94       	dec	r2
 820:	21 e0       	ldi	r18, 0x01	; 1
 822:	82 1a       	sub	r8, r18
 824:	91 08       	sbc	r9, r1
 826:	81 14       	cp	r8, r1
 828:	91 04       	cpc	r9, r1
 82a:	71 f7       	brne	.-36     	; 0x808 <vfprintf+0x1a4>
 82c:	e8 c0       	rjmp	.+464    	; 0x9fe <__stack+0xff>
 82e:	84 36       	cpi	r24, 0x64	; 100
 830:	11 f0       	breq	.+4      	; 0x836 <vfprintf+0x1d2>
 832:	89 36       	cpi	r24, 0x69	; 105
 834:	41 f5       	brne	.+80     	; 0x886 <vfprintf+0x222>
 836:	f8 01       	movw	r30, r16
 838:	37 fe       	sbrs	r3, 7
 83a:	07 c0       	rjmp	.+14     	; 0x84a <vfprintf+0x1e6>
 83c:	60 81       	ld	r22, Z
 83e:	71 81       	ldd	r23, Z+1	; 0x01
 840:	82 81       	ldd	r24, Z+2	; 0x02
 842:	93 81       	ldd	r25, Z+3	; 0x03
 844:	0c 5f       	subi	r16, 0xFC	; 252
 846:	1f 4f       	sbci	r17, 0xFF	; 255
 848:	08 c0       	rjmp	.+16     	; 0x85a <vfprintf+0x1f6>
 84a:	60 81       	ld	r22, Z
 84c:	71 81       	ldd	r23, Z+1	; 0x01
 84e:	07 2e       	mov	r0, r23
 850:	00 0c       	add	r0, r0
 852:	88 0b       	sbc	r24, r24
 854:	99 0b       	sbc	r25, r25
 856:	0e 5f       	subi	r16, 0xFE	; 254
 858:	1f 4f       	sbci	r17, 0xFF	; 255
 85a:	f3 2d       	mov	r31, r3
 85c:	ff 76       	andi	r31, 0x6F	; 111
 85e:	3f 2e       	mov	r3, r31
 860:	97 ff       	sbrs	r25, 7
 862:	09 c0       	rjmp	.+18     	; 0x876 <vfprintf+0x212>
 864:	90 95       	com	r25
 866:	80 95       	com	r24
 868:	70 95       	com	r23
 86a:	61 95       	neg	r22
 86c:	7f 4f       	sbci	r23, 0xFF	; 255
 86e:	8f 4f       	sbci	r24, 0xFF	; 255
 870:	9f 4f       	sbci	r25, 0xFF	; 255
 872:	f0 68       	ori	r31, 0x80	; 128
 874:	3f 2e       	mov	r3, r31
 876:	2a e0       	ldi	r18, 0x0A	; 10
 878:	30 e0       	ldi	r19, 0x00	; 0
 87a:	a3 01       	movw	r20, r6
 87c:	0e 94 65 05 	call	0xaca	; 0xaca <__ultoa_invert>
 880:	88 2e       	mov	r8, r24
 882:	86 18       	sub	r8, r6
 884:	45 c0       	rjmp	.+138    	; 0x910 <__stack+0x11>
 886:	85 37       	cpi	r24, 0x75	; 117
 888:	31 f4       	brne	.+12     	; 0x896 <vfprintf+0x232>
 88a:	23 2d       	mov	r18, r3
 88c:	2f 7e       	andi	r18, 0xEF	; 239
 88e:	b2 2e       	mov	r11, r18
 890:	2a e0       	ldi	r18, 0x0A	; 10
 892:	30 e0       	ldi	r19, 0x00	; 0
 894:	25 c0       	rjmp	.+74     	; 0x8e0 <vfprintf+0x27c>
 896:	93 2d       	mov	r25, r3
 898:	99 7f       	andi	r25, 0xF9	; 249
 89a:	b9 2e       	mov	r11, r25
 89c:	8f 36       	cpi	r24, 0x6F	; 111
 89e:	c1 f0       	breq	.+48     	; 0x8d0 <vfprintf+0x26c>
 8a0:	18 f4       	brcc	.+6      	; 0x8a8 <vfprintf+0x244>
 8a2:	88 35       	cpi	r24, 0x58	; 88
 8a4:	79 f0       	breq	.+30     	; 0x8c4 <vfprintf+0x260>
 8a6:	b5 c0       	rjmp	.+362    	; 0xa12 <__stack+0x113>
 8a8:	80 37       	cpi	r24, 0x70	; 112
 8aa:	19 f0       	breq	.+6      	; 0x8b2 <vfprintf+0x24e>
 8ac:	88 37       	cpi	r24, 0x78	; 120
 8ae:	21 f0       	breq	.+8      	; 0x8b8 <vfprintf+0x254>
 8b0:	b0 c0       	rjmp	.+352    	; 0xa12 <__stack+0x113>
 8b2:	e9 2f       	mov	r30, r25
 8b4:	e0 61       	ori	r30, 0x10	; 16
 8b6:	be 2e       	mov	r11, r30
 8b8:	b4 fe       	sbrs	r11, 4
 8ba:	0d c0       	rjmp	.+26     	; 0x8d6 <vfprintf+0x272>
 8bc:	fb 2d       	mov	r31, r11
 8be:	f4 60       	ori	r31, 0x04	; 4
 8c0:	bf 2e       	mov	r11, r31
 8c2:	09 c0       	rjmp	.+18     	; 0x8d6 <vfprintf+0x272>
 8c4:	34 fe       	sbrs	r3, 4
 8c6:	0a c0       	rjmp	.+20     	; 0x8dc <vfprintf+0x278>
 8c8:	29 2f       	mov	r18, r25
 8ca:	26 60       	ori	r18, 0x06	; 6
 8cc:	b2 2e       	mov	r11, r18
 8ce:	06 c0       	rjmp	.+12     	; 0x8dc <vfprintf+0x278>
 8d0:	28 e0       	ldi	r18, 0x08	; 8
 8d2:	30 e0       	ldi	r19, 0x00	; 0
 8d4:	05 c0       	rjmp	.+10     	; 0x8e0 <vfprintf+0x27c>
 8d6:	20 e1       	ldi	r18, 0x10	; 16
 8d8:	30 e0       	ldi	r19, 0x00	; 0
 8da:	02 c0       	rjmp	.+4      	; 0x8e0 <vfprintf+0x27c>
 8dc:	20 e1       	ldi	r18, 0x10	; 16
 8de:	32 e0       	ldi	r19, 0x02	; 2
 8e0:	f8 01       	movw	r30, r16
 8e2:	b7 fe       	sbrs	r11, 7
 8e4:	07 c0       	rjmp	.+14     	; 0x8f4 <vfprintf+0x290>
 8e6:	60 81       	ld	r22, Z
 8e8:	71 81       	ldd	r23, Z+1	; 0x01
 8ea:	82 81       	ldd	r24, Z+2	; 0x02
 8ec:	93 81       	ldd	r25, Z+3	; 0x03
 8ee:	0c 5f       	subi	r16, 0xFC	; 252
 8f0:	1f 4f       	sbci	r17, 0xFF	; 255
 8f2:	06 c0       	rjmp	.+12     	; 0x900 <__stack+0x1>
 8f4:	60 81       	ld	r22, Z
 8f6:	71 81       	ldd	r23, Z+1	; 0x01
 8f8:	80 e0       	ldi	r24, 0x00	; 0
 8fa:	90 e0       	ldi	r25, 0x00	; 0
 8fc:	0e 5f       	subi	r16, 0xFE	; 254
 8fe:	1f 4f       	sbci	r17, 0xFF	; 255
 900:	a3 01       	movw	r20, r6
 902:	0e 94 65 05 	call	0xaca	; 0xaca <__ultoa_invert>
 906:	88 2e       	mov	r8, r24
 908:	86 18       	sub	r8, r6
 90a:	fb 2d       	mov	r31, r11
 90c:	ff 77       	andi	r31, 0x7F	; 127
 90e:	3f 2e       	mov	r3, r31
 910:	36 fe       	sbrs	r3, 6
 912:	0d c0       	rjmp	.+26     	; 0x92e <__stack+0x2f>
 914:	23 2d       	mov	r18, r3
 916:	2e 7f       	andi	r18, 0xFE	; 254
 918:	a2 2e       	mov	r10, r18
 91a:	89 14       	cp	r8, r9
 91c:	58 f4       	brcc	.+22     	; 0x934 <__stack+0x35>
 91e:	34 fe       	sbrs	r3, 4
 920:	0b c0       	rjmp	.+22     	; 0x938 <__stack+0x39>
 922:	32 fc       	sbrc	r3, 2
 924:	09 c0       	rjmp	.+18     	; 0x938 <__stack+0x39>
 926:	83 2d       	mov	r24, r3
 928:	8e 7e       	andi	r24, 0xEE	; 238
 92a:	a8 2e       	mov	r10, r24
 92c:	05 c0       	rjmp	.+10     	; 0x938 <__stack+0x39>
 92e:	b8 2c       	mov	r11, r8
 930:	a3 2c       	mov	r10, r3
 932:	03 c0       	rjmp	.+6      	; 0x93a <__stack+0x3b>
 934:	b8 2c       	mov	r11, r8
 936:	01 c0       	rjmp	.+2      	; 0x93a <__stack+0x3b>
 938:	b9 2c       	mov	r11, r9
 93a:	a4 fe       	sbrs	r10, 4
 93c:	0f c0       	rjmp	.+30     	; 0x95c <__stack+0x5d>
 93e:	fe 01       	movw	r30, r28
 940:	e8 0d       	add	r30, r8
 942:	f1 1d       	adc	r31, r1
 944:	80 81       	ld	r24, Z
 946:	80 33       	cpi	r24, 0x30	; 48
 948:	21 f4       	brne	.+8      	; 0x952 <__stack+0x53>
 94a:	9a 2d       	mov	r25, r10
 94c:	99 7e       	andi	r25, 0xE9	; 233
 94e:	a9 2e       	mov	r10, r25
 950:	09 c0       	rjmp	.+18     	; 0x964 <__stack+0x65>
 952:	a2 fe       	sbrs	r10, 2
 954:	06 c0       	rjmp	.+12     	; 0x962 <__stack+0x63>
 956:	b3 94       	inc	r11
 958:	b3 94       	inc	r11
 95a:	04 c0       	rjmp	.+8      	; 0x964 <__stack+0x65>
 95c:	8a 2d       	mov	r24, r10
 95e:	86 78       	andi	r24, 0x86	; 134
 960:	09 f0       	breq	.+2      	; 0x964 <__stack+0x65>
 962:	b3 94       	inc	r11
 964:	a3 fc       	sbrc	r10, 3
 966:	11 c0       	rjmp	.+34     	; 0x98a <__stack+0x8b>
 968:	a0 fe       	sbrs	r10, 0
 96a:	06 c0       	rjmp	.+12     	; 0x978 <__stack+0x79>
 96c:	b2 14       	cp	r11, r2
 96e:	88 f4       	brcc	.+34     	; 0x992 <__stack+0x93>
 970:	28 0c       	add	r2, r8
 972:	92 2c       	mov	r9, r2
 974:	9b 18       	sub	r9, r11
 976:	0e c0       	rjmp	.+28     	; 0x994 <__stack+0x95>
 978:	b2 14       	cp	r11, r2
 97a:	60 f4       	brcc	.+24     	; 0x994 <__stack+0x95>
 97c:	b6 01       	movw	r22, r12
 97e:	80 e2       	ldi	r24, 0x20	; 32
 980:	90 e0       	ldi	r25, 0x00	; 0
 982:	0e 94 29 05 	call	0xa52	; 0xa52 <fputc>
 986:	b3 94       	inc	r11
 988:	f7 cf       	rjmp	.-18     	; 0x978 <__stack+0x79>
 98a:	b2 14       	cp	r11, r2
 98c:	18 f4       	brcc	.+6      	; 0x994 <__stack+0x95>
 98e:	2b 18       	sub	r2, r11
 990:	02 c0       	rjmp	.+4      	; 0x996 <__stack+0x97>
 992:	98 2c       	mov	r9, r8
 994:	21 2c       	mov	r2, r1
 996:	a4 fe       	sbrs	r10, 4
 998:	10 c0       	rjmp	.+32     	; 0x9ba <__stack+0xbb>
 99a:	b6 01       	movw	r22, r12
 99c:	80 e3       	ldi	r24, 0x30	; 48
 99e:	90 e0       	ldi	r25, 0x00	; 0
 9a0:	0e 94 29 05 	call	0xa52	; 0xa52 <fputc>
 9a4:	a2 fe       	sbrs	r10, 2
 9a6:	17 c0       	rjmp	.+46     	; 0x9d6 <__stack+0xd7>
 9a8:	a1 fc       	sbrc	r10, 1
 9aa:	03 c0       	rjmp	.+6      	; 0x9b2 <__stack+0xb3>
 9ac:	88 e7       	ldi	r24, 0x78	; 120
 9ae:	90 e0       	ldi	r25, 0x00	; 0
 9b0:	02 c0       	rjmp	.+4      	; 0x9b6 <__stack+0xb7>
 9b2:	88 e5       	ldi	r24, 0x58	; 88
 9b4:	90 e0       	ldi	r25, 0x00	; 0
 9b6:	b6 01       	movw	r22, r12
 9b8:	0c c0       	rjmp	.+24     	; 0x9d2 <__stack+0xd3>
 9ba:	8a 2d       	mov	r24, r10
 9bc:	86 78       	andi	r24, 0x86	; 134
 9be:	59 f0       	breq	.+22     	; 0x9d6 <__stack+0xd7>
 9c0:	a1 fe       	sbrs	r10, 1
 9c2:	02 c0       	rjmp	.+4      	; 0x9c8 <__stack+0xc9>
 9c4:	8b e2       	ldi	r24, 0x2B	; 43
 9c6:	01 c0       	rjmp	.+2      	; 0x9ca <__stack+0xcb>
 9c8:	80 e2       	ldi	r24, 0x20	; 32
 9ca:	a7 fc       	sbrc	r10, 7
 9cc:	8d e2       	ldi	r24, 0x2D	; 45
 9ce:	b6 01       	movw	r22, r12
 9d0:	90 e0       	ldi	r25, 0x00	; 0
 9d2:	0e 94 29 05 	call	0xa52	; 0xa52 <fputc>
 9d6:	89 14       	cp	r8, r9
 9d8:	38 f4       	brcc	.+14     	; 0x9e8 <__stack+0xe9>
 9da:	b6 01       	movw	r22, r12
 9dc:	80 e3       	ldi	r24, 0x30	; 48
 9de:	90 e0       	ldi	r25, 0x00	; 0
 9e0:	0e 94 29 05 	call	0xa52	; 0xa52 <fputc>
 9e4:	9a 94       	dec	r9
 9e6:	f7 cf       	rjmp	.-18     	; 0x9d6 <__stack+0xd7>
 9e8:	8a 94       	dec	r8
 9ea:	f3 01       	movw	r30, r6
 9ec:	e8 0d       	add	r30, r8
 9ee:	f1 1d       	adc	r31, r1
 9f0:	80 81       	ld	r24, Z
 9f2:	b6 01       	movw	r22, r12
 9f4:	90 e0       	ldi	r25, 0x00	; 0
 9f6:	0e 94 29 05 	call	0xa52	; 0xa52 <fputc>
 9fa:	81 10       	cpse	r8, r1
 9fc:	f5 cf       	rjmp	.-22     	; 0x9e8 <__stack+0xe9>
 9fe:	22 20       	and	r2, r2
 a00:	09 f4       	brne	.+2      	; 0xa04 <__stack+0x105>
 a02:	42 ce       	rjmp	.-892    	; 0x688 <vfprintf+0x24>
 a04:	b6 01       	movw	r22, r12
 a06:	80 e2       	ldi	r24, 0x20	; 32
 a08:	90 e0       	ldi	r25, 0x00	; 0
 a0a:	0e 94 29 05 	call	0xa52	; 0xa52 <fputc>
 a0e:	2a 94       	dec	r2
 a10:	f6 cf       	rjmp	.-20     	; 0x9fe <__stack+0xff>
 a12:	f6 01       	movw	r30, r12
 a14:	86 81       	ldd	r24, Z+6	; 0x06
 a16:	97 81       	ldd	r25, Z+7	; 0x07
 a18:	02 c0       	rjmp	.+4      	; 0xa1e <__stack+0x11f>
 a1a:	8f ef       	ldi	r24, 0xFF	; 255
 a1c:	9f ef       	ldi	r25, 0xFF	; 255
 a1e:	2b 96       	adiw	r28, 0x0b	; 11
 a20:	e2 e1       	ldi	r30, 0x12	; 18
 a22:	0c 94 df 05 	jmp	0xbbe	; 0xbbe <__epilogue_restores__>

00000a26 <strnlen_P>:
 a26:	fc 01       	movw	r30, r24
 a28:	05 90       	lpm	r0, Z+
 a2a:	61 50       	subi	r22, 0x01	; 1
 a2c:	70 40       	sbci	r23, 0x00	; 0
 a2e:	01 10       	cpse	r0, r1
 a30:	d8 f7       	brcc	.-10     	; 0xa28 <strnlen_P+0x2>
 a32:	80 95       	com	r24
 a34:	90 95       	com	r25
 a36:	8e 0f       	add	r24, r30
 a38:	9f 1f       	adc	r25, r31
 a3a:	08 95       	ret

00000a3c <strnlen>:
 a3c:	fc 01       	movw	r30, r24
 a3e:	61 50       	subi	r22, 0x01	; 1
 a40:	70 40       	sbci	r23, 0x00	; 0
 a42:	01 90       	ld	r0, Z+
 a44:	01 10       	cpse	r0, r1
 a46:	d8 f7       	brcc	.-10     	; 0xa3e <strnlen+0x2>
 a48:	80 95       	com	r24
 a4a:	90 95       	com	r25
 a4c:	8e 0f       	add	r24, r30
 a4e:	9f 1f       	adc	r25, r31
 a50:	08 95       	ret

00000a52 <fputc>:
 a52:	0f 93       	push	r16
 a54:	1f 93       	push	r17
 a56:	cf 93       	push	r28
 a58:	df 93       	push	r29
 a5a:	fb 01       	movw	r30, r22
 a5c:	23 81       	ldd	r18, Z+3	; 0x03
 a5e:	21 fd       	sbrc	r18, 1
 a60:	03 c0       	rjmp	.+6      	; 0xa68 <fputc+0x16>
 a62:	8f ef       	ldi	r24, 0xFF	; 255
 a64:	9f ef       	ldi	r25, 0xFF	; 255
 a66:	2c c0       	rjmp	.+88     	; 0xac0 <fputc+0x6e>
 a68:	22 ff       	sbrs	r18, 2
 a6a:	16 c0       	rjmp	.+44     	; 0xa98 <fputc+0x46>
 a6c:	46 81       	ldd	r20, Z+6	; 0x06
 a6e:	57 81       	ldd	r21, Z+7	; 0x07
 a70:	24 81       	ldd	r18, Z+4	; 0x04
 a72:	35 81       	ldd	r19, Z+5	; 0x05
 a74:	42 17       	cp	r20, r18
 a76:	53 07       	cpc	r21, r19
 a78:	44 f4       	brge	.+16     	; 0xa8a <fputc+0x38>
 a7a:	a0 81       	ld	r26, Z
 a7c:	b1 81       	ldd	r27, Z+1	; 0x01
 a7e:	9d 01       	movw	r18, r26
 a80:	2f 5f       	subi	r18, 0xFF	; 255
 a82:	3f 4f       	sbci	r19, 0xFF	; 255
 a84:	31 83       	std	Z+1, r19	; 0x01
 a86:	20 83       	st	Z, r18
 a88:	8c 93       	st	X, r24
 a8a:	26 81       	ldd	r18, Z+6	; 0x06
 a8c:	37 81       	ldd	r19, Z+7	; 0x07
 a8e:	2f 5f       	subi	r18, 0xFF	; 255
 a90:	3f 4f       	sbci	r19, 0xFF	; 255
 a92:	37 83       	std	Z+7, r19	; 0x07
 a94:	26 83       	std	Z+6, r18	; 0x06
 a96:	14 c0       	rjmp	.+40     	; 0xac0 <fputc+0x6e>
 a98:	8b 01       	movw	r16, r22
 a9a:	ec 01       	movw	r28, r24
 a9c:	fb 01       	movw	r30, r22
 a9e:	00 84       	ldd	r0, Z+8	; 0x08
 aa0:	f1 85       	ldd	r31, Z+9	; 0x09
 aa2:	e0 2d       	mov	r30, r0
 aa4:	09 95       	icall
 aa6:	89 2b       	or	r24, r25
 aa8:	e1 f6       	brne	.-72     	; 0xa62 <fputc+0x10>
 aaa:	d8 01       	movw	r26, r16
 aac:	16 96       	adiw	r26, 0x06	; 6
 aae:	8d 91       	ld	r24, X+
 ab0:	9c 91       	ld	r25, X
 ab2:	17 97       	sbiw	r26, 0x07	; 7
 ab4:	01 96       	adiw	r24, 0x01	; 1
 ab6:	17 96       	adiw	r26, 0x07	; 7
 ab8:	9c 93       	st	X, r25
 aba:	8e 93       	st	-X, r24
 abc:	16 97       	sbiw	r26, 0x06	; 6
 abe:	ce 01       	movw	r24, r28
 ac0:	df 91       	pop	r29
 ac2:	cf 91       	pop	r28
 ac4:	1f 91       	pop	r17
 ac6:	0f 91       	pop	r16
 ac8:	08 95       	ret

00000aca <__ultoa_invert>:
 aca:	fa 01       	movw	r30, r20
 acc:	aa 27       	eor	r26, r26
 ace:	28 30       	cpi	r18, 0x08	; 8
 ad0:	51 f1       	breq	.+84     	; 0xb26 <__ultoa_invert+0x5c>
 ad2:	20 31       	cpi	r18, 0x10	; 16
 ad4:	81 f1       	breq	.+96     	; 0xb36 <__ultoa_invert+0x6c>
 ad6:	e8 94       	clt
 ad8:	6f 93       	push	r22
 ada:	6e 7f       	andi	r22, 0xFE	; 254
 adc:	6e 5f       	subi	r22, 0xFE	; 254
 ade:	7f 4f       	sbci	r23, 0xFF	; 255
 ae0:	8f 4f       	sbci	r24, 0xFF	; 255
 ae2:	9f 4f       	sbci	r25, 0xFF	; 255
 ae4:	af 4f       	sbci	r26, 0xFF	; 255
 ae6:	b1 e0       	ldi	r27, 0x01	; 1
 ae8:	3e d0       	rcall	.+124    	; 0xb66 <__ultoa_invert+0x9c>
 aea:	b4 e0       	ldi	r27, 0x04	; 4
 aec:	3c d0       	rcall	.+120    	; 0xb66 <__ultoa_invert+0x9c>
 aee:	67 0f       	add	r22, r23
 af0:	78 1f       	adc	r23, r24
 af2:	89 1f       	adc	r24, r25
 af4:	9a 1f       	adc	r25, r26
 af6:	a1 1d       	adc	r26, r1
 af8:	68 0f       	add	r22, r24
 afa:	79 1f       	adc	r23, r25
 afc:	8a 1f       	adc	r24, r26
 afe:	91 1d       	adc	r25, r1
 b00:	a1 1d       	adc	r26, r1
 b02:	6a 0f       	add	r22, r26
 b04:	71 1d       	adc	r23, r1
 b06:	81 1d       	adc	r24, r1
 b08:	91 1d       	adc	r25, r1
 b0a:	a1 1d       	adc	r26, r1
 b0c:	20 d0       	rcall	.+64     	; 0xb4e <__ultoa_invert+0x84>
 b0e:	09 f4       	brne	.+2      	; 0xb12 <__ultoa_invert+0x48>
 b10:	68 94       	set
 b12:	3f 91       	pop	r19
 b14:	2a e0       	ldi	r18, 0x0A	; 10
 b16:	26 9f       	mul	r18, r22
 b18:	11 24       	eor	r1, r1
 b1a:	30 19       	sub	r19, r0
 b1c:	30 5d       	subi	r19, 0xD0	; 208
 b1e:	31 93       	st	Z+, r19
 b20:	de f6       	brtc	.-74     	; 0xad8 <__ultoa_invert+0xe>
 b22:	cf 01       	movw	r24, r30
 b24:	08 95       	ret
 b26:	46 2f       	mov	r20, r22
 b28:	47 70       	andi	r20, 0x07	; 7
 b2a:	40 5d       	subi	r20, 0xD0	; 208
 b2c:	41 93       	st	Z+, r20
 b2e:	b3 e0       	ldi	r27, 0x03	; 3
 b30:	0f d0       	rcall	.+30     	; 0xb50 <__ultoa_invert+0x86>
 b32:	c9 f7       	brne	.-14     	; 0xb26 <__ultoa_invert+0x5c>
 b34:	f6 cf       	rjmp	.-20     	; 0xb22 <__ultoa_invert+0x58>
 b36:	46 2f       	mov	r20, r22
 b38:	4f 70       	andi	r20, 0x0F	; 15
 b3a:	40 5d       	subi	r20, 0xD0	; 208
 b3c:	4a 33       	cpi	r20, 0x3A	; 58
 b3e:	18 f0       	brcs	.+6      	; 0xb46 <__ultoa_invert+0x7c>
 b40:	49 5d       	subi	r20, 0xD9	; 217
 b42:	31 fd       	sbrc	r19, 1
 b44:	40 52       	subi	r20, 0x20	; 32
 b46:	41 93       	st	Z+, r20
 b48:	02 d0       	rcall	.+4      	; 0xb4e <__ultoa_invert+0x84>
 b4a:	a9 f7       	brne	.-22     	; 0xb36 <__ultoa_invert+0x6c>
 b4c:	ea cf       	rjmp	.-44     	; 0xb22 <__ultoa_invert+0x58>
 b4e:	b4 e0       	ldi	r27, 0x04	; 4
 b50:	a6 95       	lsr	r26
 b52:	97 95       	ror	r25
 b54:	87 95       	ror	r24
 b56:	77 95       	ror	r23
 b58:	67 95       	ror	r22
 b5a:	ba 95       	dec	r27
 b5c:	c9 f7       	brne	.-14     	; 0xb50 <__ultoa_invert+0x86>
 b5e:	00 97       	sbiw	r24, 0x00	; 0
 b60:	61 05       	cpc	r22, r1
 b62:	71 05       	cpc	r23, r1
 b64:	08 95       	ret
 b66:	9b 01       	movw	r18, r22
 b68:	ac 01       	movw	r20, r24
 b6a:	0a 2e       	mov	r0, r26
 b6c:	06 94       	lsr	r0
 b6e:	57 95       	ror	r21
 b70:	47 95       	ror	r20
 b72:	37 95       	ror	r19
 b74:	27 95       	ror	r18
 b76:	ba 95       	dec	r27
 b78:	c9 f7       	brne	.-14     	; 0xb6c <__ultoa_invert+0xa2>
 b7a:	62 0f       	add	r22, r18
 b7c:	73 1f       	adc	r23, r19
 b7e:	84 1f       	adc	r24, r20
 b80:	95 1f       	adc	r25, r21
 b82:	a0 1d       	adc	r26, r0
 b84:	08 95       	ret

00000b86 <__prologue_saves__>:
 b86:	2f 92       	push	r2
 b88:	3f 92       	push	r3
 b8a:	4f 92       	push	r4
 b8c:	5f 92       	push	r5
 b8e:	6f 92       	push	r6
 b90:	7f 92       	push	r7
 b92:	8f 92       	push	r8
 b94:	9f 92       	push	r9
 b96:	af 92       	push	r10
 b98:	bf 92       	push	r11
 b9a:	cf 92       	push	r12
 b9c:	df 92       	push	r13
 b9e:	ef 92       	push	r14
 ba0:	ff 92       	push	r15
 ba2:	0f 93       	push	r16
 ba4:	1f 93       	push	r17
 ba6:	cf 93       	push	r28
 ba8:	df 93       	push	r29
 baa:	cd b7       	in	r28, 0x3d	; 61
 bac:	de b7       	in	r29, 0x3e	; 62
 bae:	ca 1b       	sub	r28, r26
 bb0:	db 0b       	sbc	r29, r27
 bb2:	0f b6       	in	r0, 0x3f	; 63
 bb4:	f8 94       	cli
 bb6:	de bf       	out	0x3e, r29	; 62
 bb8:	0f be       	out	0x3f, r0	; 63
 bba:	cd bf       	out	0x3d, r28	; 61
 bbc:	09 94       	ijmp

00000bbe <__epilogue_restores__>:
 bbe:	2a 88       	ldd	r2, Y+18	; 0x12
 bc0:	39 88       	ldd	r3, Y+17	; 0x11
 bc2:	48 88       	ldd	r4, Y+16	; 0x10
 bc4:	5f 84       	ldd	r5, Y+15	; 0x0f
 bc6:	6e 84       	ldd	r6, Y+14	; 0x0e
 bc8:	7d 84       	ldd	r7, Y+13	; 0x0d
 bca:	8c 84       	ldd	r8, Y+12	; 0x0c
 bcc:	9b 84       	ldd	r9, Y+11	; 0x0b
 bce:	aa 84       	ldd	r10, Y+10	; 0x0a
 bd0:	b9 84       	ldd	r11, Y+9	; 0x09
 bd2:	c8 84       	ldd	r12, Y+8	; 0x08
 bd4:	df 80       	ldd	r13, Y+7	; 0x07
 bd6:	ee 80       	ldd	r14, Y+6	; 0x06
 bd8:	fd 80       	ldd	r15, Y+5	; 0x05
 bda:	0c 81       	ldd	r16, Y+4	; 0x04
 bdc:	1b 81       	ldd	r17, Y+3	; 0x03
 bde:	aa 81       	ldd	r26, Y+2	; 0x02
 be0:	b9 81       	ldd	r27, Y+1	; 0x01
 be2:	ce 0f       	add	r28, r30
 be4:	d1 1d       	adc	r29, r1
 be6:	0f b6       	in	r0, 0x3f	; 63
 be8:	f8 94       	cli
 bea:	de bf       	out	0x3e, r29	; 62
 bec:	0f be       	out	0x3f, r0	; 63
 bee:	cd bf       	out	0x3d, r28	; 61
 bf0:	ed 01       	movw	r28, r26
 bf2:	08 95       	ret

00000bf4 <_exit>:
 bf4:	f8 94       	cli

00000bf6 <__stop_program>:
 bf6:	ff cf       	rjmp	.-2      	; 0xbf6 <__stop_program>
