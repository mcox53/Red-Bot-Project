
Red Bot Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000028  00800100  00001142  000011d6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001142  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000b5  00800128  00800128  000011fe  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000011fe  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001230  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000100  00000000  00000000  00001270  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000013c1  00000000  00000000  00001370  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009c6  00000000  00000000  00002731  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a13  00000000  00000000  000030f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002ec  00000000  00000000  00003b0c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000064e  00000000  00000000  00003df8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000704  00000000  00000000  00004446  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d0  00000000  00000000  00004b4a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 3b 02 	jmp	0x476	; 0x476 <__vector_11>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 4c 02 	jmp	0x498	; 0x498 <__vector_14>
      3c:	0c 94 5b 02 	jmp	0x4b6	; 0x4b6 <__vector_15>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e2 e4       	ldi	r30, 0x42	; 66
      7c:	f1 e1       	ldi	r31, 0x11	; 17
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a8 32       	cpi	r26, 0x28	; 40
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	21 e0       	ldi	r18, 0x01	; 1
      8c:	a8 e2       	ldi	r26, 0x28	; 40
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	ad 3d       	cpi	r26, 0xDD	; 221
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <main>
      9e:	0c 94 9f 08 	jmp	0x113e	; 0x113e <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <PIDCalculateOutput>:
#define HARD_TURN_HIGH			170
#define SLIGHT_TURN_LOW			100
#define SLIGHT_TURN_HIGH		180


void PIDCalculateOutput(float setpoint){
      a6:	4f 92       	push	r4
      a8:	5f 92       	push	r5
      aa:	6f 92       	push	r6
      ac:	7f 92       	push	r7
      ae:	8f 92       	push	r8
      b0:	9f 92       	push	r9
      b2:	af 92       	push	r10
      b4:	bf 92       	push	r11
      b6:	cf 92       	push	r12
      b8:	df 92       	push	r13
      ba:	ef 92       	push	r14
      bc:	ff 92       	push	r15
      be:	cf 93       	push	r28
      c0:	df 93       	push	r29
      c2:	00 d0       	rcall	.+0      	; 0xc4 <PIDCalculateOutput+0x1e>
      c4:	00 d0       	rcall	.+0      	; 0xc6 <PIDCalculateOutput+0x20>
      c6:	cd b7       	in	r28, 0x3d	; 61
      c8:	de b7       	in	r29, 0x3e	; 62
      ca:	6b 01       	movw	r12, r22
      cc:	7c 01       	movw	r14, r24
	error = setpoint - center_line;
      ce:	60 91 d5 01 	lds	r22, 0x01D5	; 0x8001d5 <center_line>
      d2:	70 91 d6 01 	lds	r23, 0x01D6	; 0x8001d6 <center_line+0x1>
      d6:	80 e0       	ldi	r24, 0x00	; 0
      d8:	90 e0       	ldi	r25, 0x00	; 0
      da:	0e 94 10 07 	call	0xe20	; 0xe20 <__floatunsisf>
      de:	9b 01       	movw	r18, r22
      e0:	ac 01       	movw	r20, r24
      e2:	c7 01       	movw	r24, r14
      e4:	b6 01       	movw	r22, r12
      e6:	0e 94 f6 05 	call	0xbec	; 0xbec <__subsf3>
      ea:	6b 01       	movw	r12, r22
      ec:	7c 01       	movw	r14, r24
      ee:	60 93 44 01 	sts	0x0144, r22	; 0x800144 <error>
      f2:	70 93 45 01 	sts	0x0145, r23	; 0x800145 <error+0x1>
      f6:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <error+0x2>
      fa:	90 93 47 01 	sts	0x0147, r25	; 0x800147 <error+0x3>
	
	integral += error;
      fe:	20 91 38 01 	lds	r18, 0x0138	; 0x800138 <integral>
     102:	30 91 39 01 	lds	r19, 0x0139	; 0x800139 <integral+0x1>
     106:	40 91 3a 01 	lds	r20, 0x013A	; 0x80013a <integral+0x2>
     10a:	50 91 3b 01 	lds	r21, 0x013B	; 0x80013b <integral+0x3>
     10e:	0e 94 f7 05 	call	0xbee	; 0xbee <__addsf3>
     112:	2b 01       	movw	r4, r22
     114:	3c 01       	movw	r6, r24
     116:	60 93 38 01 	sts	0x0138, r22	; 0x800138 <integral>
     11a:	70 93 39 01 	sts	0x0139, r23	; 0x800139 <integral+0x1>
     11e:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <integral+0x2>
     122:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <integral+0x3>
	
	derivative = error - last_error;
     126:	20 91 40 01 	lds	r18, 0x0140	; 0x800140 <last_error>
     12a:	30 91 41 01 	lds	r19, 0x0141	; 0x800141 <last_error+0x1>
     12e:	40 91 42 01 	lds	r20, 0x0142	; 0x800142 <last_error+0x2>
     132:	50 91 43 01 	lds	r21, 0x0143	; 0x800143 <last_error+0x3>
     136:	c7 01       	movw	r24, r14
     138:	b6 01       	movw	r22, r12
     13a:	0e 94 f6 05 	call	0xbec	; 0xbec <__subsf3>
     13e:	4b 01       	movw	r8, r22
     140:	5c 01       	movw	r10, r24
     142:	60 93 3c 01 	sts	0x013C, r22	; 0x80013c <derivative>
     146:	70 93 3d 01 	sts	0x013D, r23	; 0x80013d <derivative+0x1>
     14a:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <derivative+0x2>
     14e:	90 93 3f 01 	sts	0x013F, r25	; 0x80013f <derivative+0x3>
	
	PIDOutput = (Kp * error) + (Ki * integral) + (Kd * derivative);
     152:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <Kp>
     156:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <Kp+0x1>
     15a:	40 91 0a 01 	lds	r20, 0x010A	; 0x80010a <Kp+0x2>
     15e:	50 91 0b 01 	lds	r21, 0x010B	; 0x80010b <Kp+0x3>
     162:	c7 01       	movw	r24, r14
     164:	b6 01       	movw	r22, r12
     166:	0e 94 c7 07 	call	0xf8e	; 0xf8e <__mulsf3>
     16a:	69 83       	std	Y+1, r22	; 0x01
     16c:	7a 83       	std	Y+2, r23	; 0x02
     16e:	8b 83       	std	Y+3, r24	; 0x03
     170:	9c 83       	std	Y+4, r25	; 0x04
     172:	20 91 30 01 	lds	r18, 0x0130	; 0x800130 <Ki>
     176:	30 91 31 01 	lds	r19, 0x0131	; 0x800131 <Ki+0x1>
     17a:	40 91 32 01 	lds	r20, 0x0132	; 0x800132 <Ki+0x2>
     17e:	50 91 33 01 	lds	r21, 0x0133	; 0x800133 <Ki+0x3>
     182:	c3 01       	movw	r24, r6
     184:	b2 01       	movw	r22, r4
     186:	0e 94 c7 07 	call	0xf8e	; 0xf8e <__mulsf3>
     18a:	9b 01       	movw	r18, r22
     18c:	ac 01       	movw	r20, r24
     18e:	69 81       	ldd	r22, Y+1	; 0x01
     190:	7a 81       	ldd	r23, Y+2	; 0x02
     192:	8b 81       	ldd	r24, Y+3	; 0x03
     194:	9c 81       	ldd	r25, Y+4	; 0x04
     196:	0e 94 f7 05 	call	0xbee	; 0xbee <__addsf3>
     19a:	2b 01       	movw	r4, r22
     19c:	3c 01       	movw	r6, r24
     19e:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <Kd>
     1a2:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <Kd+0x1>
     1a6:	40 91 06 01 	lds	r20, 0x0106	; 0x800106 <Kd+0x2>
     1aa:	50 91 07 01 	lds	r21, 0x0107	; 0x800107 <Kd+0x3>
     1ae:	c5 01       	movw	r24, r10
     1b0:	b4 01       	movw	r22, r8
     1b2:	0e 94 c7 07 	call	0xf8e	; 0xf8e <__mulsf3>
     1b6:	9b 01       	movw	r18, r22
     1b8:	ac 01       	movw	r20, r24
     1ba:	c3 01       	movw	r24, r6
     1bc:	b2 01       	movw	r22, r4
     1be:	0e 94 f7 05 	call	0xbee	; 0xbee <__addsf3>
     1c2:	4b 01       	movw	r8, r22
     1c4:	5c 01       	movw	r10, r24
     1c6:	60 93 34 01 	sts	0x0134, r22	; 0x800134 <PIDOutput>
     1ca:	70 93 35 01 	sts	0x0135, r23	; 0x800135 <PIDOutput+0x1>
     1ce:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <PIDOutput+0x2>
     1d2:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <PIDOutput+0x3>
	
	last_error = error;
     1d6:	c0 92 40 01 	sts	0x0140, r12	; 0x800140 <last_error>
     1da:	d0 92 41 01 	sts	0x0141, r13	; 0x800141 <last_error+0x1>
     1de:	e0 92 42 01 	sts	0x0142, r14	; 0x800142 <last_error+0x2>
     1e2:	f0 92 43 01 	sts	0x0143, r15	; 0x800143 <last_error+0x3>
	
	if(PIDOutput > 90){
     1e6:	20 e0       	ldi	r18, 0x00	; 0
     1e8:	30 e0       	ldi	r19, 0x00	; 0
     1ea:	44 eb       	ldi	r20, 0xB4	; 180
     1ec:	52 e4       	ldi	r21, 0x42	; 66
     1ee:	0e 94 c2 07 	call	0xf84	; 0xf84 <__gesf2>
     1f2:	18 16       	cp	r1, r24
     1f4:	6c f4       	brge	.+26     	; 0x210 <PIDCalculateOutput+0x16a>
		PIDOutput = 90;
     1f6:	80 e0       	ldi	r24, 0x00	; 0
     1f8:	90 e0       	ldi	r25, 0x00	; 0
     1fa:	a4 eb       	ldi	r26, 0xB4	; 180
     1fc:	b2 e4       	ldi	r27, 0x42	; 66
     1fe:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <PIDOutput>
     202:	90 93 35 01 	sts	0x0135, r25	; 0x800135 <PIDOutput+0x1>
     206:	a0 93 36 01 	sts	0x0136, r26	; 0x800136 <PIDOutput+0x2>
     20a:	b0 93 37 01 	sts	0x0137, r27	; 0x800137 <PIDOutput+0x3>
     20e:	16 c0       	rjmp	.+44     	; 0x23c <PIDCalculateOutput+0x196>
	}else if(PIDOutput < -90){
     210:	20 e0       	ldi	r18, 0x00	; 0
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	44 eb       	ldi	r20, 0xB4	; 180
     216:	52 ec       	ldi	r21, 0xC2	; 194
     218:	c5 01       	movw	r24, r10
     21a:	b4 01       	movw	r22, r8
     21c:	0e 94 63 06 	call	0xcc6	; 0xcc6 <__cmpsf2>
     220:	88 23       	and	r24, r24
     222:	64 f4       	brge	.+24     	; 0x23c <PIDCalculateOutput+0x196>
		PIDOutput = -90;
     224:	80 e0       	ldi	r24, 0x00	; 0
     226:	90 e0       	ldi	r25, 0x00	; 0
     228:	a4 eb       	ldi	r26, 0xB4	; 180
     22a:	b2 ec       	ldi	r27, 0xC2	; 194
     22c:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <PIDOutput>
     230:	90 93 35 01 	sts	0x0135, r25	; 0x800135 <PIDOutput+0x1>
     234:	a0 93 36 01 	sts	0x0136, r26	; 0x800136 <PIDOutput+0x2>
     238:	b0 93 37 01 	sts	0x0137, r27	; 0x800137 <PIDOutput+0x3>
	}
	
}
     23c:	0f 90       	pop	r0
     23e:	0f 90       	pop	r0
     240:	0f 90       	pop	r0
     242:	0f 90       	pop	r0
     244:	df 91       	pop	r29
     246:	cf 91       	pop	r28
     248:	ff 90       	pop	r15
     24a:	ef 90       	pop	r14
     24c:	df 90       	pop	r13
     24e:	cf 90       	pop	r12
     250:	bf 90       	pop	r11
     252:	af 90       	pop	r10
     254:	9f 90       	pop	r9
     256:	8f 90       	pop	r8
     258:	7f 90       	pop	r7
     25a:	6f 90       	pop	r6
     25c:	5f 90       	pop	r5
     25e:	4f 90       	pop	r4
     260:	08 95       	ret

00000262 <PIDspeedControl>:

void PIDspeedControl(float PIDOut){
     262:	4f 92       	push	r4
     264:	5f 92       	push	r5
     266:	6f 92       	push	r6
     268:	7f 92       	push	r7
     26a:	8f 92       	push	r8
     26c:	9f 92       	push	r9
     26e:	af 92       	push	r10
     270:	bf 92       	push	r11
     272:	cf 92       	push	r12
     274:	df 92       	push	r13
     276:	ef 92       	push	r14
     278:	ff 92       	push	r15
     27a:	cf 93       	push	r28
     27c:	6b 01       	movw	r12, r22
     27e:	7c 01       	movw	r14, r24
	
	if(abs(PIDOut) < LOW_ERROR_THRESHOLD){
     280:	0e 94 da 06 	call	0xdb4	; 0xdb4 <__fixsfsi>
     284:	9b 01       	movw	r18, r22
     286:	2f 5c       	subi	r18, 0xCF	; 207
     288:	3f 4f       	sbci	r19, 0xFF	; 255
     28a:	23 36       	cpi	r18, 0x63	; 99
     28c:	31 05       	cpc	r19, r1
     28e:	18 f5       	brcc	.+70     	; 0x2d6 <PIDspeedControl+0x74>
		if(duty_multiplier > 0){
     290:	80 90 00 01 	lds	r8, 0x0100	; 0x800100 <__data_start>
     294:	90 90 01 01 	lds	r9, 0x0101	; 0x800101 <__data_start+0x1>
     298:	a0 90 02 01 	lds	r10, 0x0102	; 0x800102 <__data_start+0x2>
     29c:	b0 90 03 01 	lds	r11, 0x0103	; 0x800103 <__data_start+0x3>
     2a0:	20 e0       	ldi	r18, 0x00	; 0
     2a2:	30 e0       	ldi	r19, 0x00	; 0
     2a4:	a9 01       	movw	r20, r18
     2a6:	c5 01       	movw	r24, r10
     2a8:	b4 01       	movw	r22, r8
     2aa:	0e 94 c2 07 	call	0xf84	; 0xf84 <__gesf2>
     2ae:	18 16       	cp	r1, r24
     2b0:	0c f0       	brlt	.+2      	; 0x2b4 <PIDspeedControl+0x52>
     2b2:	45 c0       	rjmp	.+138    	; 0x33e <PIDspeedControl+0xdc>
			duty_multiplier -= SPEED_INCR;
     2b4:	2d ec       	ldi	r18, 0xCD	; 205
     2b6:	3c ec       	ldi	r19, 0xCC	; 204
     2b8:	4c e4       	ldi	r20, 0x4C	; 76
     2ba:	5d e3       	ldi	r21, 0x3D	; 61
     2bc:	c5 01       	movw	r24, r10
     2be:	b4 01       	movw	r22, r8
     2c0:	0e 94 f6 05 	call	0xbec	; 0xbec <__subsf3>
     2c4:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
     2c8:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_start+0x1>
     2cc:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_start+0x2>
     2d0:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_start+0x3>
     2d4:	34 c0       	rjmp	.+104    	; 0x33e <PIDspeedControl+0xdc>
		}
	} else if(abs(PIDOut) < HIGH_ERROR_THRESHOLD){
     2d6:	6b 56       	subi	r22, 0x6B	; 107
     2d8:	7f 4f       	sbci	r23, 0xFF	; 255
     2da:	6b 32       	cpi	r22, 0x2B	; 43
     2dc:	71 40       	sbci	r23, 0x01	; 1
     2de:	18 f5       	brcc	.+70     	; 0x326 <PIDspeedControl+0xc4>
		if(duty_multiplier < TURN_SPEED){
     2e0:	80 90 00 01 	lds	r8, 0x0100	; 0x800100 <__data_start>
     2e4:	90 90 01 01 	lds	r9, 0x0101	; 0x800101 <__data_start+0x1>
     2e8:	a0 90 02 01 	lds	r10, 0x0102	; 0x800102 <__data_start+0x2>
     2ec:	b0 90 03 01 	lds	r11, 0x0103	; 0x800103 <__data_start+0x3>
     2f0:	20 e0       	ldi	r18, 0x00	; 0
     2f2:	30 e0       	ldi	r19, 0x00	; 0
     2f4:	40 ea       	ldi	r20, 0xA0	; 160
     2f6:	52 e4       	ldi	r21, 0x42	; 66
     2f8:	c5 01       	movw	r24, r10
     2fa:	b4 01       	movw	r22, r8
     2fc:	0e 94 63 06 	call	0xcc6	; 0xcc6 <__cmpsf2>
     300:	88 23       	and	r24, r24
     302:	ec f4       	brge	.+58     	; 0x33e <PIDspeedControl+0xdc>
			duty_multiplier += SPEED_DECR;
     304:	2d ec       	ldi	r18, 0xCD	; 205
     306:	3c ec       	ldi	r19, 0xCC	; 204
     308:	4c ec       	ldi	r20, 0xCC	; 204
     30a:	5d e3       	ldi	r21, 0x3D	; 61
     30c:	c5 01       	movw	r24, r10
     30e:	b4 01       	movw	r22, r8
     310:	0e 94 f7 05 	call	0xbee	; 0xbee <__addsf3>
     314:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
     318:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_start+0x1>
     31c:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_start+0x2>
     320:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_start+0x3>
     324:	0c c0       	rjmp	.+24     	; 0x33e <PIDspeedControl+0xdc>
		}
	} else {
		duty_multiplier = TURN_SPEED;
     326:	80 e0       	ldi	r24, 0x00	; 0
     328:	90 e0       	ldi	r25, 0x00	; 0
     32a:	a0 ea       	ldi	r26, 0xA0	; 160
     32c:	b2 e4       	ldi	r27, 0x42	; 66
     32e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
     332:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
     336:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
     33a:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
	}
	
	PID_to_duty_left = (((direction * -1 * (PIDOut / 90) * duty_multiplier) + (100 - duty_multiplier)));
     33e:	c0 91 1e 01 	lds	r28, 0x011E	; 0x80011e <direction>
     342:	20 e0       	ldi	r18, 0x00	; 0
     344:	30 e0       	ldi	r19, 0x00	; 0
     346:	44 eb       	ldi	r20, 0xB4	; 180
     348:	52 e4       	ldi	r21, 0x42	; 66
     34a:	c7 01       	movw	r24, r14
     34c:	b6 01       	movw	r22, r12
     34e:	0e 94 68 06 	call	0xcd0	; 0xcd0 <__divsf3>
     352:	2b 01       	movw	r4, r22
     354:	3c 01       	movw	r6, r24
     356:	c0 90 00 01 	lds	r12, 0x0100	; 0x800100 <__data_start>
     35a:	d0 90 01 01 	lds	r13, 0x0101	; 0x800101 <__data_start+0x1>
     35e:	e0 90 02 01 	lds	r14, 0x0102	; 0x800102 <__data_start+0x2>
     362:	f0 90 03 01 	lds	r15, 0x0103	; 0x800103 <__data_start+0x3>
     366:	a7 01       	movw	r20, r14
     368:	96 01       	movw	r18, r12
     36a:	60 e0       	ldi	r22, 0x00	; 0
     36c:	70 e0       	ldi	r23, 0x00	; 0
     36e:	88 ec       	ldi	r24, 0xC8	; 200
     370:	92 e4       	ldi	r25, 0x42	; 66
     372:	0e 94 f6 05 	call	0xbec	; 0xbec <__subsf3>
     376:	4b 01       	movw	r8, r22
     378:	5c 01       	movw	r10, r24
     37a:	8c 2f       	mov	r24, r28
     37c:	99 27       	eor	r25, r25
     37e:	81 95       	neg	r24
     380:	0c f4       	brge	.+2      	; 0x384 <PIDspeedControl+0x122>
     382:	90 95       	com	r25
     384:	bc 01       	movw	r22, r24
     386:	07 2e       	mov	r0, r23
     388:	00 0c       	add	r0, r0
     38a:	88 0b       	sbc	r24, r24
     38c:	99 0b       	sbc	r25, r25
     38e:	0e 94 12 07 	call	0xe24	; 0xe24 <__floatsisf>
     392:	a3 01       	movw	r20, r6
     394:	92 01       	movw	r18, r4
     396:	0e 94 c7 07 	call	0xf8e	; 0xf8e <__mulsf3>
     39a:	a7 01       	movw	r20, r14
     39c:	96 01       	movw	r18, r12
     39e:	0e 94 c7 07 	call	0xf8e	; 0xf8e <__mulsf3>
     3a2:	a5 01       	movw	r20, r10
     3a4:	94 01       	movw	r18, r8
     3a6:	0e 94 f7 05 	call	0xbee	; 0xbee <__addsf3>
     3aa:	60 93 2c 01 	sts	0x012C, r22	; 0x80012c <PID_to_duty_left>
     3ae:	70 93 2d 01 	sts	0x012D, r23	; 0x80012d <PID_to_duty_left+0x1>
     3b2:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <PID_to_duty_left+0x2>
     3b6:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <PID_to_duty_left+0x3>
	PID_to_duty_right = (((direction * (PIDOut / 90) * duty_multiplier) + (100 - duty_multiplier)));
     3ba:	6c 2f       	mov	r22, r28
     3bc:	cc 0f       	add	r28, r28
     3be:	77 0b       	sbc	r23, r23
     3c0:	88 0b       	sbc	r24, r24
     3c2:	99 0b       	sbc	r25, r25
     3c4:	0e 94 12 07 	call	0xe24	; 0xe24 <__floatsisf>
     3c8:	a3 01       	movw	r20, r6
     3ca:	92 01       	movw	r18, r4
     3cc:	0e 94 c7 07 	call	0xf8e	; 0xf8e <__mulsf3>
     3d0:	a7 01       	movw	r20, r14
     3d2:	96 01       	movw	r18, r12
     3d4:	0e 94 c7 07 	call	0xf8e	; 0xf8e <__mulsf3>
     3d8:	a5 01       	movw	r20, r10
     3da:	94 01       	movw	r18, r8
     3dc:	0e 94 f7 05 	call	0xbee	; 0xbee <__addsf3>
     3e0:	60 93 28 01 	sts	0x0128, r22	; 0x800128 <__data_end>
     3e4:	70 93 29 01 	sts	0x0129, r23	; 0x800129 <__data_end+0x1>
     3e8:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <__data_end+0x2>
     3ec:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <__data_end+0x3>
}
     3f0:	cf 91       	pop	r28
     3f2:	ff 90       	pop	r15
     3f4:	ef 90       	pop	r14
     3f6:	df 90       	pop	r13
     3f8:	cf 90       	pop	r12
     3fa:	bf 90       	pop	r11
     3fc:	af 90       	pop	r10
     3fe:	9f 90       	pop	r9
     400:	8f 90       	pop	r8
     402:	7f 90       	pop	r7
     404:	6f 90       	pop	r6
     406:	5f 90       	pop	r5
     408:	4f 90       	pop	r4
     40a:	08 95       	ret

0000040c <initialize_all>:

void initialize_all(void){
	sei();
     40c:	78 94       	sei
	// Configure Port D and B as outputs
	DDRD |= (1 << MOTOR_LEFT_PWM) | (1 << MOTOR_LEFT_CONTROL1) | (1 << MOTOR_LEFT_CONTROL2);
     40e:	8a b1       	in	r24, 0x0a	; 10
     410:	84 63       	ori	r24, 0x34	; 52
     412:	8a b9       	out	0x0a, r24	; 10
	DDRB |= (1 << MOTOR_RIGHT_PWM) | (1 << MOTOR_RIGHT_CONTROL1);
     414:	84 b1       	in	r24, 0x04	; 4
     416:	80 6c       	ori	r24, 0xC0	; 192
     418:	84 b9       	out	0x04, r24	; 4
	DDRB |= (1 << MOTOR_RIGHT_CONTROL2);
     41a:	20 9a       	sbi	0x04, 0	; 4
	
	uart_init();
     41c:	0e 94 b5 04 	call	0x96a	; 0x96a <uart_init>
	stdin = stdout = stderr = &uart_stream;
     420:	e7 ed       	ldi	r30, 0xD7	; 215
     422:	f1 e0       	ldi	r31, 0x01	; 1
     424:	80 e1       	ldi	r24, 0x10	; 16
     426:	91 e0       	ldi	r25, 0x01	; 1
     428:	95 83       	std	Z+5, r25	; 0x05
     42a:	84 83       	std	Z+4, r24	; 0x04
     42c:	93 83       	std	Z+3, r25	; 0x03
     42e:	82 83       	std	Z+2, r24	; 0x02
     430:	91 83       	std	Z+1, r25	; 0x01
     432:	80 83       	st	Z, r24
	
	// ADC Initializations
	ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);	// 128 prescaler
     434:	ea e7       	ldi	r30, 0x7A	; 122
     436:	f0 e0       	ldi	r31, 0x00	; 0
     438:	80 81       	ld	r24, Z
     43a:	87 60       	ori	r24, 0x07	; 7
     43c:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN);									// Enable ADC and ADC Conversion Complete Interrupt
     43e:	80 81       	ld	r24, Z
     440:	80 68       	ori	r24, 0x80	; 128
     442:	80 83       	st	Z, r24
	ADMUX |= (1 << REFS0);									// Change Reference voltage to AVcc with external cap
     444:	ec e7       	ldi	r30, 0x7C	; 124
     446:	f0 e0       	ldi	r31, 0x00	; 0
     448:	80 81       	ld	r24, Z
     44a:	80 64       	ori	r24, 0x40	; 64
     44c:	80 83       	st	Z, r24
	
	// Program timer that counts every 50ms
	OCR1A = program_timer_period;
     44e:	89 e6       	ldi	r24, 0x69	; 105
     450:	98 e1       	ldi	r25, 0x18	; 24
     452:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     456:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	TCCR1B |= (1 << CS11) | (1 << CS10);					// 64 prescaler
     45a:	e1 e8       	ldi	r30, 0x81	; 129
     45c:	f0 e0       	ldi	r31, 0x00	; 0
     45e:	80 81       	ld	r24, Z
     460:	83 60       	ori	r24, 0x03	; 3
     462:	80 83       	st	Z, r24
	TCCR1B |= (1 << WGM12);									// CTC Mode
     464:	80 81       	ld	r24, Z
     466:	88 60       	ori	r24, 0x08	; 8
     468:	80 83       	st	Z, r24
	TIMSK1 |= (1 << OCIE1A);								// Timer Match A Interrupt
     46a:	ef e6       	ldi	r30, 0x6F	; 111
     46c:	f0 e0       	ldi	r31, 0x00	; 0
     46e:	80 81       	ld	r24, Z
     470:	82 60       	ori	r24, 0x02	; 2
     472:	80 83       	st	Z, r24
     474:	08 95       	ret

00000476 <__vector_11>:
}

ISR(TIMER1_COMPA_vect){
     476:	1f 92       	push	r1
     478:	0f 92       	push	r0
     47a:	0f b6       	in	r0, 0x3f	; 63
     47c:	0f 92       	push	r0
     47e:	11 24       	eor	r1, r1
     480:	8f 93       	push	r24
	program_counter_one++;
     482:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <program_counter_one>
     486:	8f 5f       	subi	r24, 0xFF	; 255
     488:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <program_counter_one>
}
     48c:	8f 91       	pop	r24
     48e:	0f 90       	pop	r0
     490:	0f be       	out	0x3f, r0	; 63
     492:	0f 90       	pop	r0
     494:	1f 90       	pop	r1
     496:	18 95       	reti

00000498 <__vector_14>:

ISR(TIMER0_COMPA_vect){
     498:	1f 92       	push	r1
     49a:	0f 92       	push	r0
     49c:	0f b6       	in	r0, 0x3f	; 63
     49e:	0f 92       	push	r0
     4a0:	11 24       	eor	r1, r1
     4a2:	8f 93       	push	r24
	OCR0A = new_right_duty_cycle;
     4a4:	80 91 d4 01 	lds	r24, 0x01D4	; 0x8001d4 <new_right_duty_cycle>
     4a8:	87 bd       	out	0x27, r24	; 39
}
     4aa:	8f 91       	pop	r24
     4ac:	0f 90       	pop	r0
     4ae:	0f be       	out	0x3f, r0	; 63
     4b0:	0f 90       	pop	r0
     4b2:	1f 90       	pop	r1
     4b4:	18 95       	reti

000004b6 <__vector_15>:

ISR(TIMER0_COMPB_vect){
     4b6:	1f 92       	push	r1
     4b8:	0f 92       	push	r0
     4ba:	0f b6       	in	r0, 0x3f	; 63
     4bc:	0f 92       	push	r0
     4be:	11 24       	eor	r1, r1
     4c0:	8f 93       	push	r24
	OCR0B = new_left_duty_cycle;
     4c2:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <new_left_duty_cycle>
     4c6:	88 bd       	out	0x28, r24	; 40
}
     4c8:	8f 91       	pop	r24
     4ca:	0f 90       	pop	r0
     4cc:	0f be       	out	0x3f, r0	; 63
     4ce:	0f 90       	pop	r0
     4d0:	1f 90       	pop	r1
     4d2:	18 95       	reti

000004d4 <start_ADC_and_wait>:

void start_ADC_and_wait(void){
	ADCSRA |= (1 << ADSC);
     4d4:	ea e7       	ldi	r30, 0x7A	; 122
     4d6:	f0 e0       	ldi	r31, 0x00	; 0
     4d8:	80 81       	ld	r24, Z
     4da:	80 64       	ori	r24, 0x40	; 64
     4dc:	80 83       	st	Z, r24
	while((ADCSRA & (1 << ADSC)));
     4de:	80 81       	ld	r24, Z
     4e0:	86 fd       	sbrc	r24, 6
     4e2:	fd cf       	rjmp	.-6      	; 0x4de <start_ADC_and_wait+0xa>
}
     4e4:	08 95       	ret

000004e6 <SET_PWM_OUTPUT>:

void SET_PWM_OUTPUT(float pwm_duty_cycle, uint8_t channel){
	switch (channel)
     4e6:	45 30       	cpi	r20, 0x05	; 5
     4e8:	19 f0       	breq	.+6      	; 0x4f0 <SET_PWM_OUTPUT+0xa>
     4ea:	46 30       	cpi	r20, 0x06	; 6
     4ec:	39 f0       	breq	.+14     	; 0x4fc <SET_PWM_OUTPUT+0x16>
     4ee:	08 95       	ret
	{
		case MOTOR_LEFT_PWM:
		DDRD |= (1 << DDD5);							// Set PIND5 as Output
     4f0:	55 9a       	sbi	0x0a, 5	; 10
		new_left_duty_cycle = pwm_duty_cycle;			// Set Compare register for desired duty cycle
     4f2:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <__fixunssfsi>
     4f6:	60 93 9e 01 	sts	0x019E, r22	; 0x80019e <new_left_duty_cycle>
		break;
     4fa:	08 95       	ret
		case MOTOR_RIGHT_PWM:
		DDRD |= (1 << DDD6);							// Set PIND6 as Output
     4fc:	56 9a       	sbi	0x0a, 6	; 10
		new_right_duty_cycle = pwm_duty_cycle;			// Set Compare registers for desired duty cycle
     4fe:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <__fixunssfsi>
     502:	60 93 d4 01 	sts	0x01D4, r22	; 0x8001d4 <new_right_duty_cycle>
     506:	08 95       	ret

00000508 <READ_LINE_SENSOR>:
		default:
		break;
	}
}

void READ_LINE_SENSOR(void){
     508:	ef 92       	push	r14
     50a:	ff 92       	push	r15
     50c:	0f 93       	push	r16
     50e:	1f 93       	push	r17
     510:	cf 93       	push	r28
     512:	df 93       	push	r29
	
	ADMUX = LINE_LEFT_IN;
     514:	cc e7       	ldi	r28, 0x7C	; 124
     516:	d0 e0       	ldi	r29, 0x00	; 0
     518:	81 e0       	ldi	r24, 0x01	; 1
     51a:	88 83       	st	Y, r24
	ADMUX |= (1 << REFS0);
     51c:	88 81       	ld	r24, Y
     51e:	80 64       	ori	r24, 0x40	; 64
     520:	88 83       	st	Y, r24
	
	start_ADC_and_wait();
     522:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <start_ADC_and_wait>
	left_line = (ADCL);
     526:	0f 2e       	mov	r0, r31
     528:	f8 e7       	ldi	r31, 0x78	; 120
     52a:	ef 2e       	mov	r14, r31
     52c:	f1 2c       	mov	r15, r1
     52e:	f0 2d       	mov	r31, r0
     530:	f7 01       	movw	r30, r14
     532:	80 81       	ld	r24, Z
     534:	90 e0       	ldi	r25, 0x00	; 0
     536:	90 93 d3 01 	sts	0x01D3, r25	; 0x8001d3 <left_line+0x1>
     53a:	80 93 d2 01 	sts	0x01D2, r24	; 0x8001d2 <left_line>
	left_line |= (ADCH << 8);
     53e:	09 e7       	ldi	r16, 0x79	; 121
     540:	10 e0       	ldi	r17, 0x00	; 0
     542:	f8 01       	movw	r30, r16
     544:	20 81       	ld	r18, Z
     546:	92 2b       	or	r25, r18
     548:	90 93 d3 01 	sts	0x01D3, r25	; 0x8001d3 <left_line+0x1>
     54c:	80 93 d2 01 	sts	0x01D2, r24	; 0x8001d2 <left_line>
	
	ADMUX = LINE_CENTER_IN;
     550:	86 e0       	ldi	r24, 0x06	; 6
     552:	88 83       	st	Y, r24
	ADMUX |= (1 << REFS0);
     554:	88 81       	ld	r24, Y
     556:	80 64       	ori	r24, 0x40	; 64
     558:	88 83       	st	Y, r24
	
	start_ADC_and_wait();
     55a:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <start_ADC_and_wait>
	center_line = (ADCL);
     55e:	f7 01       	movw	r30, r14
     560:	80 81       	ld	r24, Z
     562:	90 e0       	ldi	r25, 0x00	; 0
     564:	90 93 d6 01 	sts	0x01D6, r25	; 0x8001d6 <center_line+0x1>
     568:	80 93 d5 01 	sts	0x01D5, r24	; 0x8001d5 <center_line>
	center_line |= (ADCH << 8);
     56c:	f8 01       	movw	r30, r16
     56e:	20 81       	ld	r18, Z
     570:	92 2b       	or	r25, r18
     572:	90 93 d6 01 	sts	0x01D6, r25	; 0x8001d6 <center_line+0x1>
     576:	80 93 d5 01 	sts	0x01D5, r24	; 0x8001d5 <center_line>

	ADMUX = LINE_RIGHT_IN;
     57a:	84 e0       	ldi	r24, 0x04	; 4
     57c:	88 83       	st	Y, r24
	ADMUX |= (1 << REFS0);
     57e:	88 81       	ld	r24, Y
     580:	80 64       	ori	r24, 0x40	; 64
     582:	88 83       	st	Y, r24
	
	start_ADC_and_wait();
     584:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <start_ADC_and_wait>
	right_line = (ADCL);
     588:	f7 01       	movw	r30, r14
     58a:	80 81       	ld	r24, Z
     58c:	90 e0       	ldi	r25, 0x00	; 0
     58e:	90 93 9d 01 	sts	0x019D, r25	; 0x80019d <right_line+0x1>
     592:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <right_line>
	right_line |= (ADCH << 8);
     596:	f8 01       	movw	r30, r16
     598:	20 81       	ld	r18, Z
     59a:	92 2b       	or	r25, r18
     59c:	90 93 9d 01 	sts	0x019D, r25	; 0x80019d <right_line+0x1>
     5a0:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <right_line>
}
     5a4:	df 91       	pop	r29
     5a6:	cf 91       	pop	r28
     5a8:	1f 91       	pop	r17
     5aa:	0f 91       	pop	r16
     5ac:	ff 90       	pop	r15
     5ae:	ef 90       	pop	r14
     5b0:	08 95       	ret

000005b2 <main>:


int main(void)
{
     5b2:	cf 93       	push	r28
     5b4:	df 93       	push	r29
     5b6:	00 d0       	rcall	.+0      	; 0x5b8 <main+0x6>
     5b8:	00 d0       	rcall	.+0      	; 0x5ba <main+0x8>
     5ba:	cd b7       	in	r28, 0x3d	; 61
     5bc:	de b7       	in	r29, 0x3e	; 62
    initialize_all();
     5be:	0e 94 06 02 	call	0x40c	; 0x40c <initialize_all>
	pwm_timer_init();
     5c2:	0e 94 9d 04 	call	0x93a	; 0x93a <pwm_timer_init>
	RIGHT_MOTOR_FWD();
     5c6:	0e 94 af 04 	call	0x95e	; 0x95e <RIGHT_MOTOR_FWD>
	LEFT_MOTOR_FWD();
     5ca:	0e 94 b2 04 	call	0x964	; 0x964 <LEFT_MOTOR_FWD>
	SET_PWM_OUTPUT(STRAIGHT_LINE_DUTY, MOTOR_RIGHT_PWM);
     5ce:	46 e0       	ldi	r20, 0x06	; 6
     5d0:	60 e0       	ldi	r22, 0x00	; 0
     5d2:	70 e0       	ldi	r23, 0x00	; 0
     5d4:	8f e7       	ldi	r24, 0x7F	; 127
     5d6:	93 e4       	ldi	r25, 0x43	; 67
     5d8:	0e 94 73 02 	call	0x4e6	; 0x4e6 <SET_PWM_OUTPUT>
	SET_PWM_OUTPUT(STRAIGHT_LINE_DUTY, MOTOR_LEFT_PWM);
     5dc:	45 e0       	ldi	r20, 0x05	; 5
     5de:	60 e0       	ldi	r22, 0x00	; 0
     5e0:	70 e0       	ldi	r23, 0x00	; 0
     5e2:	8f e7       	ldi	r24, 0x7F	; 127
     5e4:	93 e4       	ldi	r25, 0x43	; 67
     5e6:	0e 94 73 02 	call	0x4e6	; 0x4e6 <SET_PWM_OUTPUT>
	
    while(1){
		if (PID_FLAG){
     5ea:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <PID_FLAG>
     5ee:	88 23       	and	r24, r24
     5f0:	f1 f3       	breq	.-4      	; 0x5ee <main+0x3c>
			if (program_counter_one >= 1){
     5f2:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <program_counter_one>
     5f6:	88 23       	and	r24, r24
     5f8:	09 f4       	brne	.+2      	; 0x5fc <main+0x4a>
     5fa:	49 c0       	rjmp	.+146    	; 0x68e <main+0xdc>
				READ_LINE_SENSOR();
     5fc:	0e 94 84 02 	call	0x508	; 0x508 <READ_LINE_SENSOR>
				if(direction > 0 && left_line > 800){
     600:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <direction>
     604:	18 16       	cp	r1, r24
     606:	54 f4       	brge	.+20     	; 0x61c <main+0x6a>
     608:	20 91 d2 01 	lds	r18, 0x01D2	; 0x8001d2 <left_line>
     60c:	30 91 d3 01 	lds	r19, 0x01D3	; 0x8001d3 <left_line+0x1>
     610:	21 32       	cpi	r18, 0x21	; 33
     612:	33 40       	sbci	r19, 0x03	; 3
     614:	18 f0       	brcs	.+6      	; 0x61c <main+0x6a>
					direction *= -1;
     616:	81 95       	neg	r24
     618:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <direction>
				}
			
				if(direction < 0 && right_line > 800){
     61c:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <direction>
     620:	88 23       	and	r24, r24
     622:	54 f4       	brge	.+20     	; 0x638 <main+0x86>
     624:	20 91 9c 01 	lds	r18, 0x019C	; 0x80019c <right_line>
     628:	30 91 9d 01 	lds	r19, 0x019D	; 0x80019d <right_line+0x1>
     62c:	21 32       	cpi	r18, 0x21	; 33
     62e:	33 40       	sbci	r19, 0x03	; 3
     630:	18 f0       	brcs	.+6      	; 0x638 <main+0x86>
					direction *= -1;
     632:	81 95       	neg	r24
     634:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <direction>
				}
			
				PIDCalculateOutput(setpoint);
     638:	60 91 0c 01 	lds	r22, 0x010C	; 0x80010c <setpoint>
     63c:	70 91 0d 01 	lds	r23, 0x010D	; 0x80010d <setpoint+0x1>
     640:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <setpoint+0x2>
     644:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <setpoint+0x3>
     648:	0e 94 53 00 	call	0xa6	; 0xa6 <PIDCalculateOutput>
				PIDspeedControl(PIDOutput);
     64c:	60 91 34 01 	lds	r22, 0x0134	; 0x800134 <PIDOutput>
     650:	70 91 35 01 	lds	r23, 0x0135	; 0x800135 <PIDOutput+0x1>
     654:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <PIDOutput+0x2>
     658:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <PIDOutput+0x3>
     65c:	0e 94 31 01 	call	0x262	; 0x262 <PIDspeedControl>
				SET_PWM_OUTPUT(PID_to_duty_left, MOTOR_LEFT_PWM);
     660:	60 91 2c 01 	lds	r22, 0x012C	; 0x80012c <PID_to_duty_left>
     664:	70 91 2d 01 	lds	r23, 0x012D	; 0x80012d <PID_to_duty_left+0x1>
     668:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <PID_to_duty_left+0x2>
     66c:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <PID_to_duty_left+0x3>
     670:	45 e0       	ldi	r20, 0x05	; 5
     672:	0e 94 73 02 	call	0x4e6	; 0x4e6 <SET_PWM_OUTPUT>
				SET_PWM_OUTPUT(PID_to_duty_right, MOTOR_RIGHT_PWM);
     676:	60 91 28 01 	lds	r22, 0x0128	; 0x800128 <__data_end>
     67a:	70 91 29 01 	lds	r23, 0x0129	; 0x800129 <__data_end+0x1>
     67e:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <__data_end+0x2>
     682:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <__data_end+0x3>
     686:	46 e0       	ldi	r20, 0x06	; 6
     688:	0e 94 73 02 	call	0x4e6	; 0x4e6 <SET_PWM_OUTPUT>
     68c:	ae cf       	rjmp	.-164    	; 0x5ea <main+0x38>
		}else{
			if (program_counter_one >= 1){
     68e:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <program_counter_one>
     692:	88 23       	and	r24, r24
     694:	09 f4       	brne	.+2      	; 0x698 <main+0xe6>
     696:	a9 cf       	rjmp	.-174    	; 0x5ea <main+0x38>
				READ_LINE_SENSOR();
     698:	0e 94 84 02 	call	0x508	; 0x508 <READ_LINE_SENSOR>
				if (center_line > setpoint && left_line < setpoint && right_line < setpoint){
     69c:	60 91 d5 01 	lds	r22, 0x01D5	; 0x8001d5 <center_line>
     6a0:	70 91 d6 01 	lds	r23, 0x01D6	; 0x8001d6 <center_line+0x1>
     6a4:	80 e0       	ldi	r24, 0x00	; 0
     6a6:	90 e0       	ldi	r25, 0x00	; 0
     6a8:	0e 94 10 07 	call	0xe20	; 0xe20 <__floatunsisf>
     6ac:	2b 01       	movw	r4, r22
     6ae:	3c 01       	movw	r6, r24
     6b0:	c0 90 0c 01 	lds	r12, 0x010C	; 0x80010c <setpoint>
     6b4:	d0 90 0d 01 	lds	r13, 0x010D	; 0x80010d <setpoint+0x1>
     6b8:	e0 90 0e 01 	lds	r14, 0x010E	; 0x80010e <setpoint+0x2>
     6bc:	f0 90 0f 01 	lds	r15, 0x010F	; 0x80010f <setpoint+0x3>
     6c0:	a7 01       	movw	r20, r14
     6c2:	96 01       	movw	r18, r12
     6c4:	0e 94 c2 07 	call	0xf84	; 0xf84 <__gesf2>
     6c8:	18 16       	cp	r1, r24
     6ca:	b4 f5       	brge	.+108    	; 0x738 <main+0x186>
     6cc:	60 91 d2 01 	lds	r22, 0x01D2	; 0x8001d2 <left_line>
     6d0:	70 91 d3 01 	lds	r23, 0x01D3	; 0x8001d3 <left_line+0x1>
     6d4:	80 e0       	ldi	r24, 0x00	; 0
     6d6:	90 e0       	ldi	r25, 0x00	; 0
     6d8:	0e 94 10 07 	call	0xe20	; 0xe20 <__floatunsisf>
     6dc:	9b 01       	movw	r18, r22
     6de:	ac 01       	movw	r20, r24
     6e0:	c7 01       	movw	r24, r14
     6e2:	b6 01       	movw	r22, r12
     6e4:	0e 94 c2 07 	call	0xf84	; 0xf84 <__gesf2>
     6e8:	18 16       	cp	r1, r24
     6ea:	34 f5       	brge	.+76     	; 0x738 <main+0x186>
     6ec:	60 91 9c 01 	lds	r22, 0x019C	; 0x80019c <right_line>
     6f0:	70 91 9d 01 	lds	r23, 0x019D	; 0x80019d <right_line+0x1>
     6f4:	80 e0       	ldi	r24, 0x00	; 0
     6f6:	90 e0       	ldi	r25, 0x00	; 0
     6f8:	0e 94 10 07 	call	0xe20	; 0xe20 <__floatunsisf>
     6fc:	4b 01       	movw	r8, r22
     6fe:	5c 01       	movw	r10, r24
     700:	9b 01       	movw	r18, r22
     702:	ac 01       	movw	r20, r24
     704:	c7 01       	movw	r24, r14
     706:	b6 01       	movw	r22, r12
     708:	0e 94 c2 07 	call	0xf84	; 0xf84 <__gesf2>
     70c:	18 16       	cp	r1, r24
     70e:	0c f0       	brlt	.+2      	; 0x712 <main+0x160>
     710:	f6 c0       	rjmp	.+492    	; 0x8fe <main+0x34c>
					RIGHT_MOTOR_FWD();
     712:	0e 94 af 04 	call	0x95e	; 0x95e <RIGHT_MOTOR_FWD>
					LEFT_MOTOR_FWD();
     716:	0e 94 b2 04 	call	0x964	; 0x964 <LEFT_MOTOR_FWD>
					SET_PWM_OUTPUT(STRAIGHT_LINE_DUTY, MOTOR_LEFT_PWM);
     71a:	45 e0       	ldi	r20, 0x05	; 5
     71c:	60 e0       	ldi	r22, 0x00	; 0
     71e:	70 e0       	ldi	r23, 0x00	; 0
     720:	8f e7       	ldi	r24, 0x7F	; 127
     722:	93 e4       	ldi	r25, 0x43	; 67
     724:	0e 94 73 02 	call	0x4e6	; 0x4e6 <SET_PWM_OUTPUT>
					SET_PWM_OUTPUT(STRAIGHT_LINE_DUTY, MOTOR_RIGHT_PWM);
     728:	46 e0       	ldi	r20, 0x06	; 6
     72a:	60 e0       	ldi	r22, 0x00	; 0
     72c:	70 e0       	ldi	r23, 0x00	; 0
     72e:	8f e7       	ldi	r24, 0x7F	; 127
     730:	93 e4       	ldi	r25, 0x43	; 67
     732:	0e 94 73 02 	call	0x4e6	; 0x4e6 <SET_PWM_OUTPUT>
     736:	59 cf       	rjmp	.-334    	; 0x5ea <main+0x38>
				} else if (right_line > setpoint && left_line < setpoint && center_line < setpoint){
     738:	60 91 9c 01 	lds	r22, 0x019C	; 0x80019c <right_line>
     73c:	70 91 9d 01 	lds	r23, 0x019D	; 0x80019d <right_line+0x1>
     740:	80 e0       	ldi	r24, 0x00	; 0
     742:	90 e0       	ldi	r25, 0x00	; 0
     744:	0e 94 10 07 	call	0xe20	; 0xe20 <__floatunsisf>
     748:	4b 01       	movw	r8, r22
     74a:	5c 01       	movw	r10, r24
     74c:	9b 01       	movw	r18, r22
     74e:	ac 01       	movw	r20, r24
     750:	c7 01       	movw	r24, r14
     752:	b6 01       	movw	r22, r12
     754:	0e 94 63 06 	call	0xcc6	; 0xcc6 <__cmpsf2>
     758:	88 23       	and	r24, r24
     75a:	5c f5       	brge	.+86     	; 0x7b2 <main+0x200>
     75c:	60 91 d2 01 	lds	r22, 0x01D2	; 0x8001d2 <left_line>
     760:	70 91 d3 01 	lds	r23, 0x01D3	; 0x8001d3 <left_line+0x1>
     764:	80 e0       	ldi	r24, 0x00	; 0
     766:	90 e0       	ldi	r25, 0x00	; 0
     768:	0e 94 10 07 	call	0xe20	; 0xe20 <__floatunsisf>
     76c:	9b 01       	movw	r18, r22
     76e:	ac 01       	movw	r20, r24
     770:	c7 01       	movw	r24, r14
     772:	b6 01       	movw	r22, r12
     774:	0e 94 c2 07 	call	0xf84	; 0xf84 <__gesf2>
     778:	18 16       	cp	r1, r24
     77a:	dc f4       	brge	.+54     	; 0x7b2 <main+0x200>
     77c:	a7 01       	movw	r20, r14
     77e:	96 01       	movw	r18, r12
     780:	c3 01       	movw	r24, r6
     782:	b2 01       	movw	r22, r4
     784:	0e 94 63 06 	call	0xcc6	; 0xcc6 <__cmpsf2>
     788:	88 23       	and	r24, r24
     78a:	9c f4       	brge	.+38     	; 0x7b2 <main+0x200>
					RIGHT_MOTOR_FWD();
     78c:	0e 94 af 04 	call	0x95e	; 0x95e <RIGHT_MOTOR_FWD>
					SET_PWM_OUTPUT(HARD_TURN_LOW, MOTOR_RIGHT_PWM);
     790:	46 e0       	ldi	r20, 0x06	; 6
     792:	60 e0       	ldi	r22, 0x00	; 0
     794:	70 e0       	ldi	r23, 0x00	; 0
     796:	80 ea       	ldi	r24, 0xA0	; 160
     798:	92 e4       	ldi	r25, 0x42	; 66
     79a:	0e 94 73 02 	call	0x4e6	; 0x4e6 <SET_PWM_OUTPUT>
					LEFT_MOTOR_FWD();
     79e:	0e 94 b2 04 	call	0x964	; 0x964 <LEFT_MOTOR_FWD>
					SET_PWM_OUTPUT(HARD_TURN_HIGH, MOTOR_LEFT_PWM);
     7a2:	45 e0       	ldi	r20, 0x05	; 5
     7a4:	60 e0       	ldi	r22, 0x00	; 0
     7a6:	70 e0       	ldi	r23, 0x00	; 0
     7a8:	8a e2       	ldi	r24, 0x2A	; 42
     7aa:	93 e4       	ldi	r25, 0x43	; 67
     7ac:	0e 94 73 02 	call	0x4e6	; 0x4e6 <SET_PWM_OUTPUT>
     7b0:	1c cf       	rjmp	.-456    	; 0x5ea <main+0x38>
				}else if (left_line > setpoint && right_line < setpoint && center_line < setpoint){
     7b2:	60 91 d2 01 	lds	r22, 0x01D2	; 0x8001d2 <left_line>
     7b6:	70 91 d3 01 	lds	r23, 0x01D3	; 0x8001d3 <left_line+0x1>
     7ba:	80 e0       	ldi	r24, 0x00	; 0
     7bc:	90 e0       	ldi	r25, 0x00	; 0
     7be:	0e 94 10 07 	call	0xe20	; 0xe20 <__floatunsisf>
     7c2:	69 83       	std	Y+1, r22	; 0x01
     7c4:	7a 83       	std	Y+2, r23	; 0x02
     7c6:	8b 83       	std	Y+3, r24	; 0x03
     7c8:	9c 83       	std	Y+4, r25	; 0x04
     7ca:	9b 01       	movw	r18, r22
     7cc:	ac 01       	movw	r20, r24
     7ce:	c7 01       	movw	r24, r14
     7d0:	b6 01       	movw	r22, r12
     7d2:	0e 94 63 06 	call	0xcc6	; 0xcc6 <__cmpsf2>
     7d6:	88 23       	and	r24, r24
     7d8:	24 f5       	brge	.+72     	; 0x822 <main+0x270>
     7da:	a5 01       	movw	r20, r10
     7dc:	94 01       	movw	r18, r8
     7de:	c7 01       	movw	r24, r14
     7e0:	b6 01       	movw	r22, r12
     7e2:	0e 94 c2 07 	call	0xf84	; 0xf84 <__gesf2>
     7e6:	18 16       	cp	r1, r24
     7e8:	34 f5       	brge	.+76     	; 0x836 <main+0x284>
     7ea:	a7 01       	movw	r20, r14
     7ec:	96 01       	movw	r18, r12
     7ee:	c3 01       	movw	r24, r6
     7f0:	b2 01       	movw	r22, r4
     7f2:	0e 94 63 06 	call	0xcc6	; 0xcc6 <__cmpsf2>
     7f6:	88 23       	and	r24, r24
     7f8:	0c f0       	brlt	.+2      	; 0x7fc <main+0x24a>
     7fa:	95 c0       	rjmp	.+298    	; 0x926 <__stack+0x27>
					LEFT_MOTOR_FWD();
     7fc:	0e 94 b2 04 	call	0x964	; 0x964 <LEFT_MOTOR_FWD>
					SET_PWM_OUTPUT(HARD_TURN_LOW, MOTOR_LEFT_PWM);
     800:	45 e0       	ldi	r20, 0x05	; 5
     802:	60 e0       	ldi	r22, 0x00	; 0
     804:	70 e0       	ldi	r23, 0x00	; 0
     806:	80 ea       	ldi	r24, 0xA0	; 160
     808:	92 e4       	ldi	r25, 0x42	; 66
     80a:	0e 94 73 02 	call	0x4e6	; 0x4e6 <SET_PWM_OUTPUT>
					RIGHT_MOTOR_FWD();
     80e:	0e 94 af 04 	call	0x95e	; 0x95e <RIGHT_MOTOR_FWD>
					SET_PWM_OUTPUT(HARD_TURN_HIGH, MOTOR_RIGHT_PWM);
     812:	46 e0       	ldi	r20, 0x06	; 6
     814:	60 e0       	ldi	r22, 0x00	; 0
     816:	70 e0       	ldi	r23, 0x00	; 0
     818:	8a e2       	ldi	r24, 0x2A	; 42
     81a:	93 e4       	ldi	r25, 0x43	; 67
     81c:	0e 94 73 02 	call	0x4e6	; 0x4e6 <SET_PWM_OUTPUT>
     820:	e4 ce       	rjmp	.-568    	; 0x5ea <main+0x38>
				}else if (left_line > setpoint && center_line > setpoint && right_line < setpoint){
     822:	29 81       	ldd	r18, Y+1	; 0x01
     824:	3a 81       	ldd	r19, Y+2	; 0x02
     826:	4b 81       	ldd	r20, Y+3	; 0x03
     828:	5c 81       	ldd	r21, Y+4	; 0x04
     82a:	c7 01       	movw	r24, r14
     82c:	b6 01       	movw	r22, r12
     82e:	0e 94 63 06 	call	0xcc6	; 0xcc6 <__cmpsf2>
     832:	88 23       	and	r24, r24
     834:	24 f5       	brge	.+72     	; 0x87e <main+0x2cc>
     836:	a7 01       	movw	r20, r14
     838:	96 01       	movw	r18, r12
     83a:	c3 01       	movw	r24, r6
     83c:	b2 01       	movw	r22, r4
     83e:	0e 94 c2 07 	call	0xf84	; 0xf84 <__gesf2>
     842:	18 16       	cp	r1, r24
     844:	e4 f4       	brge	.+56     	; 0x87e <main+0x2cc>
     846:	a5 01       	movw	r20, r10
     848:	94 01       	movw	r18, r8
     84a:	c7 01       	movw	r24, r14
     84c:	b6 01       	movw	r22, r12
     84e:	0e 94 c2 07 	call	0xf84	; 0xf84 <__gesf2>
     852:	18 16       	cp	r1, r24
     854:	0c f0       	brlt	.+2      	; 0x858 <main+0x2a6>
     856:	5d c0       	rjmp	.+186    	; 0x912 <__stack+0x13>
					LEFT_MOTOR_FWD();
     858:	0e 94 b2 04 	call	0x964	; 0x964 <LEFT_MOTOR_FWD>
					SET_PWM_OUTPUT(SLIGHT_TURN_LOW, MOTOR_LEFT_PWM);
     85c:	45 e0       	ldi	r20, 0x05	; 5
     85e:	60 e0       	ldi	r22, 0x00	; 0
     860:	70 e0       	ldi	r23, 0x00	; 0
     862:	88 ec       	ldi	r24, 0xC8	; 200
     864:	92 e4       	ldi	r25, 0x42	; 66
     866:	0e 94 73 02 	call	0x4e6	; 0x4e6 <SET_PWM_OUTPUT>
					RIGHT_MOTOR_FWD();
     86a:	0e 94 af 04 	call	0x95e	; 0x95e <RIGHT_MOTOR_FWD>
					SET_PWM_OUTPUT(SLIGHT_TURN_HIGH, MOTOR_RIGHT_PWM); 
     86e:	46 e0       	ldi	r20, 0x06	; 6
     870:	60 e0       	ldi	r22, 0x00	; 0
     872:	70 e0       	ldi	r23, 0x00	; 0
     874:	84 e3       	ldi	r24, 0x34	; 52
     876:	93 e4       	ldi	r25, 0x43	; 67
     878:	0e 94 73 02 	call	0x4e6	; 0x4e6 <SET_PWM_OUTPUT>
     87c:	b6 ce       	rjmp	.-660    	; 0x5ea <main+0x38>
				}else if (right_line > setpoint && center_line > setpoint && left_line < setpoint){
     87e:	a5 01       	movw	r20, r10
     880:	94 01       	movw	r18, r8
     882:	c7 01       	movw	r24, r14
     884:	b6 01       	movw	r22, r12
     886:	0e 94 63 06 	call	0xcc6	; 0xcc6 <__cmpsf2>
     88a:	88 23       	and	r24, r24
     88c:	2c f5       	brge	.+74     	; 0x8d8 <main+0x326>
     88e:	a7 01       	movw	r20, r14
     890:	96 01       	movw	r18, r12
     892:	c3 01       	movw	r24, r6
     894:	b2 01       	movw	r22, r4
     896:	0e 94 c2 07 	call	0xf84	; 0xf84 <__gesf2>
     89a:	18 16       	cp	r1, r24
     89c:	ec f4       	brge	.+58     	; 0x8d8 <main+0x326>
     89e:	29 81       	ldd	r18, Y+1	; 0x01
     8a0:	3a 81       	ldd	r19, Y+2	; 0x02
     8a2:	4b 81       	ldd	r20, Y+3	; 0x03
     8a4:	5c 81       	ldd	r21, Y+4	; 0x04
     8a6:	c7 01       	movw	r24, r14
     8a8:	b6 01       	movw	r22, r12
     8aa:	0e 94 c2 07 	call	0xf84	; 0xf84 <__gesf2>
     8ae:	18 16       	cp	r1, r24
     8b0:	9c f4       	brge	.+38     	; 0x8d8 <main+0x326>
					RIGHT_MOTOR_FWD();
     8b2:	0e 94 af 04 	call	0x95e	; 0x95e <RIGHT_MOTOR_FWD>
					SET_PWM_OUTPUT(SLIGHT_TURN_LOW, MOTOR_RIGHT_PWM);
     8b6:	46 e0       	ldi	r20, 0x06	; 6
     8b8:	60 e0       	ldi	r22, 0x00	; 0
     8ba:	70 e0       	ldi	r23, 0x00	; 0
     8bc:	88 ec       	ldi	r24, 0xC8	; 200
     8be:	92 e4       	ldi	r25, 0x42	; 66
     8c0:	0e 94 73 02 	call	0x4e6	; 0x4e6 <SET_PWM_OUTPUT>
					LEFT_MOTOR_FWD();
     8c4:	0e 94 b2 04 	call	0x964	; 0x964 <LEFT_MOTOR_FWD>
					SET_PWM_OUTPUT(SLIGHT_TURN_HIGH, MOTOR_LEFT_PWM);  
     8c8:	45 e0       	ldi	r20, 0x05	; 5
     8ca:	60 e0       	ldi	r22, 0x00	; 0
     8cc:	70 e0       	ldi	r23, 0x00	; 0
     8ce:	84 e3       	ldi	r24, 0x34	; 52
     8d0:	93 e4       	ldi	r25, 0x43	; 67
     8d2:	0e 94 73 02 	call	0x4e6	; 0x4e6 <SET_PWM_OUTPUT>
     8d6:	89 ce       	rjmp	.-750    	; 0x5ea <main+0x38>
				}else{
					RIGHT_MOTOR_FWD();
     8d8:	0e 94 af 04 	call	0x95e	; 0x95e <RIGHT_MOTOR_FWD>
					SET_PWM_OUTPUT(STRAIGHT_LINE_DUTY, MOTOR_RIGHT_PWM);
     8dc:	46 e0       	ldi	r20, 0x06	; 6
     8de:	60 e0       	ldi	r22, 0x00	; 0
     8e0:	70 e0       	ldi	r23, 0x00	; 0
     8e2:	8f e7       	ldi	r24, 0x7F	; 127
     8e4:	93 e4       	ldi	r25, 0x43	; 67
     8e6:	0e 94 73 02 	call	0x4e6	; 0x4e6 <SET_PWM_OUTPUT>
					LEFT_MOTOR_FWD();
     8ea:	0e 94 b2 04 	call	0x964	; 0x964 <LEFT_MOTOR_FWD>
					SET_PWM_OUTPUT(STRAIGHT_LINE_DUTY, MOTOR_LEFT_PWM);
     8ee:	45 e0       	ldi	r20, 0x05	; 5
     8f0:	60 e0       	ldi	r22, 0x00	; 0
     8f2:	70 e0       	ldi	r23, 0x00	; 0
     8f4:	8f e7       	ldi	r24, 0x7F	; 127
     8f6:	93 e4       	ldi	r25, 0x43	; 67
     8f8:	0e 94 73 02 	call	0x4e6	; 0x4e6 <SET_PWM_OUTPUT>
     8fc:	76 ce       	rjmp	.-788    	; 0x5ea <main+0x38>
				if (center_line > setpoint && left_line < setpoint && right_line < setpoint){
					RIGHT_MOTOR_FWD();
					LEFT_MOTOR_FWD();
					SET_PWM_OUTPUT(STRAIGHT_LINE_DUTY, MOTOR_LEFT_PWM);
					SET_PWM_OUTPUT(STRAIGHT_LINE_DUTY, MOTOR_RIGHT_PWM);
				} else if (right_line > setpoint && left_line < setpoint && center_line < setpoint){
     8fe:	a5 01       	movw	r20, r10
     900:	94 01       	movw	r18, r8
     902:	c7 01       	movw	r24, r14
     904:	b6 01       	movw	r22, r12
     906:	0e 94 63 06 	call	0xcc6	; 0xcc6 <__cmpsf2>
     90a:	88 23       	and	r24, r24
     90c:	0c f4       	brge	.+2      	; 0x910 <__stack+0x11>
     90e:	36 cf       	rjmp	.-404    	; 0x77c <main+0x1ca>
     910:	50 cf       	rjmp	.-352    	; 0x7b2 <main+0x200>
				}else if (left_line > setpoint && center_line > setpoint && right_line < setpoint){
					LEFT_MOTOR_FWD();
					SET_PWM_OUTPUT(SLIGHT_TURN_LOW, MOTOR_LEFT_PWM);
					RIGHT_MOTOR_FWD();
					SET_PWM_OUTPUT(SLIGHT_TURN_HIGH, MOTOR_RIGHT_PWM); 
				}else if (right_line > setpoint && center_line > setpoint && left_line < setpoint){
     912:	a5 01       	movw	r20, r10
     914:	94 01       	movw	r18, r8
     916:	c7 01       	movw	r24, r14
     918:	b6 01       	movw	r22, r12
     91a:	0e 94 63 06 	call	0xcc6	; 0xcc6 <__cmpsf2>
     91e:	88 23       	and	r24, r24
     920:	0c f4       	brge	.+2      	; 0x924 <__stack+0x25>
     922:	bd cf       	rjmp	.-134    	; 0x89e <main+0x2ec>
     924:	d9 cf       	rjmp	.-78     	; 0x8d8 <main+0x326>
				}else if (left_line > setpoint && right_line < setpoint && center_line < setpoint){
					LEFT_MOTOR_FWD();
					SET_PWM_OUTPUT(HARD_TURN_LOW, MOTOR_LEFT_PWM);
					RIGHT_MOTOR_FWD();
					SET_PWM_OUTPUT(HARD_TURN_HIGH, MOTOR_RIGHT_PWM);
				}else if (left_line > setpoint && center_line > setpoint && right_line < setpoint){
     926:	a7 01       	movw	r20, r14
     928:	96 01       	movw	r18, r12
     92a:	c3 01       	movw	r24, r6
     92c:	b2 01       	movw	r22, r4
     92e:	0e 94 c2 07 	call	0xf84	; 0xf84 <__gesf2>
     932:	18 16       	cp	r1, r24
     934:	0c f0       	brlt	.+2      	; 0x938 <__stack+0x39>
     936:	a3 cf       	rjmp	.-186    	; 0x87e <main+0x2cc>
     938:	8f cf       	rjmp	.-226    	; 0x858 <main+0x2a6>

0000093a <pwm_timer_init>:
	TCCR0B |= (1 << CS01);									// Prescaler of 8 for 7.812kHz PWM signal
	TIMSK0 |= (1 << OCIE0A) | (1 << OCIE0B);				// Set Compare Match Interrupts for OC0A and OC0B
}

void pwm_timer_stop(void){
	TCCR0A &= ~(1 << COM0A1) | ~(1 << COM0A0);		// Disables PWM output for timer and enables normal port operation
     93a:	84 b5       	in	r24, 0x24	; 36
     93c:	80 68       	ori	r24, 0x80	; 128
     93e:	84 bd       	out	0x24, r24	; 36
     940:	84 b5       	in	r24, 0x24	; 36
     942:	80 62       	ori	r24, 0x20	; 32
     944:	84 bd       	out	0x24, r24	; 36
     946:	84 b5       	in	r24, 0x24	; 36
     948:	83 60       	ori	r24, 0x03	; 3
     94a:	84 bd       	out	0x24, r24	; 36
     94c:	85 b5       	in	r24, 0x25	; 37
     94e:	82 60       	ori	r24, 0x02	; 2
     950:	85 bd       	out	0x25, r24	; 37
     952:	ee e6       	ldi	r30, 0x6E	; 110
     954:	f0 e0       	ldi	r31, 0x00	; 0
     956:	80 81       	ld	r24, Z
     958:	86 60       	ori	r24, 0x06	; 6
     95a:	80 83       	st	Z, r24
     95c:	08 95       	ret

0000095e <RIGHT_MOTOR_FWD>:
}

void RIGHT_MOTOR_FWD(void){
	PORTD |= (1 << MOTOR_RIGHT_CONTROL1);			// Set IN1 to High according to motor driver datasheet
     95e:	5f 9a       	sbi	0x0b, 7	; 11
	PORTB &= ~(1 << MOTOR_RIGHT_CONTROL2);			// Set IN2 to Low according to motor driver datasheet
     960:	28 98       	cbi	0x05, 0	; 5
     962:	08 95       	ret

00000964 <LEFT_MOTOR_FWD>:
}

void LEFT_MOTOR_FWD(void){
	PORTD |= (1 << MOTOR_LEFT_CONTROL1);			// Set IN1 to High according to motor driver datasheet
     964:	5a 9a       	sbi	0x0b, 2	; 11
	PORTD &= ~(1 << MOTOR_LEFT_CONTROL2);			// Set IN2 To Low according to motor driver datasheet
     966:	5c 98       	cbi	0x0b, 4	; 11
     968:	08 95       	ret

0000096a <uart_init>:
{
#if F_CPU < 2000000UL && defined(U2X)
  UCSR0A = _BV(U2X);             /* improve baud rate error by using 2x clk */
  UBRR0L = (F_CPU / (8UL * UART_BAUD)) - 1;
#else
  UBRR0L = (F_CPU / (16UL * UART_BAUD)) - 1;
     96a:	87 e6       	ldi	r24, 0x67	; 103
     96c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
#endif
  UCSR0B = _BV(TXEN0) | _BV(RXEN0); /* tx/rx enable */
     970:	88 e1       	ldi	r24, 0x18	; 24
     972:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
     976:	08 95       	ret

00000978 <uart_putchar>:
 * Send character c down the UART Tx, wait until tx holding register
 * is empty.
 */
int
uart_putchar(char c, FILE *stream)
{
     978:	cf 93       	push	r28
     97a:	c8 2f       	mov	r28, r24

  if (c == '\a')
     97c:	87 30       	cpi	r24, 0x07	; 7
     97e:	69 f4       	brne	.+26     	; 0x99a <uart_putchar+0x22>
    {
      fputs("*ring*\n", stderr);
     980:	20 91 db 01 	lds	r18, 0x01DB	; 0x8001db <__iob+0x4>
     984:	30 91 dc 01 	lds	r19, 0x01DC	; 0x8001dc <__iob+0x5>
     988:	47 e0       	ldi	r20, 0x07	; 7
     98a:	50 e0       	ldi	r21, 0x00	; 0
     98c:	61 e0       	ldi	r22, 0x01	; 1
     98e:	70 e0       	ldi	r23, 0x00	; 0
     990:	8f e1       	ldi	r24, 0x1F	; 31
     992:	91 e0       	ldi	r25, 0x01	; 1
     994:	0e 94 34 08 	call	0x1068	; 0x1068 <fwrite>
      return 0;
     998:	0c c0       	rjmp	.+24     	; 0x9b2 <uart_putchar+0x3a>
    }

  if (c == '\n')
     99a:	8a 30       	cpi	r24, 0x0A	; 10
     99c:	19 f4       	brne	.+6      	; 0x9a4 <uart_putchar+0x2c>
    uart_putchar('\r', stream);
     99e:	8d e0       	ldi	r24, 0x0D	; 13
     9a0:	0e 94 bc 04 	call	0x978	; 0x978 <uart_putchar>
  loop_until_bit_is_set(UCSR0A, UDRE0);
     9a4:	e0 ec       	ldi	r30, 0xC0	; 192
     9a6:	f0 e0       	ldi	r31, 0x00	; 0
     9a8:	80 81       	ld	r24, Z
     9aa:	85 ff       	sbrs	r24, 5
     9ac:	fd cf       	rjmp	.-6      	; 0x9a8 <uart_putchar+0x30>
  UDR0 = c;
     9ae:	c0 93 c6 00 	sts	0x00C6, r28	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>

  return 0;
}
     9b2:	80 e0       	ldi	r24, 0x00	; 0
     9b4:	90 e0       	ldi	r25, 0x00	; 0
     9b6:	cf 91       	pop	r28
     9b8:	08 95       	ret

000009ba <uart_getchar>:
 * Successive calls to uart_getchar() will be satisfied from the
 * internal buffer until that buffer is emptied again.
 */
int
uart_getchar(FILE *stream)
{
     9ba:	6f 92       	push	r6
     9bc:	7f 92       	push	r7
     9be:	8f 92       	push	r8
     9c0:	9f 92       	push	r9
     9c2:	af 92       	push	r10
     9c4:	bf 92       	push	r11
     9c6:	cf 92       	push	r12
     9c8:	df 92       	push	r13
     9ca:	ef 92       	push	r14
     9cc:	ff 92       	push	r15
     9ce:	0f 93       	push	r16
     9d0:	1f 93       	push	r17
     9d2:	cf 93       	push	r28
     9d4:	df 93       	push	r29
  uint8_t c;
  char *cp, *cp2;
  static char b[RX_BUFSIZE];
  static char *rxp;

  if (rxp == 0)
     9d6:	20 91 9a 01 	lds	r18, 0x019A	; 0x80019a <rxp.1827>
     9da:	30 91 9b 01 	lds	r19, 0x019B	; 0x80019b <rxp.1827+0x1>
     9de:	23 2b       	or	r18, r19
     9e0:	09 f0       	breq	.+2      	; 0x9e4 <uart_getchar+0x2a>
     9e2:	da c0       	rjmp	.+436    	; 0xb98 <uart_getchar+0x1de>
     9e4:	8c 01       	movw	r16, r24
     9e6:	0f 2e       	mov	r0, r31
     9e8:	fa e4       	ldi	r31, 0x4A	; 74
     9ea:	8f 2e       	mov	r8, r31
     9ec:	f1 e0       	ldi	r31, 0x01	; 1
     9ee:	9f 2e       	mov	r9, r31
     9f0:	f0 2d       	mov	r31, r0
    for (cp = b;;)
      {
	loop_until_bit_is_set(UCSR0A, RXC0);
     9f2:	c0 ec       	ldi	r28, 0xC0	; 192
     9f4:	d0 e0       	ldi	r29, 0x00	; 0
	if (UCSR0A & _BV(FE0))
	  return _FDEV_EOF;
	if (UCSR0A & _BV(DOR0))
	  return _FDEV_ERR;
	c = UDR0;
     9f6:	0f 2e       	mov	r0, r31
     9f8:	f6 ec       	ldi	r31, 0xC6	; 198
     9fa:	cf 2e       	mov	r12, r31
     9fc:	d1 2c       	mov	r13, r1
     9fe:	f0 2d       	mov	r31, r0
     a00:	54 01       	movw	r10, r8
     a02:	0f 2e       	mov	r0, r31
     a04:	f9 e4       	ldi	r31, 0x49	; 73
     a06:	6f 2e       	mov	r6, r31
     a08:	f1 e0       	ldi	r31, 0x01	; 1
     a0a:	7f 2e       	mov	r7, r31
     a0c:	f0 2d       	mov	r31, r0
  static char *rxp;

  if (rxp == 0)
    for (cp = b;;)
      {
	loop_until_bit_is_set(UCSR0A, RXC0);
     a0e:	88 81       	ld	r24, Y
     a10:	88 23       	and	r24, r24
     a12:	ec f7       	brge	.-6      	; 0xa0e <uart_getchar+0x54>
	if (UCSR0A & _BV(FE0))
     a14:	88 81       	ld	r24, Y
     a16:	84 fd       	sbrc	r24, 4
     a18:	d2 c0       	rjmp	.+420    	; 0xbbe <uart_getchar+0x204>
	  return _FDEV_EOF;
	if (UCSR0A & _BV(DOR0))
     a1a:	88 81       	ld	r24, Y
     a1c:	83 fd       	sbrc	r24, 3
     a1e:	d2 c0       	rjmp	.+420    	; 0xbc4 <uart_getchar+0x20a>
	  return _FDEV_ERR;
	c = UDR0;
     a20:	f6 01       	movw	r30, r12
     a22:	80 81       	ld	r24, Z
	/* behaviour similar to Unix stty ICRNL */
	if (c == '\r')
     a24:	8d 30       	cpi	r24, 0x0D	; 13
     a26:	11 f0       	breq	.+4      	; 0xa2c <uart_getchar+0x72>
	  c = '\n';
	if (c == '\n')
     a28:	8a 30       	cpi	r24, 0x0A	; 10
     a2a:	69 f4       	brne	.+26     	; 0xa46 <uart_getchar+0x8c>
	  {
	    *cp = c;
     a2c:	8a e0       	ldi	r24, 0x0A	; 10
     a2e:	f4 01       	movw	r30, r8
     a30:	80 83       	st	Z, r24
	    uart_putchar(c, stream);
     a32:	b8 01       	movw	r22, r16
     a34:	0e 94 bc 04 	call	0x978	; 0x978 <uart_putchar>
	    rxp = b;
     a38:	8a e4       	ldi	r24, 0x4A	; 74
     a3a:	91 e0       	ldi	r25, 0x01	; 1
     a3c:	90 93 9b 01 	sts	0x019B, r25	; 0x80019b <rxp.1827+0x1>
     a40:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <rxp.1827>
	    break;
     a44:	a9 c0       	rjmp	.+338    	; 0xb98 <uart_getchar+0x1de>
	  }
	else if (c == '\t')
     a46:	89 30       	cpi	r24, 0x09	; 9
     a48:	39 f0       	breq	.+14     	; 0xa58 <uart_getchar+0x9e>
	  c = ' ';

	if ((c >= (uint8_t)' ' && c <= (uint8_t)'\x7e') ||
     a4a:	90 ee       	ldi	r25, 0xE0	; 224
     a4c:	98 0f       	add	r25, r24
     a4e:	9f 35       	cpi	r25, 0x5F	; 95
     a50:	20 f0       	brcs	.+8      	; 0xa5a <uart_getchar+0xa0>
     a52:	80 3a       	cpi	r24, 0xA0	; 160
     a54:	b8 f0       	brcs	.+46     	; 0xa84 <uart_getchar+0xca>
     a56:	01 c0       	rjmp	.+2      	; 0xa5a <uart_getchar+0xa0>
	    uart_putchar(c, stream);
	    rxp = b;
	    break;
	  }
	else if (c == '\t')
	  c = ' ';
     a58:	80 e2       	ldi	r24, 0x20	; 32

	if ((c >= (uint8_t)' ' && c <= (uint8_t)'\x7e') ||
	    c >= (uint8_t)'\xa0')
	  {
	    if (cp == b + RX_BUFSIZE - 1)
     a5a:	f9 e9       	ldi	r31, 0x99	; 153
     a5c:	8f 16       	cp	r8, r31
     a5e:	f1 e0       	ldi	r31, 0x01	; 1
     a60:	9f 06       	cpc	r9, r31
     a62:	29 f4       	brne	.+10     	; 0xa6e <uart_getchar+0xb4>
	      uart_putchar('\a', stream);
     a64:	b8 01       	movw	r22, r16
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	0e 94 bc 04 	call	0x978	; 0x978 <uart_putchar>
     a6c:	d0 cf       	rjmp	.-96     	; 0xa0e <uart_getchar+0x54>
	    else
	      {
		*cp++ = c;
     a6e:	74 01       	movw	r14, r8
     a70:	9f ef       	ldi	r25, 0xFF	; 255
     a72:	e9 1a       	sub	r14, r25
     a74:	f9 0a       	sbc	r15, r25
     a76:	f4 01       	movw	r30, r8
     a78:	80 83       	st	Z, r24
		uart_putchar(c, stream);
     a7a:	b8 01       	movw	r22, r16
     a7c:	0e 94 bc 04 	call	0x978	; 0x978 <uart_putchar>
	  {
	    if (cp == b + RX_BUFSIZE - 1)
	      uart_putchar('\a', stream);
	    else
	      {
		*cp++ = c;
     a80:	47 01       	movw	r8, r14
     a82:	c5 cf       	rjmp	.-118    	; 0xa0e <uart_getchar+0x54>
		uart_putchar(c, stream);
	      }
	    continue;
	  }

	switch (c)
     a84:	82 31       	cpi	r24, 0x12	; 18
     a86:	d1 f1       	breq	.+116    	; 0xafc <uart_getchar+0x142>
     a88:	30 f4       	brcc	.+12     	; 0xa96 <uart_getchar+0xdc>
     a8a:	83 30       	cpi	r24, 0x03	; 3
     a8c:	09 f4       	brne	.+2      	; 0xa90 <uart_getchar+0xd6>
     a8e:	9d c0       	rjmp	.+314    	; 0xbca <uart_getchar+0x210>
     a90:	88 30       	cpi	r24, 0x08	; 8
     a92:	e9 f0       	breq	.+58     	; 0xace <uart_getchar+0x114>
     a94:	bc cf       	rjmp	.-136    	; 0xa0e <uart_getchar+0x54>
     a96:	87 31       	cpi	r24, 0x17	; 23
     a98:	29 f0       	breq	.+10     	; 0xaa4 <uart_getchar+0xea>
     a9a:	8f 37       	cpi	r24, 0x7F	; 127
     a9c:	c1 f0       	breq	.+48     	; 0xace <uart_getchar+0x114>
     a9e:	85 31       	cpi	r24, 0x15	; 21
     aa0:	79 f0       	breq	.+30     	; 0xac0 <uart_getchar+0x106>
     aa2:	b5 cf       	rjmp	.-150    	; 0xa0e <uart_getchar+0x54>
		cp--;
	      }
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
     aa4:	fa e4       	ldi	r31, 0x4A	; 74
     aa6:	8f 16       	cp	r8, r31
     aa8:	f1 e0       	ldi	r31, 0x01	; 1
     aaa:	9f 06       	cpc	r9, r31
     aac:	09 f0       	breq	.+2      	; 0xab0 <uart_getchar+0xf6>
     aae:	08 f4       	brcc	.+2      	; 0xab2 <uart_getchar+0xf8>
     ab0:	ae cf       	rjmp	.-164    	; 0xa0e <uart_getchar+0x54>
     ab2:	f4 01       	movw	r30, r8
     ab4:	31 97       	sbiw	r30, 0x01	; 1
     ab6:	80 81       	ld	r24, Z
     ab8:	80 32       	cpi	r24, 0x20	; 32
     aba:	09 f0       	breq	.+2      	; 0xabe <uart_getchar+0x104>
     abc:	52 c0       	rjmp	.+164    	; 0xb62 <uart_getchar+0x1a8>
     abe:	a7 cf       	rjmp	.-178    	; 0xa0e <uart_getchar+0x54>
	    for (cp2 = b; cp2 < cp; cp2++)
	      uart_putchar(*cp2, stream);
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
     ac0:	8a e4       	ldi	r24, 0x4A	; 74
     ac2:	88 16       	cp	r8, r24
     ac4:	81 e0       	ldi	r24, 0x01	; 1
     ac6:	98 06       	cpc	r9, r24
     ac8:	09 f0       	breq	.+2      	; 0xacc <uart_getchar+0x112>
     aca:	98 f5       	brcc	.+102    	; 0xb32 <uart_getchar+0x178>
     acc:	a0 cf       	rjmp	.-192    	; 0xa0e <uart_getchar+0x54>
	  case 'c' & 0x1f:
	    return -1;

	  case '\b':
	  case '\x7f':
	    if (cp > b)
     ace:	9a e4       	ldi	r25, 0x4A	; 74
     ad0:	89 16       	cp	r8, r25
     ad2:	91 e0       	ldi	r25, 0x01	; 1
     ad4:	99 06       	cpc	r9, r25
     ad6:	09 f0       	breq	.+2      	; 0xada <uart_getchar+0x120>
     ad8:	08 f4       	brcc	.+2      	; 0xadc <uart_getchar+0x122>
     ada:	99 cf       	rjmp	.-206    	; 0xa0e <uart_getchar+0x54>
	      {
		uart_putchar('\b', stream);
     adc:	b8 01       	movw	r22, r16
     ade:	88 e0       	ldi	r24, 0x08	; 8
     ae0:	0e 94 bc 04 	call	0x978	; 0x978 <uart_putchar>
		uart_putchar(' ', stream);
     ae4:	b8 01       	movw	r22, r16
     ae6:	80 e2       	ldi	r24, 0x20	; 32
     ae8:	0e 94 bc 04 	call	0x978	; 0x978 <uart_putchar>
		uart_putchar('\b', stream);
     aec:	b8 01       	movw	r22, r16
     aee:	88 e0       	ldi	r24, 0x08	; 8
     af0:	0e 94 bc 04 	call	0x978	; 0x978 <uart_putchar>
		cp--;
     af4:	e1 e0       	ldi	r30, 0x01	; 1
     af6:	8e 1a       	sub	r8, r30
     af8:	91 08       	sbc	r9, r1
     afa:	89 cf       	rjmp	.-238    	; 0xa0e <uart_getchar+0x54>
	      }
	    break;

	  case 'r' & 0x1f:
	    uart_putchar('\r', stream);
     afc:	b8 01       	movw	r22, r16
     afe:	8d e0       	ldi	r24, 0x0D	; 13
     b00:	0e 94 bc 04 	call	0x978	; 0x978 <uart_putchar>
	    for (cp2 = b; cp2 < cp; cp2++)
     b04:	fa e4       	ldi	r31, 0x4A	; 74
     b06:	8f 16       	cp	r8, r31
     b08:	f1 e0       	ldi	r31, 0x01	; 1
     b0a:	9f 06       	cpc	r9, r31
     b0c:	09 f0       	breq	.+2      	; 0xb10 <uart_getchar+0x156>
     b0e:	08 f4       	brcc	.+2      	; 0xb12 <uart_getchar+0x158>
     b10:	7e cf       	rjmp	.-260    	; 0xa0e <uart_getchar+0x54>
     b12:	0f 2e       	mov	r0, r31
     b14:	fa e4       	ldi	r31, 0x4A	; 74
     b16:	ef 2e       	mov	r14, r31
     b18:	f1 e0       	ldi	r31, 0x01	; 1
     b1a:	ff 2e       	mov	r15, r31
     b1c:	f0 2d       	mov	r31, r0
	      uart_putchar(*cp2, stream);
     b1e:	b8 01       	movw	r22, r16
     b20:	f7 01       	movw	r30, r14
     b22:	81 91       	ld	r24, Z+
     b24:	7f 01       	movw	r14, r30
     b26:	0e 94 bc 04 	call	0x978	; 0x978 <uart_putchar>
	      }
	    break;

	  case 'r' & 0x1f:
	    uart_putchar('\r', stream);
	    for (cp2 = b; cp2 < cp; cp2++)
     b2a:	8e 14       	cp	r8, r14
     b2c:	9f 04       	cpc	r9, r15
     b2e:	b9 f7       	brne	.-18     	; 0xb1e <uart_getchar+0x164>
     b30:	6e cf       	rjmp	.-292    	; 0xa0e <uart_getchar+0x54>
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
	      {
		uart_putchar('\b', stream);
     b32:	b8 01       	movw	r22, r16
     b34:	88 e0       	ldi	r24, 0x08	; 8
     b36:	0e 94 bc 04 	call	0x978	; 0x978 <uart_putchar>
		uart_putchar(' ', stream);
     b3a:	b8 01       	movw	r22, r16
     b3c:	80 e2       	ldi	r24, 0x20	; 32
     b3e:	0e 94 bc 04 	call	0x978	; 0x978 <uart_putchar>
		uart_putchar('\b', stream);
     b42:	b8 01       	movw	r22, r16
     b44:	88 e0       	ldi	r24, 0x08	; 8
     b46:	0e 94 bc 04 	call	0x978	; 0x978 <uart_putchar>
		cp--;
     b4a:	f1 e0       	ldi	r31, 0x01	; 1
     b4c:	8f 1a       	sub	r8, r31
     b4e:	91 08       	sbc	r9, r1
	    for (cp2 = b; cp2 < cp; cp2++)
	      uart_putchar(*cp2, stream);
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
     b50:	8a e4       	ldi	r24, 0x4A	; 74
     b52:	88 16       	cp	r8, r24
     b54:	81 e0       	ldi	r24, 0x01	; 1
     b56:	98 06       	cpc	r9, r24
     b58:	61 f7       	brne	.-40     	; 0xb32 <uart_getchar+0x178>
     b5a:	f3 01       	movw	r30, r6
     b5c:	31 96       	adiw	r30, 0x01	; 1
     b5e:	4f 01       	movw	r8, r30
     b60:	56 cf       	rjmp	.-340    	; 0xa0e <uart_getchar+0x54>
     b62:	74 01       	movw	r14, r8
     b64:	f1 e0       	ldi	r31, 0x01	; 1
     b66:	ef 1a       	sub	r14, r31
     b68:	f1 08       	sbc	r15, r1
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
	      {
		uart_putchar('\b', stream);
     b6a:	b8 01       	movw	r22, r16
     b6c:	88 e0       	ldi	r24, 0x08	; 8
     b6e:	0e 94 bc 04 	call	0x978	; 0x978 <uart_putchar>
		uart_putchar(' ', stream);
     b72:	b8 01       	movw	r22, r16
     b74:	80 e2       	ldi	r24, 0x20	; 32
     b76:	0e 94 bc 04 	call	0x978	; 0x978 <uart_putchar>
		uart_putchar('\b', stream);
     b7a:	b8 01       	movw	r22, r16
     b7c:	88 e0       	ldi	r24, 0x08	; 8
     b7e:	0e 94 bc 04 	call	0x978	; 0x978 <uart_putchar>
		cp--;
     b82:	47 01       	movw	r8, r14
		cp--;
	      }
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
     b84:	ea 14       	cp	r14, r10
     b86:	fb 04       	cpc	r15, r11
     b88:	09 f4       	brne	.+2      	; 0xb8c <uart_getchar+0x1d2>
     b8a:	41 cf       	rjmp	.-382    	; 0xa0e <uart_getchar+0x54>
     b8c:	f7 01       	movw	r30, r14
     b8e:	82 91       	ld	r24, -Z
     b90:	7f 01       	movw	r14, r30
     b92:	80 32       	cpi	r24, 0x20	; 32
     b94:	51 f7       	brne	.-44     	; 0xb6a <uart_getchar+0x1b0>
     b96:	3b cf       	rjmp	.-394    	; 0xa0e <uart_getchar+0x54>
	      }
	    break;
	  }
      }

  c = *rxp++;
     b98:	e0 91 9a 01 	lds	r30, 0x019A	; 0x80019a <rxp.1827>
     b9c:	f0 91 9b 01 	lds	r31, 0x019B	; 0x80019b <rxp.1827+0x1>
     ba0:	cf 01       	movw	r24, r30
     ba2:	01 96       	adiw	r24, 0x01	; 1
     ba4:	90 93 9b 01 	sts	0x019B, r25	; 0x80019b <rxp.1827+0x1>
     ba8:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <rxp.1827>
     bac:	80 81       	ld	r24, Z
  if (c == '\n')
     bae:	8a 30       	cpi	r24, 0x0A	; 10
     bb0:	21 f4       	brne	.+8      	; 0xbba <uart_getchar+0x200>
    rxp = 0;
     bb2:	10 92 9b 01 	sts	0x019B, r1	; 0x80019b <rxp.1827+0x1>
     bb6:	10 92 9a 01 	sts	0x019A, r1	; 0x80019a <rxp.1827>

  return c;
     bba:	90 e0       	ldi	r25, 0x00	; 0
     bbc:	08 c0       	rjmp	.+16     	; 0xbce <uart_getchar+0x214>
  if (rxp == 0)
    for (cp = b;;)
      {
	loop_until_bit_is_set(UCSR0A, RXC0);
	if (UCSR0A & _BV(FE0))
	  return _FDEV_EOF;
     bbe:	8e ef       	ldi	r24, 0xFE	; 254
     bc0:	9f ef       	ldi	r25, 0xFF	; 255
     bc2:	05 c0       	rjmp	.+10     	; 0xbce <uart_getchar+0x214>
	if (UCSR0A & _BV(DOR0))
	  return _FDEV_ERR;
     bc4:	8f ef       	ldi	r24, 0xFF	; 255
     bc6:	9f ef       	ldi	r25, 0xFF	; 255
     bc8:	02 c0       	rjmp	.+4      	; 0xbce <uart_getchar+0x214>
	  }

	switch (c)
	  {
	  case 'c' & 0x1f:
	    return -1;
     bca:	8f ef       	ldi	r24, 0xFF	; 255
     bcc:	9f ef       	ldi	r25, 0xFF	; 255
  c = *rxp++;
  if (c == '\n')
    rxp = 0;

  return c;
}
     bce:	df 91       	pop	r29
     bd0:	cf 91       	pop	r28
     bd2:	1f 91       	pop	r17
     bd4:	0f 91       	pop	r16
     bd6:	ff 90       	pop	r15
     bd8:	ef 90       	pop	r14
     bda:	df 90       	pop	r13
     bdc:	cf 90       	pop	r12
     bde:	bf 90       	pop	r11
     be0:	af 90       	pop	r10
     be2:	9f 90       	pop	r9
     be4:	8f 90       	pop	r8
     be6:	7f 90       	pop	r7
     be8:	6f 90       	pop	r6
     bea:	08 95       	ret

00000bec <__subsf3>:
     bec:	50 58       	subi	r21, 0x80	; 128

00000bee <__addsf3>:
     bee:	bb 27       	eor	r27, r27
     bf0:	aa 27       	eor	r26, r26
     bf2:	0e 94 0e 06 	call	0xc1c	; 0xc1c <__addsf3x>
     bf6:	0c 94 88 07 	jmp	0xf10	; 0xf10 <__fp_round>
     bfa:	0e 94 7a 07 	call	0xef4	; 0xef4 <__fp_pscA>
     bfe:	38 f0       	brcs	.+14     	; 0xc0e <__addsf3+0x20>
     c00:	0e 94 81 07 	call	0xf02	; 0xf02 <__fp_pscB>
     c04:	20 f0       	brcs	.+8      	; 0xc0e <__addsf3+0x20>
     c06:	39 f4       	brne	.+14     	; 0xc16 <__addsf3+0x28>
     c08:	9f 3f       	cpi	r25, 0xFF	; 255
     c0a:	19 f4       	brne	.+6      	; 0xc12 <__addsf3+0x24>
     c0c:	26 f4       	brtc	.+8      	; 0xc16 <__addsf3+0x28>
     c0e:	0c 94 77 07 	jmp	0xeee	; 0xeee <__fp_nan>
     c12:	0e f4       	brtc	.+2      	; 0xc16 <__addsf3+0x28>
     c14:	e0 95       	com	r30
     c16:	e7 fb       	bst	r30, 7
     c18:	0c 94 71 07 	jmp	0xee2	; 0xee2 <__fp_inf>

00000c1c <__addsf3x>:
     c1c:	e9 2f       	mov	r30, r25
     c1e:	0e 94 99 07 	call	0xf32	; 0xf32 <__fp_split3>
     c22:	58 f3       	brcs	.-42     	; 0xbfa <__addsf3+0xc>
     c24:	ba 17       	cp	r27, r26
     c26:	62 07       	cpc	r22, r18
     c28:	73 07       	cpc	r23, r19
     c2a:	84 07       	cpc	r24, r20
     c2c:	95 07       	cpc	r25, r21
     c2e:	20 f0       	brcs	.+8      	; 0xc38 <__addsf3x+0x1c>
     c30:	79 f4       	brne	.+30     	; 0xc50 <__addsf3x+0x34>
     c32:	a6 f5       	brtc	.+104    	; 0xc9c <__addsf3x+0x80>
     c34:	0c 94 bb 07 	jmp	0xf76	; 0xf76 <__fp_zero>
     c38:	0e f4       	brtc	.+2      	; 0xc3c <__addsf3x+0x20>
     c3a:	e0 95       	com	r30
     c3c:	0b 2e       	mov	r0, r27
     c3e:	ba 2f       	mov	r27, r26
     c40:	a0 2d       	mov	r26, r0
     c42:	0b 01       	movw	r0, r22
     c44:	b9 01       	movw	r22, r18
     c46:	90 01       	movw	r18, r0
     c48:	0c 01       	movw	r0, r24
     c4a:	ca 01       	movw	r24, r20
     c4c:	a0 01       	movw	r20, r0
     c4e:	11 24       	eor	r1, r1
     c50:	ff 27       	eor	r31, r31
     c52:	59 1b       	sub	r21, r25
     c54:	99 f0       	breq	.+38     	; 0xc7c <__addsf3x+0x60>
     c56:	59 3f       	cpi	r21, 0xF9	; 249
     c58:	50 f4       	brcc	.+20     	; 0xc6e <__addsf3x+0x52>
     c5a:	50 3e       	cpi	r21, 0xE0	; 224
     c5c:	68 f1       	brcs	.+90     	; 0xcb8 <__addsf3x+0x9c>
     c5e:	1a 16       	cp	r1, r26
     c60:	f0 40       	sbci	r31, 0x00	; 0
     c62:	a2 2f       	mov	r26, r18
     c64:	23 2f       	mov	r18, r19
     c66:	34 2f       	mov	r19, r20
     c68:	44 27       	eor	r20, r20
     c6a:	58 5f       	subi	r21, 0xF8	; 248
     c6c:	f3 cf       	rjmp	.-26     	; 0xc54 <__addsf3x+0x38>
     c6e:	46 95       	lsr	r20
     c70:	37 95       	ror	r19
     c72:	27 95       	ror	r18
     c74:	a7 95       	ror	r26
     c76:	f0 40       	sbci	r31, 0x00	; 0
     c78:	53 95       	inc	r21
     c7a:	c9 f7       	brne	.-14     	; 0xc6e <__addsf3x+0x52>
     c7c:	7e f4       	brtc	.+30     	; 0xc9c <__addsf3x+0x80>
     c7e:	1f 16       	cp	r1, r31
     c80:	ba 0b       	sbc	r27, r26
     c82:	62 0b       	sbc	r22, r18
     c84:	73 0b       	sbc	r23, r19
     c86:	84 0b       	sbc	r24, r20
     c88:	ba f0       	brmi	.+46     	; 0xcb8 <__addsf3x+0x9c>
     c8a:	91 50       	subi	r25, 0x01	; 1
     c8c:	a1 f0       	breq	.+40     	; 0xcb6 <__addsf3x+0x9a>
     c8e:	ff 0f       	add	r31, r31
     c90:	bb 1f       	adc	r27, r27
     c92:	66 1f       	adc	r22, r22
     c94:	77 1f       	adc	r23, r23
     c96:	88 1f       	adc	r24, r24
     c98:	c2 f7       	brpl	.-16     	; 0xc8a <__addsf3x+0x6e>
     c9a:	0e c0       	rjmp	.+28     	; 0xcb8 <__addsf3x+0x9c>
     c9c:	ba 0f       	add	r27, r26
     c9e:	62 1f       	adc	r22, r18
     ca0:	73 1f       	adc	r23, r19
     ca2:	84 1f       	adc	r24, r20
     ca4:	48 f4       	brcc	.+18     	; 0xcb8 <__addsf3x+0x9c>
     ca6:	87 95       	ror	r24
     ca8:	77 95       	ror	r23
     caa:	67 95       	ror	r22
     cac:	b7 95       	ror	r27
     cae:	f7 95       	ror	r31
     cb0:	9e 3f       	cpi	r25, 0xFE	; 254
     cb2:	08 f0       	brcs	.+2      	; 0xcb6 <__addsf3x+0x9a>
     cb4:	b0 cf       	rjmp	.-160    	; 0xc16 <__addsf3+0x28>
     cb6:	93 95       	inc	r25
     cb8:	88 0f       	add	r24, r24
     cba:	08 f0       	brcs	.+2      	; 0xcbe <__addsf3x+0xa2>
     cbc:	99 27       	eor	r25, r25
     cbe:	ee 0f       	add	r30, r30
     cc0:	97 95       	ror	r25
     cc2:	87 95       	ror	r24
     cc4:	08 95       	ret

00000cc6 <__cmpsf2>:
     cc6:	0e 94 4d 07 	call	0xe9a	; 0xe9a <__fp_cmp>
     cca:	08 f4       	brcc	.+2      	; 0xcce <__cmpsf2+0x8>
     ccc:	81 e0       	ldi	r24, 0x01	; 1
     cce:	08 95       	ret

00000cd0 <__divsf3>:
     cd0:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <__divsf3x>
     cd4:	0c 94 88 07 	jmp	0xf10	; 0xf10 <__fp_round>
     cd8:	0e 94 81 07 	call	0xf02	; 0xf02 <__fp_pscB>
     cdc:	58 f0       	brcs	.+22     	; 0xcf4 <__divsf3+0x24>
     cde:	0e 94 7a 07 	call	0xef4	; 0xef4 <__fp_pscA>
     ce2:	40 f0       	brcs	.+16     	; 0xcf4 <__divsf3+0x24>
     ce4:	29 f4       	brne	.+10     	; 0xcf0 <__divsf3+0x20>
     ce6:	5f 3f       	cpi	r21, 0xFF	; 255
     ce8:	29 f0       	breq	.+10     	; 0xcf4 <__divsf3+0x24>
     cea:	0c 94 71 07 	jmp	0xee2	; 0xee2 <__fp_inf>
     cee:	51 11       	cpse	r21, r1
     cf0:	0c 94 bc 07 	jmp	0xf78	; 0xf78 <__fp_szero>
     cf4:	0c 94 77 07 	jmp	0xeee	; 0xeee <__fp_nan>

00000cf8 <__divsf3x>:
     cf8:	0e 94 99 07 	call	0xf32	; 0xf32 <__fp_split3>
     cfc:	68 f3       	brcs	.-38     	; 0xcd8 <__divsf3+0x8>

00000cfe <__divsf3_pse>:
     cfe:	99 23       	and	r25, r25
     d00:	b1 f3       	breq	.-20     	; 0xcee <__divsf3+0x1e>
     d02:	55 23       	and	r21, r21
     d04:	91 f3       	breq	.-28     	; 0xcea <__divsf3+0x1a>
     d06:	95 1b       	sub	r25, r21
     d08:	55 0b       	sbc	r21, r21
     d0a:	bb 27       	eor	r27, r27
     d0c:	aa 27       	eor	r26, r26
     d0e:	62 17       	cp	r22, r18
     d10:	73 07       	cpc	r23, r19
     d12:	84 07       	cpc	r24, r20
     d14:	38 f0       	brcs	.+14     	; 0xd24 <__divsf3_pse+0x26>
     d16:	9f 5f       	subi	r25, 0xFF	; 255
     d18:	5f 4f       	sbci	r21, 0xFF	; 255
     d1a:	22 0f       	add	r18, r18
     d1c:	33 1f       	adc	r19, r19
     d1e:	44 1f       	adc	r20, r20
     d20:	aa 1f       	adc	r26, r26
     d22:	a9 f3       	breq	.-22     	; 0xd0e <__divsf3_pse+0x10>
     d24:	35 d0       	rcall	.+106    	; 0xd90 <__divsf3_pse+0x92>
     d26:	0e 2e       	mov	r0, r30
     d28:	3a f0       	brmi	.+14     	; 0xd38 <__divsf3_pse+0x3a>
     d2a:	e0 e8       	ldi	r30, 0x80	; 128
     d2c:	32 d0       	rcall	.+100    	; 0xd92 <__divsf3_pse+0x94>
     d2e:	91 50       	subi	r25, 0x01	; 1
     d30:	50 40       	sbci	r21, 0x00	; 0
     d32:	e6 95       	lsr	r30
     d34:	00 1c       	adc	r0, r0
     d36:	ca f7       	brpl	.-14     	; 0xd2a <__divsf3_pse+0x2c>
     d38:	2b d0       	rcall	.+86     	; 0xd90 <__divsf3_pse+0x92>
     d3a:	fe 2f       	mov	r31, r30
     d3c:	29 d0       	rcall	.+82     	; 0xd90 <__divsf3_pse+0x92>
     d3e:	66 0f       	add	r22, r22
     d40:	77 1f       	adc	r23, r23
     d42:	88 1f       	adc	r24, r24
     d44:	bb 1f       	adc	r27, r27
     d46:	26 17       	cp	r18, r22
     d48:	37 07       	cpc	r19, r23
     d4a:	48 07       	cpc	r20, r24
     d4c:	ab 07       	cpc	r26, r27
     d4e:	b0 e8       	ldi	r27, 0x80	; 128
     d50:	09 f0       	breq	.+2      	; 0xd54 <__divsf3_pse+0x56>
     d52:	bb 0b       	sbc	r27, r27
     d54:	80 2d       	mov	r24, r0
     d56:	bf 01       	movw	r22, r30
     d58:	ff 27       	eor	r31, r31
     d5a:	93 58       	subi	r25, 0x83	; 131
     d5c:	5f 4f       	sbci	r21, 0xFF	; 255
     d5e:	3a f0       	brmi	.+14     	; 0xd6e <__divsf3_pse+0x70>
     d60:	9e 3f       	cpi	r25, 0xFE	; 254
     d62:	51 05       	cpc	r21, r1
     d64:	78 f0       	brcs	.+30     	; 0xd84 <__divsf3_pse+0x86>
     d66:	0c 94 71 07 	jmp	0xee2	; 0xee2 <__fp_inf>
     d6a:	0c 94 bc 07 	jmp	0xf78	; 0xf78 <__fp_szero>
     d6e:	5f 3f       	cpi	r21, 0xFF	; 255
     d70:	e4 f3       	brlt	.-8      	; 0xd6a <__divsf3_pse+0x6c>
     d72:	98 3e       	cpi	r25, 0xE8	; 232
     d74:	d4 f3       	brlt	.-12     	; 0xd6a <__divsf3_pse+0x6c>
     d76:	86 95       	lsr	r24
     d78:	77 95       	ror	r23
     d7a:	67 95       	ror	r22
     d7c:	b7 95       	ror	r27
     d7e:	f7 95       	ror	r31
     d80:	9f 5f       	subi	r25, 0xFF	; 255
     d82:	c9 f7       	brne	.-14     	; 0xd76 <__divsf3_pse+0x78>
     d84:	88 0f       	add	r24, r24
     d86:	91 1d       	adc	r25, r1
     d88:	96 95       	lsr	r25
     d8a:	87 95       	ror	r24
     d8c:	97 f9       	bld	r25, 7
     d8e:	08 95       	ret
     d90:	e1 e0       	ldi	r30, 0x01	; 1
     d92:	66 0f       	add	r22, r22
     d94:	77 1f       	adc	r23, r23
     d96:	88 1f       	adc	r24, r24
     d98:	bb 1f       	adc	r27, r27
     d9a:	62 17       	cp	r22, r18
     d9c:	73 07       	cpc	r23, r19
     d9e:	84 07       	cpc	r24, r20
     da0:	ba 07       	cpc	r27, r26
     da2:	20 f0       	brcs	.+8      	; 0xdac <__divsf3_pse+0xae>
     da4:	62 1b       	sub	r22, r18
     da6:	73 0b       	sbc	r23, r19
     da8:	84 0b       	sbc	r24, r20
     daa:	ba 0b       	sbc	r27, r26
     dac:	ee 1f       	adc	r30, r30
     dae:	88 f7       	brcc	.-30     	; 0xd92 <__divsf3_pse+0x94>
     db0:	e0 95       	com	r30
     db2:	08 95       	ret

00000db4 <__fixsfsi>:
     db4:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <__fixunssfsi>
     db8:	68 94       	set
     dba:	b1 11       	cpse	r27, r1
     dbc:	0c 94 bc 07 	jmp	0xf78	; 0xf78 <__fp_szero>
     dc0:	08 95       	ret

00000dc2 <__fixunssfsi>:
     dc2:	0e 94 a1 07 	call	0xf42	; 0xf42 <__fp_splitA>
     dc6:	88 f0       	brcs	.+34     	; 0xdea <__fixunssfsi+0x28>
     dc8:	9f 57       	subi	r25, 0x7F	; 127
     dca:	98 f0       	brcs	.+38     	; 0xdf2 <__fixunssfsi+0x30>
     dcc:	b9 2f       	mov	r27, r25
     dce:	99 27       	eor	r25, r25
     dd0:	b7 51       	subi	r27, 0x17	; 23
     dd2:	b0 f0       	brcs	.+44     	; 0xe00 <__fixunssfsi+0x3e>
     dd4:	e1 f0       	breq	.+56     	; 0xe0e <__fixunssfsi+0x4c>
     dd6:	66 0f       	add	r22, r22
     dd8:	77 1f       	adc	r23, r23
     dda:	88 1f       	adc	r24, r24
     ddc:	99 1f       	adc	r25, r25
     dde:	1a f0       	brmi	.+6      	; 0xde6 <__fixunssfsi+0x24>
     de0:	ba 95       	dec	r27
     de2:	c9 f7       	brne	.-14     	; 0xdd6 <__fixunssfsi+0x14>
     de4:	14 c0       	rjmp	.+40     	; 0xe0e <__fixunssfsi+0x4c>
     de6:	b1 30       	cpi	r27, 0x01	; 1
     de8:	91 f0       	breq	.+36     	; 0xe0e <__fixunssfsi+0x4c>
     dea:	0e 94 bb 07 	call	0xf76	; 0xf76 <__fp_zero>
     dee:	b1 e0       	ldi	r27, 0x01	; 1
     df0:	08 95       	ret
     df2:	0c 94 bb 07 	jmp	0xf76	; 0xf76 <__fp_zero>
     df6:	67 2f       	mov	r22, r23
     df8:	78 2f       	mov	r23, r24
     dfa:	88 27       	eor	r24, r24
     dfc:	b8 5f       	subi	r27, 0xF8	; 248
     dfe:	39 f0       	breq	.+14     	; 0xe0e <__fixunssfsi+0x4c>
     e00:	b9 3f       	cpi	r27, 0xF9	; 249
     e02:	cc f3       	brlt	.-14     	; 0xdf6 <__fixunssfsi+0x34>
     e04:	86 95       	lsr	r24
     e06:	77 95       	ror	r23
     e08:	67 95       	ror	r22
     e0a:	b3 95       	inc	r27
     e0c:	d9 f7       	brne	.-10     	; 0xe04 <__fixunssfsi+0x42>
     e0e:	3e f4       	brtc	.+14     	; 0xe1e <__fixunssfsi+0x5c>
     e10:	90 95       	com	r25
     e12:	80 95       	com	r24
     e14:	70 95       	com	r23
     e16:	61 95       	neg	r22
     e18:	7f 4f       	sbci	r23, 0xFF	; 255
     e1a:	8f 4f       	sbci	r24, 0xFF	; 255
     e1c:	9f 4f       	sbci	r25, 0xFF	; 255
     e1e:	08 95       	ret

00000e20 <__floatunsisf>:
     e20:	e8 94       	clt
     e22:	09 c0       	rjmp	.+18     	; 0xe36 <__floatsisf+0x12>

00000e24 <__floatsisf>:
     e24:	97 fb       	bst	r25, 7
     e26:	3e f4       	brtc	.+14     	; 0xe36 <__floatsisf+0x12>
     e28:	90 95       	com	r25
     e2a:	80 95       	com	r24
     e2c:	70 95       	com	r23
     e2e:	61 95       	neg	r22
     e30:	7f 4f       	sbci	r23, 0xFF	; 255
     e32:	8f 4f       	sbci	r24, 0xFF	; 255
     e34:	9f 4f       	sbci	r25, 0xFF	; 255
     e36:	99 23       	and	r25, r25
     e38:	a9 f0       	breq	.+42     	; 0xe64 <__floatsisf+0x40>
     e3a:	f9 2f       	mov	r31, r25
     e3c:	96 e9       	ldi	r25, 0x96	; 150
     e3e:	bb 27       	eor	r27, r27
     e40:	93 95       	inc	r25
     e42:	f6 95       	lsr	r31
     e44:	87 95       	ror	r24
     e46:	77 95       	ror	r23
     e48:	67 95       	ror	r22
     e4a:	b7 95       	ror	r27
     e4c:	f1 11       	cpse	r31, r1
     e4e:	f8 cf       	rjmp	.-16     	; 0xe40 <__floatsisf+0x1c>
     e50:	fa f4       	brpl	.+62     	; 0xe90 <__floatsisf+0x6c>
     e52:	bb 0f       	add	r27, r27
     e54:	11 f4       	brne	.+4      	; 0xe5a <__floatsisf+0x36>
     e56:	60 ff       	sbrs	r22, 0
     e58:	1b c0       	rjmp	.+54     	; 0xe90 <__floatsisf+0x6c>
     e5a:	6f 5f       	subi	r22, 0xFF	; 255
     e5c:	7f 4f       	sbci	r23, 0xFF	; 255
     e5e:	8f 4f       	sbci	r24, 0xFF	; 255
     e60:	9f 4f       	sbci	r25, 0xFF	; 255
     e62:	16 c0       	rjmp	.+44     	; 0xe90 <__floatsisf+0x6c>
     e64:	88 23       	and	r24, r24
     e66:	11 f0       	breq	.+4      	; 0xe6c <__floatsisf+0x48>
     e68:	96 e9       	ldi	r25, 0x96	; 150
     e6a:	11 c0       	rjmp	.+34     	; 0xe8e <__floatsisf+0x6a>
     e6c:	77 23       	and	r23, r23
     e6e:	21 f0       	breq	.+8      	; 0xe78 <__floatsisf+0x54>
     e70:	9e e8       	ldi	r25, 0x8E	; 142
     e72:	87 2f       	mov	r24, r23
     e74:	76 2f       	mov	r23, r22
     e76:	05 c0       	rjmp	.+10     	; 0xe82 <__floatsisf+0x5e>
     e78:	66 23       	and	r22, r22
     e7a:	71 f0       	breq	.+28     	; 0xe98 <__floatsisf+0x74>
     e7c:	96 e8       	ldi	r25, 0x86	; 134
     e7e:	86 2f       	mov	r24, r22
     e80:	70 e0       	ldi	r23, 0x00	; 0
     e82:	60 e0       	ldi	r22, 0x00	; 0
     e84:	2a f0       	brmi	.+10     	; 0xe90 <__floatsisf+0x6c>
     e86:	9a 95       	dec	r25
     e88:	66 0f       	add	r22, r22
     e8a:	77 1f       	adc	r23, r23
     e8c:	88 1f       	adc	r24, r24
     e8e:	da f7       	brpl	.-10     	; 0xe86 <__floatsisf+0x62>
     e90:	88 0f       	add	r24, r24
     e92:	96 95       	lsr	r25
     e94:	87 95       	ror	r24
     e96:	97 f9       	bld	r25, 7
     e98:	08 95       	ret

00000e9a <__fp_cmp>:
     e9a:	99 0f       	add	r25, r25
     e9c:	00 08       	sbc	r0, r0
     e9e:	55 0f       	add	r21, r21
     ea0:	aa 0b       	sbc	r26, r26
     ea2:	e0 e8       	ldi	r30, 0x80	; 128
     ea4:	fe ef       	ldi	r31, 0xFE	; 254
     ea6:	16 16       	cp	r1, r22
     ea8:	17 06       	cpc	r1, r23
     eaa:	e8 07       	cpc	r30, r24
     eac:	f9 07       	cpc	r31, r25
     eae:	c0 f0       	brcs	.+48     	; 0xee0 <__fp_cmp+0x46>
     eb0:	12 16       	cp	r1, r18
     eb2:	13 06       	cpc	r1, r19
     eb4:	e4 07       	cpc	r30, r20
     eb6:	f5 07       	cpc	r31, r21
     eb8:	98 f0       	brcs	.+38     	; 0xee0 <__fp_cmp+0x46>
     eba:	62 1b       	sub	r22, r18
     ebc:	73 0b       	sbc	r23, r19
     ebe:	84 0b       	sbc	r24, r20
     ec0:	95 0b       	sbc	r25, r21
     ec2:	39 f4       	brne	.+14     	; 0xed2 <__fp_cmp+0x38>
     ec4:	0a 26       	eor	r0, r26
     ec6:	61 f0       	breq	.+24     	; 0xee0 <__fp_cmp+0x46>
     ec8:	23 2b       	or	r18, r19
     eca:	24 2b       	or	r18, r20
     ecc:	25 2b       	or	r18, r21
     ece:	21 f4       	brne	.+8      	; 0xed8 <__fp_cmp+0x3e>
     ed0:	08 95       	ret
     ed2:	0a 26       	eor	r0, r26
     ed4:	09 f4       	brne	.+2      	; 0xed8 <__fp_cmp+0x3e>
     ed6:	a1 40       	sbci	r26, 0x01	; 1
     ed8:	a6 95       	lsr	r26
     eda:	8f ef       	ldi	r24, 0xFF	; 255
     edc:	81 1d       	adc	r24, r1
     ede:	81 1d       	adc	r24, r1
     ee0:	08 95       	ret

00000ee2 <__fp_inf>:
     ee2:	97 f9       	bld	r25, 7
     ee4:	9f 67       	ori	r25, 0x7F	; 127
     ee6:	80 e8       	ldi	r24, 0x80	; 128
     ee8:	70 e0       	ldi	r23, 0x00	; 0
     eea:	60 e0       	ldi	r22, 0x00	; 0
     eec:	08 95       	ret

00000eee <__fp_nan>:
     eee:	9f ef       	ldi	r25, 0xFF	; 255
     ef0:	80 ec       	ldi	r24, 0xC0	; 192
     ef2:	08 95       	ret

00000ef4 <__fp_pscA>:
     ef4:	00 24       	eor	r0, r0
     ef6:	0a 94       	dec	r0
     ef8:	16 16       	cp	r1, r22
     efa:	17 06       	cpc	r1, r23
     efc:	18 06       	cpc	r1, r24
     efe:	09 06       	cpc	r0, r25
     f00:	08 95       	ret

00000f02 <__fp_pscB>:
     f02:	00 24       	eor	r0, r0
     f04:	0a 94       	dec	r0
     f06:	12 16       	cp	r1, r18
     f08:	13 06       	cpc	r1, r19
     f0a:	14 06       	cpc	r1, r20
     f0c:	05 06       	cpc	r0, r21
     f0e:	08 95       	ret

00000f10 <__fp_round>:
     f10:	09 2e       	mov	r0, r25
     f12:	03 94       	inc	r0
     f14:	00 0c       	add	r0, r0
     f16:	11 f4       	brne	.+4      	; 0xf1c <__fp_round+0xc>
     f18:	88 23       	and	r24, r24
     f1a:	52 f0       	brmi	.+20     	; 0xf30 <__fp_round+0x20>
     f1c:	bb 0f       	add	r27, r27
     f1e:	40 f4       	brcc	.+16     	; 0xf30 <__fp_round+0x20>
     f20:	bf 2b       	or	r27, r31
     f22:	11 f4       	brne	.+4      	; 0xf28 <__fp_round+0x18>
     f24:	60 ff       	sbrs	r22, 0
     f26:	04 c0       	rjmp	.+8      	; 0xf30 <__fp_round+0x20>
     f28:	6f 5f       	subi	r22, 0xFF	; 255
     f2a:	7f 4f       	sbci	r23, 0xFF	; 255
     f2c:	8f 4f       	sbci	r24, 0xFF	; 255
     f2e:	9f 4f       	sbci	r25, 0xFF	; 255
     f30:	08 95       	ret

00000f32 <__fp_split3>:
     f32:	57 fd       	sbrc	r21, 7
     f34:	90 58       	subi	r25, 0x80	; 128
     f36:	44 0f       	add	r20, r20
     f38:	55 1f       	adc	r21, r21
     f3a:	59 f0       	breq	.+22     	; 0xf52 <__fp_splitA+0x10>
     f3c:	5f 3f       	cpi	r21, 0xFF	; 255
     f3e:	71 f0       	breq	.+28     	; 0xf5c <__fp_splitA+0x1a>
     f40:	47 95       	ror	r20

00000f42 <__fp_splitA>:
     f42:	88 0f       	add	r24, r24
     f44:	97 fb       	bst	r25, 7
     f46:	99 1f       	adc	r25, r25
     f48:	61 f0       	breq	.+24     	; 0xf62 <__fp_splitA+0x20>
     f4a:	9f 3f       	cpi	r25, 0xFF	; 255
     f4c:	79 f0       	breq	.+30     	; 0xf6c <__fp_splitA+0x2a>
     f4e:	87 95       	ror	r24
     f50:	08 95       	ret
     f52:	12 16       	cp	r1, r18
     f54:	13 06       	cpc	r1, r19
     f56:	14 06       	cpc	r1, r20
     f58:	55 1f       	adc	r21, r21
     f5a:	f2 cf       	rjmp	.-28     	; 0xf40 <__fp_split3+0xe>
     f5c:	46 95       	lsr	r20
     f5e:	f1 df       	rcall	.-30     	; 0xf42 <__fp_splitA>
     f60:	08 c0       	rjmp	.+16     	; 0xf72 <__fp_splitA+0x30>
     f62:	16 16       	cp	r1, r22
     f64:	17 06       	cpc	r1, r23
     f66:	18 06       	cpc	r1, r24
     f68:	99 1f       	adc	r25, r25
     f6a:	f1 cf       	rjmp	.-30     	; 0xf4e <__fp_splitA+0xc>
     f6c:	86 95       	lsr	r24
     f6e:	71 05       	cpc	r23, r1
     f70:	61 05       	cpc	r22, r1
     f72:	08 94       	sec
     f74:	08 95       	ret

00000f76 <__fp_zero>:
     f76:	e8 94       	clt

00000f78 <__fp_szero>:
     f78:	bb 27       	eor	r27, r27
     f7a:	66 27       	eor	r22, r22
     f7c:	77 27       	eor	r23, r23
     f7e:	cb 01       	movw	r24, r22
     f80:	97 f9       	bld	r25, 7
     f82:	08 95       	ret

00000f84 <__gesf2>:
     f84:	0e 94 4d 07 	call	0xe9a	; 0xe9a <__fp_cmp>
     f88:	08 f4       	brcc	.+2      	; 0xf8c <__gesf2+0x8>
     f8a:	8f ef       	ldi	r24, 0xFF	; 255
     f8c:	08 95       	ret

00000f8e <__mulsf3>:
     f8e:	0e 94 da 07 	call	0xfb4	; 0xfb4 <__mulsf3x>
     f92:	0c 94 88 07 	jmp	0xf10	; 0xf10 <__fp_round>
     f96:	0e 94 7a 07 	call	0xef4	; 0xef4 <__fp_pscA>
     f9a:	38 f0       	brcs	.+14     	; 0xfaa <__mulsf3+0x1c>
     f9c:	0e 94 81 07 	call	0xf02	; 0xf02 <__fp_pscB>
     fa0:	20 f0       	brcs	.+8      	; 0xfaa <__mulsf3+0x1c>
     fa2:	95 23       	and	r25, r21
     fa4:	11 f0       	breq	.+4      	; 0xfaa <__mulsf3+0x1c>
     fa6:	0c 94 71 07 	jmp	0xee2	; 0xee2 <__fp_inf>
     faa:	0c 94 77 07 	jmp	0xeee	; 0xeee <__fp_nan>
     fae:	11 24       	eor	r1, r1
     fb0:	0c 94 bc 07 	jmp	0xf78	; 0xf78 <__fp_szero>

00000fb4 <__mulsf3x>:
     fb4:	0e 94 99 07 	call	0xf32	; 0xf32 <__fp_split3>
     fb8:	70 f3       	brcs	.-36     	; 0xf96 <__mulsf3+0x8>

00000fba <__mulsf3_pse>:
     fba:	95 9f       	mul	r25, r21
     fbc:	c1 f3       	breq	.-16     	; 0xfae <__mulsf3+0x20>
     fbe:	95 0f       	add	r25, r21
     fc0:	50 e0       	ldi	r21, 0x00	; 0
     fc2:	55 1f       	adc	r21, r21
     fc4:	62 9f       	mul	r22, r18
     fc6:	f0 01       	movw	r30, r0
     fc8:	72 9f       	mul	r23, r18
     fca:	bb 27       	eor	r27, r27
     fcc:	f0 0d       	add	r31, r0
     fce:	b1 1d       	adc	r27, r1
     fd0:	63 9f       	mul	r22, r19
     fd2:	aa 27       	eor	r26, r26
     fd4:	f0 0d       	add	r31, r0
     fd6:	b1 1d       	adc	r27, r1
     fd8:	aa 1f       	adc	r26, r26
     fda:	64 9f       	mul	r22, r20
     fdc:	66 27       	eor	r22, r22
     fde:	b0 0d       	add	r27, r0
     fe0:	a1 1d       	adc	r26, r1
     fe2:	66 1f       	adc	r22, r22
     fe4:	82 9f       	mul	r24, r18
     fe6:	22 27       	eor	r18, r18
     fe8:	b0 0d       	add	r27, r0
     fea:	a1 1d       	adc	r26, r1
     fec:	62 1f       	adc	r22, r18
     fee:	73 9f       	mul	r23, r19
     ff0:	b0 0d       	add	r27, r0
     ff2:	a1 1d       	adc	r26, r1
     ff4:	62 1f       	adc	r22, r18
     ff6:	83 9f       	mul	r24, r19
     ff8:	a0 0d       	add	r26, r0
     ffa:	61 1d       	adc	r22, r1
     ffc:	22 1f       	adc	r18, r18
     ffe:	74 9f       	mul	r23, r20
    1000:	33 27       	eor	r19, r19
    1002:	a0 0d       	add	r26, r0
    1004:	61 1d       	adc	r22, r1
    1006:	23 1f       	adc	r18, r19
    1008:	84 9f       	mul	r24, r20
    100a:	60 0d       	add	r22, r0
    100c:	21 1d       	adc	r18, r1
    100e:	82 2f       	mov	r24, r18
    1010:	76 2f       	mov	r23, r22
    1012:	6a 2f       	mov	r22, r26
    1014:	11 24       	eor	r1, r1
    1016:	9f 57       	subi	r25, 0x7F	; 127
    1018:	50 40       	sbci	r21, 0x00	; 0
    101a:	9a f0       	brmi	.+38     	; 0x1042 <__mulsf3_pse+0x88>
    101c:	f1 f0       	breq	.+60     	; 0x105a <__mulsf3_pse+0xa0>
    101e:	88 23       	and	r24, r24
    1020:	4a f0       	brmi	.+18     	; 0x1034 <__mulsf3_pse+0x7a>
    1022:	ee 0f       	add	r30, r30
    1024:	ff 1f       	adc	r31, r31
    1026:	bb 1f       	adc	r27, r27
    1028:	66 1f       	adc	r22, r22
    102a:	77 1f       	adc	r23, r23
    102c:	88 1f       	adc	r24, r24
    102e:	91 50       	subi	r25, 0x01	; 1
    1030:	50 40       	sbci	r21, 0x00	; 0
    1032:	a9 f7       	brne	.-22     	; 0x101e <__mulsf3_pse+0x64>
    1034:	9e 3f       	cpi	r25, 0xFE	; 254
    1036:	51 05       	cpc	r21, r1
    1038:	80 f0       	brcs	.+32     	; 0x105a <__mulsf3_pse+0xa0>
    103a:	0c 94 71 07 	jmp	0xee2	; 0xee2 <__fp_inf>
    103e:	0c 94 bc 07 	jmp	0xf78	; 0xf78 <__fp_szero>
    1042:	5f 3f       	cpi	r21, 0xFF	; 255
    1044:	e4 f3       	brlt	.-8      	; 0x103e <__mulsf3_pse+0x84>
    1046:	98 3e       	cpi	r25, 0xE8	; 232
    1048:	d4 f3       	brlt	.-12     	; 0x103e <__mulsf3_pse+0x84>
    104a:	86 95       	lsr	r24
    104c:	77 95       	ror	r23
    104e:	67 95       	ror	r22
    1050:	b7 95       	ror	r27
    1052:	f7 95       	ror	r31
    1054:	e7 95       	ror	r30
    1056:	9f 5f       	subi	r25, 0xFF	; 255
    1058:	c1 f7       	brne	.-16     	; 0x104a <__mulsf3_pse+0x90>
    105a:	fe 2b       	or	r31, r30
    105c:	88 0f       	add	r24, r24
    105e:	91 1d       	adc	r25, r1
    1060:	96 95       	lsr	r25
    1062:	87 95       	ror	r24
    1064:	97 f9       	bld	r25, 7
    1066:	08 95       	ret

00001068 <fwrite>:
    1068:	a0 e0       	ldi	r26, 0x00	; 0
    106a:	b0 e0       	ldi	r27, 0x00	; 0
    106c:	ea e3       	ldi	r30, 0x3A	; 58
    106e:	f8 e0       	ldi	r31, 0x08	; 8
    1070:	0c 94 6e 08 	jmp	0x10dc	; 0x10dc <__prologue_saves__+0xc>
    1074:	5b 01       	movw	r10, r22
    1076:	4a 01       	movw	r8, r20
    1078:	79 01       	movw	r14, r18
    107a:	d9 01       	movw	r26, r18
    107c:	13 96       	adiw	r26, 0x03	; 3
    107e:	2c 91       	ld	r18, X
    1080:	21 ff       	sbrs	r18, 1
    1082:	1d c0       	rjmp	.+58     	; 0x10be <fwrite+0x56>
    1084:	c0 e0       	ldi	r28, 0x00	; 0
    1086:	d0 e0       	ldi	r29, 0x00	; 0
    1088:	c8 15       	cp	r28, r8
    108a:	d9 05       	cpc	r29, r9
    108c:	d9 f0       	breq	.+54     	; 0x10c4 <fwrite+0x5c>
    108e:	8c 01       	movw	r16, r24
    1090:	6c 01       	movw	r12, r24
    1092:	ca 0c       	add	r12, r10
    1094:	db 1c       	adc	r13, r11
    1096:	c8 01       	movw	r24, r16
    1098:	0c 15       	cp	r16, r12
    109a:	1d 05       	cpc	r17, r13
    109c:	71 f0       	breq	.+28     	; 0x10ba <fwrite+0x52>
    109e:	0f 5f       	subi	r16, 0xFF	; 255
    10a0:	1f 4f       	sbci	r17, 0xFF	; 255
    10a2:	d7 01       	movw	r26, r14
    10a4:	18 96       	adiw	r26, 0x08	; 8
    10a6:	ed 91       	ld	r30, X+
    10a8:	fc 91       	ld	r31, X
    10aa:	19 97       	sbiw	r26, 0x09	; 9
    10ac:	b7 01       	movw	r22, r14
    10ae:	dc 01       	movw	r26, r24
    10b0:	8c 91       	ld	r24, X
    10b2:	09 95       	icall
    10b4:	89 2b       	or	r24, r25
    10b6:	79 f3       	breq	.-34     	; 0x1096 <fwrite+0x2e>
    10b8:	05 c0       	rjmp	.+10     	; 0x10c4 <fwrite+0x5c>
    10ba:	21 96       	adiw	r28, 0x01	; 1
    10bc:	e5 cf       	rjmp	.-54     	; 0x1088 <fwrite+0x20>
    10be:	80 e0       	ldi	r24, 0x00	; 0
    10c0:	90 e0       	ldi	r25, 0x00	; 0
    10c2:	01 c0       	rjmp	.+2      	; 0x10c6 <fwrite+0x5e>
    10c4:	ce 01       	movw	r24, r28
    10c6:	cd b7       	in	r28, 0x3d	; 61
    10c8:	de b7       	in	r29, 0x3e	; 62
    10ca:	ec e0       	ldi	r30, 0x0C	; 12
    10cc:	0c 94 8a 08 	jmp	0x1114	; 0x1114 <__epilogue_restores__+0xc>

000010d0 <__prologue_saves__>:
    10d0:	2f 92       	push	r2
    10d2:	3f 92       	push	r3
    10d4:	4f 92       	push	r4
    10d6:	5f 92       	push	r5
    10d8:	6f 92       	push	r6
    10da:	7f 92       	push	r7
    10dc:	8f 92       	push	r8
    10de:	9f 92       	push	r9
    10e0:	af 92       	push	r10
    10e2:	bf 92       	push	r11
    10e4:	cf 92       	push	r12
    10e6:	df 92       	push	r13
    10e8:	ef 92       	push	r14
    10ea:	ff 92       	push	r15
    10ec:	0f 93       	push	r16
    10ee:	1f 93       	push	r17
    10f0:	cf 93       	push	r28
    10f2:	df 93       	push	r29
    10f4:	cd b7       	in	r28, 0x3d	; 61
    10f6:	de b7       	in	r29, 0x3e	; 62
    10f8:	ca 1b       	sub	r28, r26
    10fa:	db 0b       	sbc	r29, r27
    10fc:	0f b6       	in	r0, 0x3f	; 63
    10fe:	f8 94       	cli
    1100:	de bf       	out	0x3e, r29	; 62
    1102:	0f be       	out	0x3f, r0	; 63
    1104:	cd bf       	out	0x3d, r28	; 61
    1106:	09 94       	ijmp

00001108 <__epilogue_restores__>:
    1108:	2a 88       	ldd	r2, Y+18	; 0x12
    110a:	39 88       	ldd	r3, Y+17	; 0x11
    110c:	48 88       	ldd	r4, Y+16	; 0x10
    110e:	5f 84       	ldd	r5, Y+15	; 0x0f
    1110:	6e 84       	ldd	r6, Y+14	; 0x0e
    1112:	7d 84       	ldd	r7, Y+13	; 0x0d
    1114:	8c 84       	ldd	r8, Y+12	; 0x0c
    1116:	9b 84       	ldd	r9, Y+11	; 0x0b
    1118:	aa 84       	ldd	r10, Y+10	; 0x0a
    111a:	b9 84       	ldd	r11, Y+9	; 0x09
    111c:	c8 84       	ldd	r12, Y+8	; 0x08
    111e:	df 80       	ldd	r13, Y+7	; 0x07
    1120:	ee 80       	ldd	r14, Y+6	; 0x06
    1122:	fd 80       	ldd	r15, Y+5	; 0x05
    1124:	0c 81       	ldd	r16, Y+4	; 0x04
    1126:	1b 81       	ldd	r17, Y+3	; 0x03
    1128:	aa 81       	ldd	r26, Y+2	; 0x02
    112a:	b9 81       	ldd	r27, Y+1	; 0x01
    112c:	ce 0f       	add	r28, r30
    112e:	d1 1d       	adc	r29, r1
    1130:	0f b6       	in	r0, 0x3f	; 63
    1132:	f8 94       	cli
    1134:	de bf       	out	0x3e, r29	; 62
    1136:	0f be       	out	0x3f, r0	; 63
    1138:	cd bf       	out	0x3d, r28	; 61
    113a:	ed 01       	movw	r28, r26
    113c:	08 95       	ret

0000113e <_exit>:
    113e:	f8 94       	cli

00001140 <__stop_program>:
    1140:	ff cf       	rjmp	.-2      	; 0x1140 <__stop_program>
