
Red Bot Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000038  00800100  00000b8e  00000c22  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b8e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000098  00800138  00800138  00000c5a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000c5a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000cb8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d8  00000000  00000000  00000cf8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f62  00000000  00000000  00000dd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000942  00000000  00000000  00001d32  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007f0  00000000  00000000  00002674  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000254  00000000  00000000  00002e64  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000602  00000000  00000000  000030b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000510  00000000  00000000  000036ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b8  00000000  00000000  00003bca  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 88 00 	jmp	0x110	; 0x110 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 9e 00 	jmp	0x13c	; 0x13c <__vector_14>
  3c:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__vector_15>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e8       	ldi	r30, 0x8E	; 142
  7c:	fb e0       	ldi	r31, 0x0B	; 11
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 33       	cpi	r26, 0x38	; 56
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a8 e3       	ldi	r26, 0x38	; 56
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a0 3d       	cpi	r26, 0xD0	; 208
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 26 01 	call	0x24c	; 0x24c <main>
  9e:	0c 94 c5 05 	jmp	0xb8a	; 0xb8a <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <initialize_all>:
		DDRD |= (1 << DDD5);			// Set PIND5 as Output
		new_left_duty_cycle = pwm_duty_cycle;			// Set Compare register for desired duty cycle
		break;
		case MOTOR_RIGHT_PWM:
		DDRD |= (1 << DDD6);			// Set PIND6 as Output
		new_right_duty_cycle = pwm_duty_cycle;			// Set Compare registers for desired duty cycle
  a6:	78 94       	sei
  a8:	8a b1       	in	r24, 0x0a	; 10
  aa:	84 63       	ori	r24, 0x34	; 52
  ac:	8a b9       	out	0x0a, r24	; 10
  ae:	84 b1       	in	r24, 0x04	; 4
  b0:	80 6c       	ori	r24, 0xC0	; 192
  b2:	84 b9       	out	0x04, r24	; 4
  b4:	20 9a       	sbi	0x04, 0	; 4
  b6:	0e 94 76 01 	call	0x2ec	; 0x2ec <uart_init>
  ba:	ea ec       	ldi	r30, 0xCA	; 202
  bc:	f1 e0       	ldi	r31, 0x01	; 1
  be:	80 e0       	ldi	r24, 0x00	; 0
  c0:	91 e0       	ldi	r25, 0x01	; 1
  c2:	95 83       	std	Z+5, r25	; 0x05
  c4:	84 83       	std	Z+4, r24	; 0x04
  c6:	93 83       	std	Z+3, r25	; 0x03
  c8:	82 83       	std	Z+2, r24	; 0x02
  ca:	91 83       	std	Z+1, r25	; 0x01
  cc:	80 83       	st	Z, r24
  ce:	ea e7       	ldi	r30, 0x7A	; 122
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	80 81       	ld	r24, Z
  d4:	87 60       	ori	r24, 0x07	; 7
  d6:	80 83       	st	Z, r24
  d8:	80 81       	ld	r24, Z
  da:	80 68       	ori	r24, 0x80	; 128
  dc:	80 83       	st	Z, r24
  de:	ec e7       	ldi	r30, 0x7C	; 124
  e0:	f0 e0       	ldi	r31, 0x00	; 0
  e2:	80 81       	ld	r24, Z
  e4:	80 64       	ori	r24, 0x40	; 64
  e6:	80 83       	st	Z, r24
  e8:	89 e6       	ldi	r24, 0x69	; 105
  ea:	98 e1       	ldi	r25, 0x18	; 24
  ec:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
  f0:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
  f4:	e1 e8       	ldi	r30, 0x81	; 129
  f6:	f0 e0       	ldi	r31, 0x00	; 0
  f8:	80 81       	ld	r24, Z
  fa:	83 60       	ori	r24, 0x03	; 3
  fc:	80 83       	st	Z, r24
  fe:	80 81       	ld	r24, Z
 100:	88 60       	ori	r24, 0x08	; 8
 102:	80 83       	st	Z, r24
 104:	ef e6       	ldi	r30, 0x6F	; 111
 106:	f0 e0       	ldi	r31, 0x00	; 0
 108:	80 81       	ld	r24, Z
 10a:	82 60       	ori	r24, 0x02	; 2
 10c:	80 83       	st	Z, r24
 10e:	08 95       	ret

00000110 <__vector_11>:
 110:	1f 92       	push	r1
 112:	0f 92       	push	r0
 114:	0f b6       	in	r0, 0x3f	; 63
 116:	0f 92       	push	r0
 118:	11 24       	eor	r1, r1
 11a:	8f 93       	push	r24
 11c:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <program_counter_one>
 120:	8f 5f       	subi	r24, 0xFF	; 255
 122:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <program_counter_one>
 126:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <__data_end>
 12a:	8f 5f       	subi	r24, 0xFF	; 255
 12c:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <__data_end>
 130:	8f 91       	pop	r24
 132:	0f 90       	pop	r0
 134:	0f be       	out	0x3f, r0	; 63
 136:	0f 90       	pop	r0
 138:	1f 90       	pop	r1
 13a:	18 95       	reti

0000013c <__vector_14>:
 13c:	1f 92       	push	r1
 13e:	0f 92       	push	r0
 140:	0f b6       	in	r0, 0x3f	; 63
 142:	0f 92       	push	r0
 144:	11 24       	eor	r1, r1
 146:	8f 93       	push	r24
 148:	80 91 c7 01 	lds	r24, 0x01C7	; 0x8001c7 <new_right_duty_cycle>
 14c:	87 bd       	out	0x27, r24	; 39
 14e:	8f 91       	pop	r24
 150:	0f 90       	pop	r0
 152:	0f be       	out	0x3f, r0	; 63
 154:	0f 90       	pop	r0
 156:	1f 90       	pop	r1
 158:	18 95       	reti

0000015a <__vector_15>:
 15a:	1f 92       	push	r1
 15c:	0f 92       	push	r0
 15e:	0f b6       	in	r0, 0x3f	; 63
 160:	0f 92       	push	r0
 162:	11 24       	eor	r1, r1
 164:	8f 93       	push	r24
 166:	80 91 8f 01 	lds	r24, 0x018F	; 0x80018f <new_left_duty_cycle>
 16a:	88 bd       	out	0x28, r24	; 40
 16c:	8f 91       	pop	r24
 16e:	0f 90       	pop	r0
 170:	0f be       	out	0x3f, r0	; 63
 172:	0f 90       	pop	r0
 174:	1f 90       	pop	r1
 176:	18 95       	reti

00000178 <start_ADC_and_wait>:
 178:	ea e7       	ldi	r30, 0x7A	; 122
 17a:	f0 e0       	ldi	r31, 0x00	; 0
 17c:	80 81       	ld	r24, Z
 17e:	80 64       	ori	r24, 0x40	; 64
 180:	80 83       	st	Z, r24
 182:	80 81       	ld	r24, Z
 184:	86 fd       	sbrc	r24, 6
 186:	fd cf       	rjmp	.-6      	; 0x182 <start_ADC_and_wait+0xa>
 188:	08 95       	ret

0000018a <READ_LINE_SENSOR>:
		default:
		break;
	}
}

void READ_LINE_SENSOR(void){
 18a:	ef 92       	push	r14
 18c:	ff 92       	push	r15
 18e:	0f 93       	push	r16
 190:	1f 93       	push	r17
 192:	cf 93       	push	r28
 194:	df 93       	push	r29
	
	ADMUX = LINE_LEFT_IN;
 196:	cc e7       	ldi	r28, 0x7C	; 124
 198:	d0 e0       	ldi	r29, 0x00	; 0
 19a:	84 e0       	ldi	r24, 0x04	; 4
 19c:	88 83       	st	Y, r24
	ADMUX |= (1 << REFS0);
 19e:	88 81       	ld	r24, Y
 1a0:	80 64       	ori	r24, 0x40	; 64
 1a2:	88 83       	st	Y, r24
	
	start_ADC_and_wait();
 1a4:	0e 94 bc 00 	call	0x178	; 0x178 <start_ADC_and_wait>
	left_line = (ADCL);
 1a8:	0f 2e       	mov	r0, r31
 1aa:	f8 e7       	ldi	r31, 0x78	; 120
 1ac:	ef 2e       	mov	r14, r31
 1ae:	f1 2c       	mov	r15, r1
 1b0:	f0 2d       	mov	r31, r0
 1b2:	f7 01       	movw	r30, r14
 1b4:	80 81       	ld	r24, Z
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	90 93 c6 01 	sts	0x01C6, r25	; 0x8001c6 <left_line+0x1>
 1bc:	80 93 c5 01 	sts	0x01C5, r24	; 0x8001c5 <left_line>
	left_line |= (ADCH << 8);
 1c0:	09 e7       	ldi	r16, 0x79	; 121
 1c2:	10 e0       	ldi	r17, 0x00	; 0
 1c4:	f8 01       	movw	r30, r16
 1c6:	20 81       	ld	r18, Z
 1c8:	80 91 c5 01 	lds	r24, 0x01C5	; 0x8001c5 <left_line>
 1cc:	90 91 c6 01 	lds	r25, 0x01C6	; 0x8001c6 <left_line+0x1>
 1d0:	92 2b       	or	r25, r18
 1d2:	90 93 c6 01 	sts	0x01C6, r25	; 0x8001c6 <left_line+0x1>
 1d6:	80 93 c5 01 	sts	0x01C5, r24	; 0x8001c5 <left_line>
	
	ADMUX = LINE_CENTER_IN;
 1da:	86 e0       	ldi	r24, 0x06	; 6
 1dc:	88 83       	st	Y, r24
	ADMUX |= (1 << REFS0);
 1de:	88 81       	ld	r24, Y
 1e0:	80 64       	ori	r24, 0x40	; 64
 1e2:	88 83       	st	Y, r24
	
	start_ADC_and_wait();
 1e4:	0e 94 bc 00 	call	0x178	; 0x178 <start_ADC_and_wait>
	center_line = (ADCL);
 1e8:	f7 01       	movw	r30, r14
 1ea:	80 81       	ld	r24, Z
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	90 93 c9 01 	sts	0x01C9, r25	; 0x8001c9 <center_line+0x1>
 1f2:	80 93 c8 01 	sts	0x01C8, r24	; 0x8001c8 <center_line>
	center_line |= (ADCH << 8);
 1f6:	f8 01       	movw	r30, r16
 1f8:	20 81       	ld	r18, Z
 1fa:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <center_line>
 1fe:	90 91 c9 01 	lds	r25, 0x01C9	; 0x8001c9 <center_line+0x1>
 202:	92 2b       	or	r25, r18
 204:	90 93 c9 01 	sts	0x01C9, r25	; 0x8001c9 <center_line+0x1>
 208:	80 93 c8 01 	sts	0x01C8, r24	; 0x8001c8 <center_line>

	ADMUX = LINE_RIGHT_IN;
 20c:	81 e0       	ldi	r24, 0x01	; 1
 20e:	88 83       	st	Y, r24
	ADMUX |= (1 << REFS0);
 210:	88 81       	ld	r24, Y
 212:	80 64       	ori	r24, 0x40	; 64
 214:	88 83       	st	Y, r24
	
	start_ADC_and_wait();
 216:	0e 94 bc 00 	call	0x178	; 0x178 <start_ADC_and_wait>
	right_line = (ADCL);
 21a:	f7 01       	movw	r30, r14
 21c:	80 81       	ld	r24, Z
 21e:	90 e0       	ldi	r25, 0x00	; 0
 220:	90 93 8d 01 	sts	0x018D, r25	; 0x80018d <right_line+0x1>
 224:	80 93 8c 01 	sts	0x018C, r24	; 0x80018c <right_line>
	right_line |= (ADCH << 8);
 228:	f8 01       	movw	r30, r16
 22a:	20 81       	ld	r18, Z
 22c:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <right_line>
 230:	90 91 8d 01 	lds	r25, 0x018D	; 0x80018d <right_line+0x1>
 234:	92 2b       	or	r25, r18
 236:	90 93 8d 01 	sts	0x018D, r25	; 0x80018d <right_line+0x1>
 23a:	80 93 8c 01 	sts	0x018C, r24	; 0x80018c <right_line>
}
 23e:	df 91       	pop	r29
 240:	cf 91       	pop	r28
 242:	1f 91       	pop	r17
 244:	0f 91       	pop	r16
 246:	ff 90       	pop	r15
 248:	ef 90       	pop	r14
 24a:	08 95       	ret

0000024c <main>:


int main(void)
{
    initialize_all();
 24c:	0e 94 53 00 	call	0xa6	; 0xa6 <initialize_all>
    while(1){
		
		READ_LINE_SENSOR();
		
		fprintf(stdout, "Left: %d\n", left_line);
 250:	0f 2e       	mov	r0, r31
 252:	fe e0       	ldi	r31, 0x0E	; 14
 254:	cf 2e       	mov	r12, r31
 256:	f1 e0       	ldi	r31, 0x01	; 1
 258:	df 2e       	mov	r13, r31
 25a:	f0 2d       	mov	r31, r0
 25c:	ca ec       	ldi	r28, 0xCA	; 202
 25e:	d1 e0       	ldi	r29, 0x01	; 1
		fprintf(stdout, "Right: %d\n", right_line);
 260:	0f 2e       	mov	r0, r31
 262:	f8 e1       	ldi	r31, 0x18	; 24
 264:	ef 2e       	mov	r14, r31
 266:	f1 e0       	ldi	r31, 0x01	; 1
 268:	ff 2e       	mov	r15, r31
 26a:	f0 2d       	mov	r31, r0
		fprintf(stdout, "Center: %d\n", center_line);
 26c:	03 e2       	ldi	r16, 0x23	; 35
 26e:	11 e0       	ldi	r17, 0x01	; 1
int main(void)
{
    initialize_all();
    while(1){
		
		READ_LINE_SENSOR();
 270:	0e 94 c5 00 	call	0x18a	; 0x18a <READ_LINE_SENSOR>
		
		fprintf(stdout, "Left: %d\n", left_line);
 274:	80 91 c5 01 	lds	r24, 0x01C5	; 0x8001c5 <left_line>
 278:	90 91 c6 01 	lds	r25, 0x01C6	; 0x8001c6 <left_line+0x1>
 27c:	9f 93       	push	r25
 27e:	8f 93       	push	r24
 280:	df 92       	push	r13
 282:	cf 92       	push	r12
 284:	8b 81       	ldd	r24, Y+3	; 0x03
 286:	8f 93       	push	r24
 288:	8a 81       	ldd	r24, Y+2	; 0x02
 28a:	8f 93       	push	r24
 28c:	0e 94 b7 02 	call	0x56e	; 0x56e <fprintf>
		fprintf(stdout, "Right: %d\n", right_line);
 290:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <right_line>
 294:	90 91 8d 01 	lds	r25, 0x018D	; 0x80018d <right_line+0x1>
 298:	9f 93       	push	r25
 29a:	8f 93       	push	r24
 29c:	ff 92       	push	r15
 29e:	ef 92       	push	r14
 2a0:	8b 81       	ldd	r24, Y+3	; 0x03
 2a2:	8f 93       	push	r24
 2a4:	8a 81       	ldd	r24, Y+2	; 0x02
 2a6:	8f 93       	push	r24
 2a8:	0e 94 b7 02 	call	0x56e	; 0x56e <fprintf>
		fprintf(stdout, "Center: %d\n", center_line);
 2ac:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <center_line>
 2b0:	90 91 c9 01 	lds	r25, 0x01C9	; 0x8001c9 <center_line+0x1>
 2b4:	9f 93       	push	r25
 2b6:	8f 93       	push	r24
 2b8:	1f 93       	push	r17
 2ba:	0f 93       	push	r16
 2bc:	8b 81       	ldd	r24, Y+3	; 0x03
 2be:	8f 93       	push	r24
 2c0:	8a 81       	ldd	r24, Y+2	; 0x02
 2c2:	8f 93       	push	r24
 2c4:	0e 94 b7 02 	call	0x56e	; 0x56e <fprintf>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2c8:	2f ef       	ldi	r18, 0xFF	; 255
 2ca:	81 ee       	ldi	r24, 0xE1	; 225
 2cc:	94 e0       	ldi	r25, 0x04	; 4
 2ce:	21 50       	subi	r18, 0x01	; 1
 2d0:	80 40       	sbci	r24, 0x00	; 0
 2d2:	90 40       	sbci	r25, 0x00	; 0
 2d4:	e1 f7       	brne	.-8      	; 0x2ce <main+0x82>
 2d6:	00 c0       	rjmp	.+0      	; 0x2d8 <main+0x8c>
 2d8:	00 00       	nop
 2da:	8d b7       	in	r24, 0x3d	; 61
 2dc:	9e b7       	in	r25, 0x3e	; 62
 2de:	42 96       	adiw	r24, 0x12	; 18
 2e0:	0f b6       	in	r0, 0x3f	; 63
 2e2:	f8 94       	cli
 2e4:	9e bf       	out	0x3e, r25	; 62
 2e6:	0f be       	out	0x3f, r0	; 63
 2e8:	8d bf       	out	0x3d, r24	; 61
 2ea:	c2 cf       	rjmp	.-124    	; 0x270 <main+0x24>

000002ec <uart_init>:
{
#if F_CPU < 2000000UL && defined(U2X)
  UCSR0A = _BV(U2X);             /* improve baud rate error by using 2x clk */
  UBRR0L = (F_CPU / (8UL * UART_BAUD)) - 1;
#else
  UBRR0L = (F_CPU / (16UL * UART_BAUD)) - 1;
 2ec:	87 e6       	ldi	r24, 0x67	; 103
 2ee:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
#endif
  UCSR0B = _BV(TXEN0) | _BV(RXEN0); /* tx/rx enable */
 2f2:	88 e1       	ldi	r24, 0x18	; 24
 2f4:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 2f8:	08 95       	ret

000002fa <uart_putchar>:
 * Send character c down the UART Tx, wait until tx holding register
 * is empty.
 */
int
uart_putchar(char c, FILE *stream)
{
 2fa:	cf 93       	push	r28
 2fc:	c8 2f       	mov	r28, r24

  if (c == '\a')
 2fe:	87 30       	cpi	r24, 0x07	; 7
 300:	69 f4       	brne	.+26     	; 0x31c <uart_putchar+0x22>
    {
      fputs("*ring*\n", stderr);
 302:	20 91 ce 01 	lds	r18, 0x01CE	; 0x8001ce <__iob+0x4>
 306:	30 91 cf 01 	lds	r19, 0x01CF	; 0x8001cf <__iob+0x5>
 30a:	47 e0       	ldi	r20, 0x07	; 7
 30c:	50 e0       	ldi	r21, 0x00	; 0
 30e:	61 e0       	ldi	r22, 0x01	; 1
 310:	70 e0       	ldi	r23, 0x00	; 0
 312:	8f e2       	ldi	r24, 0x2F	; 47
 314:	91 e0       	ldi	r25, 0x01	; 1
 316:	0e 94 c9 02 	call	0x592	; 0x592 <fwrite>
      return 0;
 31a:	0c c0       	rjmp	.+24     	; 0x334 <uart_putchar+0x3a>
    }

  if (c == '\n')
 31c:	8a 30       	cpi	r24, 0x0A	; 10
 31e:	19 f4       	brne	.+6      	; 0x326 <uart_putchar+0x2c>
    uart_putchar('\r', stream);
 320:	8d e0       	ldi	r24, 0x0D	; 13
 322:	0e 94 7d 01 	call	0x2fa	; 0x2fa <uart_putchar>
  loop_until_bit_is_set(UCSR0A, UDRE0);
 326:	e0 ec       	ldi	r30, 0xC0	; 192
 328:	f0 e0       	ldi	r31, 0x00	; 0
 32a:	80 81       	ld	r24, Z
 32c:	85 ff       	sbrs	r24, 5
 32e:	fd cf       	rjmp	.-6      	; 0x32a <uart_putchar+0x30>
  UDR0 = c;
 330:	c0 93 c6 00 	sts	0x00C6, r28	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>

  return 0;
}
 334:	80 e0       	ldi	r24, 0x00	; 0
 336:	90 e0       	ldi	r25, 0x00	; 0
 338:	cf 91       	pop	r28
 33a:	08 95       	ret

0000033c <uart_getchar>:
 * Successive calls to uart_getchar() will be satisfied from the
 * internal buffer until that buffer is emptied again.
 */
int
uart_getchar(FILE *stream)
{
 33c:	6f 92       	push	r6
 33e:	7f 92       	push	r7
 340:	8f 92       	push	r8
 342:	9f 92       	push	r9
 344:	af 92       	push	r10
 346:	bf 92       	push	r11
 348:	cf 92       	push	r12
 34a:	df 92       	push	r13
 34c:	ef 92       	push	r14
 34e:	ff 92       	push	r15
 350:	0f 93       	push	r16
 352:	1f 93       	push	r17
 354:	cf 93       	push	r28
 356:	df 93       	push	r29
  uint8_t c;
  char *cp, *cp2;
  static char b[RX_BUFSIZE];
  static char *rxp;

  if (rxp == 0)
 358:	20 91 8a 01 	lds	r18, 0x018A	; 0x80018a <rxp.1827>
 35c:	30 91 8b 01 	lds	r19, 0x018B	; 0x80018b <rxp.1827+0x1>
 360:	23 2b       	or	r18, r19
 362:	09 f0       	breq	.+2      	; 0x366 <uart_getchar+0x2a>
 364:	da c0       	rjmp	.+436    	; 0x51a <__LOCK_REGION_LENGTH__+0x11a>
 366:	8c 01       	movw	r16, r24
 368:	0f 2e       	mov	r0, r31
 36a:	fa e3       	ldi	r31, 0x3A	; 58
 36c:	8f 2e       	mov	r8, r31
 36e:	f1 e0       	ldi	r31, 0x01	; 1
 370:	9f 2e       	mov	r9, r31
 372:	f0 2d       	mov	r31, r0
    for (cp = b;;)
      {
	loop_until_bit_is_set(UCSR0A, RXC0);
 374:	c0 ec       	ldi	r28, 0xC0	; 192
 376:	d0 e0       	ldi	r29, 0x00	; 0
	if (UCSR0A & _BV(FE0))
	  return _FDEV_EOF;
	if (UCSR0A & _BV(DOR0))
	  return _FDEV_ERR;
	c = UDR0;
 378:	0f 2e       	mov	r0, r31
 37a:	f6 ec       	ldi	r31, 0xC6	; 198
 37c:	cf 2e       	mov	r12, r31
 37e:	d1 2c       	mov	r13, r1
 380:	f0 2d       	mov	r31, r0
 382:	54 01       	movw	r10, r8
 384:	0f 2e       	mov	r0, r31
 386:	f9 e3       	ldi	r31, 0x39	; 57
 388:	6f 2e       	mov	r6, r31
 38a:	f1 e0       	ldi	r31, 0x01	; 1
 38c:	7f 2e       	mov	r7, r31
 38e:	f0 2d       	mov	r31, r0
  static char *rxp;

  if (rxp == 0)
    for (cp = b;;)
      {
	loop_until_bit_is_set(UCSR0A, RXC0);
 390:	88 81       	ld	r24, Y
 392:	88 23       	and	r24, r24
 394:	ec f7       	brge	.-6      	; 0x390 <uart_getchar+0x54>
	if (UCSR0A & _BV(FE0))
 396:	88 81       	ld	r24, Y
 398:	84 fd       	sbrc	r24, 4
 39a:	d2 c0       	rjmp	.+420    	; 0x540 <__LOCK_REGION_LENGTH__+0x140>
	  return _FDEV_EOF;
	if (UCSR0A & _BV(DOR0))
 39c:	88 81       	ld	r24, Y
 39e:	83 fd       	sbrc	r24, 3
 3a0:	d2 c0       	rjmp	.+420    	; 0x546 <__LOCK_REGION_LENGTH__+0x146>
	  return _FDEV_ERR;
	c = UDR0;
 3a2:	f6 01       	movw	r30, r12
 3a4:	80 81       	ld	r24, Z
	/* behaviour similar to Unix stty ICRNL */
	if (c == '\r')
 3a6:	8d 30       	cpi	r24, 0x0D	; 13
 3a8:	11 f0       	breq	.+4      	; 0x3ae <uart_getchar+0x72>
	  c = '\n';
	if (c == '\n')
 3aa:	8a 30       	cpi	r24, 0x0A	; 10
 3ac:	69 f4       	brne	.+26     	; 0x3c8 <uart_getchar+0x8c>
	  {
	    *cp = c;
 3ae:	8a e0       	ldi	r24, 0x0A	; 10
 3b0:	f4 01       	movw	r30, r8
 3b2:	80 83       	st	Z, r24
	    uart_putchar(c, stream);
 3b4:	b8 01       	movw	r22, r16
 3b6:	0e 94 7d 01 	call	0x2fa	; 0x2fa <uart_putchar>
	    rxp = b;
 3ba:	8a e3       	ldi	r24, 0x3A	; 58
 3bc:	91 e0       	ldi	r25, 0x01	; 1
 3be:	90 93 8b 01 	sts	0x018B, r25	; 0x80018b <rxp.1827+0x1>
 3c2:	80 93 8a 01 	sts	0x018A, r24	; 0x80018a <rxp.1827>
	    break;
 3c6:	a9 c0       	rjmp	.+338    	; 0x51a <__LOCK_REGION_LENGTH__+0x11a>
	  }
	else if (c == '\t')
 3c8:	89 30       	cpi	r24, 0x09	; 9
 3ca:	39 f0       	breq	.+14     	; 0x3da <uart_getchar+0x9e>
	  c = ' ';

	if ((c >= (uint8_t)' ' && c <= (uint8_t)'\x7e') ||
 3cc:	90 ee       	ldi	r25, 0xE0	; 224
 3ce:	98 0f       	add	r25, r24
 3d0:	9f 35       	cpi	r25, 0x5F	; 95
 3d2:	20 f0       	brcs	.+8      	; 0x3dc <uart_getchar+0xa0>
 3d4:	80 3a       	cpi	r24, 0xA0	; 160
 3d6:	b8 f0       	brcs	.+46     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 3d8:	01 c0       	rjmp	.+2      	; 0x3dc <uart_getchar+0xa0>
	    uart_putchar(c, stream);
	    rxp = b;
	    break;
	  }
	else if (c == '\t')
	  c = ' ';
 3da:	80 e2       	ldi	r24, 0x20	; 32

	if ((c >= (uint8_t)' ' && c <= (uint8_t)'\x7e') ||
	    c >= (uint8_t)'\xa0')
	  {
	    if (cp == b + RX_BUFSIZE - 1)
 3dc:	f9 e8       	ldi	r31, 0x89	; 137
 3de:	8f 16       	cp	r8, r31
 3e0:	f1 e0       	ldi	r31, 0x01	; 1
 3e2:	9f 06       	cpc	r9, r31
 3e4:	29 f4       	brne	.+10     	; 0x3f0 <uart_getchar+0xb4>
	      uart_putchar('\a', stream);
 3e6:	b8 01       	movw	r22, r16
 3e8:	87 e0       	ldi	r24, 0x07	; 7
 3ea:	0e 94 7d 01 	call	0x2fa	; 0x2fa <uart_putchar>
 3ee:	d0 cf       	rjmp	.-96     	; 0x390 <uart_getchar+0x54>
	    else
	      {
		*cp++ = c;
 3f0:	74 01       	movw	r14, r8
 3f2:	9f ef       	ldi	r25, 0xFF	; 255
 3f4:	e9 1a       	sub	r14, r25
 3f6:	f9 0a       	sbc	r15, r25
 3f8:	f4 01       	movw	r30, r8
 3fa:	80 83       	st	Z, r24
		uart_putchar(c, stream);
 3fc:	b8 01       	movw	r22, r16
 3fe:	0e 94 7d 01 	call	0x2fa	; 0x2fa <uart_putchar>
	  {
	    if (cp == b + RX_BUFSIZE - 1)
	      uart_putchar('\a', stream);
	    else
	      {
		*cp++ = c;
 402:	47 01       	movw	r8, r14
 404:	c5 cf       	rjmp	.-118    	; 0x390 <uart_getchar+0x54>
		uart_putchar(c, stream);
	      }
	    continue;
	  }

	switch (c)
 406:	82 31       	cpi	r24, 0x12	; 18
 408:	d1 f1       	breq	.+116    	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
 40a:	30 f4       	brcc	.+12     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
 40c:	83 30       	cpi	r24, 0x03	; 3
 40e:	09 f4       	brne	.+2      	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
 410:	9d c0       	rjmp	.+314    	; 0x54c <__LOCK_REGION_LENGTH__+0x14c>
 412:	88 30       	cpi	r24, 0x08	; 8
 414:	e9 f0       	breq	.+58     	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
 416:	bc cf       	rjmp	.-136    	; 0x390 <uart_getchar+0x54>
 418:	87 31       	cpi	r24, 0x17	; 23
 41a:	29 f0       	breq	.+10     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
 41c:	8f 37       	cpi	r24, 0x7F	; 127
 41e:	c1 f0       	breq	.+48     	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
 420:	85 31       	cpi	r24, 0x15	; 21
 422:	79 f0       	breq	.+30     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
 424:	b5 cf       	rjmp	.-150    	; 0x390 <uart_getchar+0x54>
		cp--;
	      }
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
 426:	fa e3       	ldi	r31, 0x3A	; 58
 428:	8f 16       	cp	r8, r31
 42a:	f1 e0       	ldi	r31, 0x01	; 1
 42c:	9f 06       	cpc	r9, r31
 42e:	09 f0       	breq	.+2      	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
 430:	08 f4       	brcc	.+2      	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
 432:	ae cf       	rjmp	.-164    	; 0x390 <uart_getchar+0x54>
 434:	f4 01       	movw	r30, r8
 436:	31 97       	sbiw	r30, 0x01	; 1
 438:	80 81       	ld	r24, Z
 43a:	80 32       	cpi	r24, 0x20	; 32
 43c:	09 f0       	breq	.+2      	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
 43e:	52 c0       	rjmp	.+164    	; 0x4e4 <__LOCK_REGION_LENGTH__+0xe4>
 440:	a7 cf       	rjmp	.-178    	; 0x390 <uart_getchar+0x54>
	    for (cp2 = b; cp2 < cp; cp2++)
	      uart_putchar(*cp2, stream);
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
 442:	8a e3       	ldi	r24, 0x3A	; 58
 444:	88 16       	cp	r8, r24
 446:	81 e0       	ldi	r24, 0x01	; 1
 448:	98 06       	cpc	r9, r24
 44a:	09 f0       	breq	.+2      	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
 44c:	98 f5       	brcc	.+102    	; 0x4b4 <__LOCK_REGION_LENGTH__+0xb4>
 44e:	a0 cf       	rjmp	.-192    	; 0x390 <uart_getchar+0x54>
	  case 'c' & 0x1f:
	    return -1;

	  case '\b':
	  case '\x7f':
	    if (cp > b)
 450:	9a e3       	ldi	r25, 0x3A	; 58
 452:	89 16       	cp	r8, r25
 454:	91 e0       	ldi	r25, 0x01	; 1
 456:	99 06       	cpc	r9, r25
 458:	09 f0       	breq	.+2      	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
 45a:	08 f4       	brcc	.+2      	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
 45c:	99 cf       	rjmp	.-206    	; 0x390 <uart_getchar+0x54>
	      {
		uart_putchar('\b', stream);
 45e:	b8 01       	movw	r22, r16
 460:	88 e0       	ldi	r24, 0x08	; 8
 462:	0e 94 7d 01 	call	0x2fa	; 0x2fa <uart_putchar>
		uart_putchar(' ', stream);
 466:	b8 01       	movw	r22, r16
 468:	80 e2       	ldi	r24, 0x20	; 32
 46a:	0e 94 7d 01 	call	0x2fa	; 0x2fa <uart_putchar>
		uart_putchar('\b', stream);
 46e:	b8 01       	movw	r22, r16
 470:	88 e0       	ldi	r24, 0x08	; 8
 472:	0e 94 7d 01 	call	0x2fa	; 0x2fa <uart_putchar>
		cp--;
 476:	e1 e0       	ldi	r30, 0x01	; 1
 478:	8e 1a       	sub	r8, r30
 47a:	91 08       	sbc	r9, r1
 47c:	89 cf       	rjmp	.-238    	; 0x390 <uart_getchar+0x54>
	      }
	    break;

	  case 'r' & 0x1f:
	    uart_putchar('\r', stream);
 47e:	b8 01       	movw	r22, r16
 480:	8d e0       	ldi	r24, 0x0D	; 13
 482:	0e 94 7d 01 	call	0x2fa	; 0x2fa <uart_putchar>
	    for (cp2 = b; cp2 < cp; cp2++)
 486:	fa e3       	ldi	r31, 0x3A	; 58
 488:	8f 16       	cp	r8, r31
 48a:	f1 e0       	ldi	r31, 0x01	; 1
 48c:	9f 06       	cpc	r9, r31
 48e:	09 f0       	breq	.+2      	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
 490:	08 f4       	brcc	.+2      	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
 492:	7e cf       	rjmp	.-260    	; 0x390 <uart_getchar+0x54>
 494:	0f 2e       	mov	r0, r31
 496:	fa e3       	ldi	r31, 0x3A	; 58
 498:	ef 2e       	mov	r14, r31
 49a:	f1 e0       	ldi	r31, 0x01	; 1
 49c:	ff 2e       	mov	r15, r31
 49e:	f0 2d       	mov	r31, r0
	      uart_putchar(*cp2, stream);
 4a0:	b8 01       	movw	r22, r16
 4a2:	f7 01       	movw	r30, r14
 4a4:	81 91       	ld	r24, Z+
 4a6:	7f 01       	movw	r14, r30
 4a8:	0e 94 7d 01 	call	0x2fa	; 0x2fa <uart_putchar>
	      }
	    break;

	  case 'r' & 0x1f:
	    uart_putchar('\r', stream);
	    for (cp2 = b; cp2 < cp; cp2++)
 4ac:	8e 14       	cp	r8, r14
 4ae:	9f 04       	cpc	r9, r15
 4b0:	b9 f7       	brne	.-18     	; 0x4a0 <__LOCK_REGION_LENGTH__+0xa0>
 4b2:	6e cf       	rjmp	.-292    	; 0x390 <uart_getchar+0x54>
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
	      {
		uart_putchar('\b', stream);
 4b4:	b8 01       	movw	r22, r16
 4b6:	88 e0       	ldi	r24, 0x08	; 8
 4b8:	0e 94 7d 01 	call	0x2fa	; 0x2fa <uart_putchar>
		uart_putchar(' ', stream);
 4bc:	b8 01       	movw	r22, r16
 4be:	80 e2       	ldi	r24, 0x20	; 32
 4c0:	0e 94 7d 01 	call	0x2fa	; 0x2fa <uart_putchar>
		uart_putchar('\b', stream);
 4c4:	b8 01       	movw	r22, r16
 4c6:	88 e0       	ldi	r24, 0x08	; 8
 4c8:	0e 94 7d 01 	call	0x2fa	; 0x2fa <uart_putchar>
		cp--;
 4cc:	f1 e0       	ldi	r31, 0x01	; 1
 4ce:	8f 1a       	sub	r8, r31
 4d0:	91 08       	sbc	r9, r1
	    for (cp2 = b; cp2 < cp; cp2++)
	      uart_putchar(*cp2, stream);
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
 4d2:	8a e3       	ldi	r24, 0x3A	; 58
 4d4:	88 16       	cp	r8, r24
 4d6:	81 e0       	ldi	r24, 0x01	; 1
 4d8:	98 06       	cpc	r9, r24
 4da:	61 f7       	brne	.-40     	; 0x4b4 <__LOCK_REGION_LENGTH__+0xb4>
 4dc:	f3 01       	movw	r30, r6
 4de:	31 96       	adiw	r30, 0x01	; 1
 4e0:	4f 01       	movw	r8, r30
 4e2:	56 cf       	rjmp	.-340    	; 0x390 <uart_getchar+0x54>
 4e4:	74 01       	movw	r14, r8
 4e6:	f1 e0       	ldi	r31, 0x01	; 1
 4e8:	ef 1a       	sub	r14, r31
 4ea:	f1 08       	sbc	r15, r1
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
	      {
		uart_putchar('\b', stream);
 4ec:	b8 01       	movw	r22, r16
 4ee:	88 e0       	ldi	r24, 0x08	; 8
 4f0:	0e 94 7d 01 	call	0x2fa	; 0x2fa <uart_putchar>
		uart_putchar(' ', stream);
 4f4:	b8 01       	movw	r22, r16
 4f6:	80 e2       	ldi	r24, 0x20	; 32
 4f8:	0e 94 7d 01 	call	0x2fa	; 0x2fa <uart_putchar>
		uart_putchar('\b', stream);
 4fc:	b8 01       	movw	r22, r16
 4fe:	88 e0       	ldi	r24, 0x08	; 8
 500:	0e 94 7d 01 	call	0x2fa	; 0x2fa <uart_putchar>
		cp--;
 504:	47 01       	movw	r8, r14
		cp--;
	      }
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
 506:	ea 14       	cp	r14, r10
 508:	fb 04       	cpc	r15, r11
 50a:	09 f4       	brne	.+2      	; 0x50e <__LOCK_REGION_LENGTH__+0x10e>
 50c:	41 cf       	rjmp	.-382    	; 0x390 <uart_getchar+0x54>
 50e:	f7 01       	movw	r30, r14
 510:	82 91       	ld	r24, -Z
 512:	7f 01       	movw	r14, r30
 514:	80 32       	cpi	r24, 0x20	; 32
 516:	51 f7       	brne	.-44     	; 0x4ec <__LOCK_REGION_LENGTH__+0xec>
 518:	3b cf       	rjmp	.-394    	; 0x390 <uart_getchar+0x54>
	      }
	    break;
	  }
      }

  c = *rxp++;
 51a:	e0 91 8a 01 	lds	r30, 0x018A	; 0x80018a <rxp.1827>
 51e:	f0 91 8b 01 	lds	r31, 0x018B	; 0x80018b <rxp.1827+0x1>
 522:	cf 01       	movw	r24, r30
 524:	01 96       	adiw	r24, 0x01	; 1
 526:	90 93 8b 01 	sts	0x018B, r25	; 0x80018b <rxp.1827+0x1>
 52a:	80 93 8a 01 	sts	0x018A, r24	; 0x80018a <rxp.1827>
 52e:	80 81       	ld	r24, Z
  if (c == '\n')
 530:	8a 30       	cpi	r24, 0x0A	; 10
 532:	21 f4       	brne	.+8      	; 0x53c <__LOCK_REGION_LENGTH__+0x13c>
    rxp = 0;
 534:	10 92 8b 01 	sts	0x018B, r1	; 0x80018b <rxp.1827+0x1>
 538:	10 92 8a 01 	sts	0x018A, r1	; 0x80018a <rxp.1827>

  return c;
 53c:	90 e0       	ldi	r25, 0x00	; 0
 53e:	08 c0       	rjmp	.+16     	; 0x550 <__LOCK_REGION_LENGTH__+0x150>
  if (rxp == 0)
    for (cp = b;;)
      {
	loop_until_bit_is_set(UCSR0A, RXC0);
	if (UCSR0A & _BV(FE0))
	  return _FDEV_EOF;
 540:	8e ef       	ldi	r24, 0xFE	; 254
 542:	9f ef       	ldi	r25, 0xFF	; 255
 544:	05 c0       	rjmp	.+10     	; 0x550 <__LOCK_REGION_LENGTH__+0x150>
	if (UCSR0A & _BV(DOR0))
	  return _FDEV_ERR;
 546:	8f ef       	ldi	r24, 0xFF	; 255
 548:	9f ef       	ldi	r25, 0xFF	; 255
 54a:	02 c0       	rjmp	.+4      	; 0x550 <__LOCK_REGION_LENGTH__+0x150>
	  }

	switch (c)
	  {
	  case 'c' & 0x1f:
	    return -1;
 54c:	8f ef       	ldi	r24, 0xFF	; 255
 54e:	9f ef       	ldi	r25, 0xFF	; 255
  c = *rxp++;
  if (c == '\n')
    rxp = 0;

  return c;
}
 550:	df 91       	pop	r29
 552:	cf 91       	pop	r28
 554:	1f 91       	pop	r17
 556:	0f 91       	pop	r16
 558:	ff 90       	pop	r15
 55a:	ef 90       	pop	r14
 55c:	df 90       	pop	r13
 55e:	cf 90       	pop	r12
 560:	bf 90       	pop	r11
 562:	af 90       	pop	r10
 564:	9f 90       	pop	r9
 566:	8f 90       	pop	r8
 568:	7f 90       	pop	r7
 56a:	6f 90       	pop	r6
 56c:	08 95       	ret

0000056e <fprintf>:
 56e:	a0 e0       	ldi	r26, 0x00	; 0
 570:	b0 e0       	ldi	r27, 0x00	; 0
 572:	ed eb       	ldi	r30, 0xBD	; 189
 574:	f2 e0       	ldi	r31, 0x02	; 2
 576:	0c 94 9e 05 	jmp	0xb3c	; 0xb3c <__prologue_saves__+0x20>
 57a:	ae 01       	movw	r20, r28
 57c:	47 5f       	subi	r20, 0xF7	; 247
 57e:	5f 4f       	sbci	r21, 0xFF	; 255
 580:	6f 81       	ldd	r22, Y+7	; 0x07
 582:	78 85       	ldd	r23, Y+8	; 0x08
 584:	8d 81       	ldd	r24, Y+5	; 0x05
 586:	9e 81       	ldd	r25, Y+6	; 0x06
 588:	0e 94 fd 02 	call	0x5fa	; 0x5fa <vfprintf>
 58c:	e2 e0       	ldi	r30, 0x02	; 2
 58e:	0c 94 ba 05 	jmp	0xb74	; 0xb74 <__epilogue_restores__+0x20>

00000592 <fwrite>:
 592:	a0 e0       	ldi	r26, 0x00	; 0
 594:	b0 e0       	ldi	r27, 0x00	; 0
 596:	ef ec       	ldi	r30, 0xCF	; 207
 598:	f2 e0       	ldi	r31, 0x02	; 2
 59a:	0c 94 94 05 	jmp	0xb28	; 0xb28 <__prologue_saves__+0xc>
 59e:	5b 01       	movw	r10, r22
 5a0:	4a 01       	movw	r8, r20
 5a2:	79 01       	movw	r14, r18
 5a4:	d9 01       	movw	r26, r18
 5a6:	13 96       	adiw	r26, 0x03	; 3
 5a8:	2c 91       	ld	r18, X
 5aa:	21 ff       	sbrs	r18, 1
 5ac:	1d c0       	rjmp	.+58     	; 0x5e8 <fwrite+0x56>
 5ae:	c0 e0       	ldi	r28, 0x00	; 0
 5b0:	d0 e0       	ldi	r29, 0x00	; 0
 5b2:	c8 15       	cp	r28, r8
 5b4:	d9 05       	cpc	r29, r9
 5b6:	d9 f0       	breq	.+54     	; 0x5ee <fwrite+0x5c>
 5b8:	8c 01       	movw	r16, r24
 5ba:	6c 01       	movw	r12, r24
 5bc:	ca 0c       	add	r12, r10
 5be:	db 1c       	adc	r13, r11
 5c0:	c8 01       	movw	r24, r16
 5c2:	0c 15       	cp	r16, r12
 5c4:	1d 05       	cpc	r17, r13
 5c6:	71 f0       	breq	.+28     	; 0x5e4 <fwrite+0x52>
 5c8:	0f 5f       	subi	r16, 0xFF	; 255
 5ca:	1f 4f       	sbci	r17, 0xFF	; 255
 5cc:	d7 01       	movw	r26, r14
 5ce:	18 96       	adiw	r26, 0x08	; 8
 5d0:	ed 91       	ld	r30, X+
 5d2:	fc 91       	ld	r31, X
 5d4:	19 97       	sbiw	r26, 0x09	; 9
 5d6:	b7 01       	movw	r22, r14
 5d8:	dc 01       	movw	r26, r24
 5da:	8c 91       	ld	r24, X
 5dc:	09 95       	icall
 5de:	89 2b       	or	r24, r25
 5e0:	79 f3       	breq	.-34     	; 0x5c0 <fwrite+0x2e>
 5e2:	05 c0       	rjmp	.+10     	; 0x5ee <fwrite+0x5c>
 5e4:	21 96       	adiw	r28, 0x01	; 1
 5e6:	e5 cf       	rjmp	.-54     	; 0x5b2 <fwrite+0x20>
 5e8:	80 e0       	ldi	r24, 0x00	; 0
 5ea:	90 e0       	ldi	r25, 0x00	; 0
 5ec:	01 c0       	rjmp	.+2      	; 0x5f0 <fwrite+0x5e>
 5ee:	ce 01       	movw	r24, r28
 5f0:	cd b7       	in	r28, 0x3d	; 61
 5f2:	de b7       	in	r29, 0x3e	; 62
 5f4:	ec e0       	ldi	r30, 0x0C	; 12
 5f6:	0c 94 b0 05 	jmp	0xb60	; 0xb60 <__epilogue_restores__+0xc>

000005fa <vfprintf>:
 5fa:	ab e0       	ldi	r26, 0x0B	; 11
 5fc:	b0 e0       	ldi	r27, 0x00	; 0
 5fe:	e3 e0       	ldi	r30, 0x03	; 3
 600:	f3 e0       	ldi	r31, 0x03	; 3
 602:	0c 94 8e 05 	jmp	0xb1c	; 0xb1c <__prologue_saves__>
 606:	6c 01       	movw	r12, r24
 608:	7b 01       	movw	r14, r22
 60a:	8a 01       	movw	r16, r20
 60c:	fc 01       	movw	r30, r24
 60e:	17 82       	std	Z+7, r1	; 0x07
 610:	16 82       	std	Z+6, r1	; 0x06
 612:	83 81       	ldd	r24, Z+3	; 0x03
 614:	81 ff       	sbrs	r24, 1
 616:	cc c1       	rjmp	.+920    	; 0x9b0 <__stack+0xb1>
 618:	ce 01       	movw	r24, r28
 61a:	01 96       	adiw	r24, 0x01	; 1
 61c:	3c 01       	movw	r6, r24
 61e:	f6 01       	movw	r30, r12
 620:	93 81       	ldd	r25, Z+3	; 0x03
 622:	f7 01       	movw	r30, r14
 624:	93 fd       	sbrc	r25, 3
 626:	85 91       	lpm	r24, Z+
 628:	93 ff       	sbrs	r25, 3
 62a:	81 91       	ld	r24, Z+
 62c:	7f 01       	movw	r14, r30
 62e:	88 23       	and	r24, r24
 630:	09 f4       	brne	.+2      	; 0x634 <vfprintf+0x3a>
 632:	ba c1       	rjmp	.+884    	; 0x9a8 <__stack+0xa9>
 634:	85 32       	cpi	r24, 0x25	; 37
 636:	39 f4       	brne	.+14     	; 0x646 <vfprintf+0x4c>
 638:	93 fd       	sbrc	r25, 3
 63a:	85 91       	lpm	r24, Z+
 63c:	93 ff       	sbrs	r25, 3
 63e:	81 91       	ld	r24, Z+
 640:	7f 01       	movw	r14, r30
 642:	85 32       	cpi	r24, 0x25	; 37
 644:	29 f4       	brne	.+10     	; 0x650 <vfprintf+0x56>
 646:	b6 01       	movw	r22, r12
 648:	90 e0       	ldi	r25, 0x00	; 0
 64a:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <fputc>
 64e:	e7 cf       	rjmp	.-50     	; 0x61e <vfprintf+0x24>
 650:	91 2c       	mov	r9, r1
 652:	21 2c       	mov	r2, r1
 654:	31 2c       	mov	r3, r1
 656:	ff e1       	ldi	r31, 0x1F	; 31
 658:	f3 15       	cp	r31, r3
 65a:	d8 f0       	brcs	.+54     	; 0x692 <vfprintf+0x98>
 65c:	8b 32       	cpi	r24, 0x2B	; 43
 65e:	79 f0       	breq	.+30     	; 0x67e <vfprintf+0x84>
 660:	38 f4       	brcc	.+14     	; 0x670 <vfprintf+0x76>
 662:	80 32       	cpi	r24, 0x20	; 32
 664:	79 f0       	breq	.+30     	; 0x684 <vfprintf+0x8a>
 666:	83 32       	cpi	r24, 0x23	; 35
 668:	a1 f4       	brne	.+40     	; 0x692 <vfprintf+0x98>
 66a:	23 2d       	mov	r18, r3
 66c:	20 61       	ori	r18, 0x10	; 16
 66e:	1d c0       	rjmp	.+58     	; 0x6aa <vfprintf+0xb0>
 670:	8d 32       	cpi	r24, 0x2D	; 45
 672:	61 f0       	breq	.+24     	; 0x68c <vfprintf+0x92>
 674:	80 33       	cpi	r24, 0x30	; 48
 676:	69 f4       	brne	.+26     	; 0x692 <vfprintf+0x98>
 678:	23 2d       	mov	r18, r3
 67a:	21 60       	ori	r18, 0x01	; 1
 67c:	16 c0       	rjmp	.+44     	; 0x6aa <vfprintf+0xb0>
 67e:	83 2d       	mov	r24, r3
 680:	82 60       	ori	r24, 0x02	; 2
 682:	38 2e       	mov	r3, r24
 684:	e3 2d       	mov	r30, r3
 686:	e4 60       	ori	r30, 0x04	; 4
 688:	3e 2e       	mov	r3, r30
 68a:	2a c0       	rjmp	.+84     	; 0x6e0 <vfprintf+0xe6>
 68c:	f3 2d       	mov	r31, r3
 68e:	f8 60       	ori	r31, 0x08	; 8
 690:	1d c0       	rjmp	.+58     	; 0x6cc <vfprintf+0xd2>
 692:	37 fc       	sbrc	r3, 7
 694:	2d c0       	rjmp	.+90     	; 0x6f0 <vfprintf+0xf6>
 696:	20 ed       	ldi	r18, 0xD0	; 208
 698:	28 0f       	add	r18, r24
 69a:	2a 30       	cpi	r18, 0x0A	; 10
 69c:	40 f0       	brcs	.+16     	; 0x6ae <vfprintf+0xb4>
 69e:	8e 32       	cpi	r24, 0x2E	; 46
 6a0:	b9 f4       	brne	.+46     	; 0x6d0 <vfprintf+0xd6>
 6a2:	36 fc       	sbrc	r3, 6
 6a4:	81 c1       	rjmp	.+770    	; 0x9a8 <__stack+0xa9>
 6a6:	23 2d       	mov	r18, r3
 6a8:	20 64       	ori	r18, 0x40	; 64
 6aa:	32 2e       	mov	r3, r18
 6ac:	19 c0       	rjmp	.+50     	; 0x6e0 <vfprintf+0xe6>
 6ae:	36 fe       	sbrs	r3, 6
 6b0:	06 c0       	rjmp	.+12     	; 0x6be <vfprintf+0xc4>
 6b2:	8a e0       	ldi	r24, 0x0A	; 10
 6b4:	98 9e       	mul	r9, r24
 6b6:	20 0d       	add	r18, r0
 6b8:	11 24       	eor	r1, r1
 6ba:	92 2e       	mov	r9, r18
 6bc:	11 c0       	rjmp	.+34     	; 0x6e0 <vfprintf+0xe6>
 6be:	ea e0       	ldi	r30, 0x0A	; 10
 6c0:	2e 9e       	mul	r2, r30
 6c2:	20 0d       	add	r18, r0
 6c4:	11 24       	eor	r1, r1
 6c6:	22 2e       	mov	r2, r18
 6c8:	f3 2d       	mov	r31, r3
 6ca:	f0 62       	ori	r31, 0x20	; 32
 6cc:	3f 2e       	mov	r3, r31
 6ce:	08 c0       	rjmp	.+16     	; 0x6e0 <vfprintf+0xe6>
 6d0:	8c 36       	cpi	r24, 0x6C	; 108
 6d2:	21 f4       	brne	.+8      	; 0x6dc <vfprintf+0xe2>
 6d4:	83 2d       	mov	r24, r3
 6d6:	80 68       	ori	r24, 0x80	; 128
 6d8:	38 2e       	mov	r3, r24
 6da:	02 c0       	rjmp	.+4      	; 0x6e0 <vfprintf+0xe6>
 6dc:	88 36       	cpi	r24, 0x68	; 104
 6de:	41 f4       	brne	.+16     	; 0x6f0 <vfprintf+0xf6>
 6e0:	f7 01       	movw	r30, r14
 6e2:	93 fd       	sbrc	r25, 3
 6e4:	85 91       	lpm	r24, Z+
 6e6:	93 ff       	sbrs	r25, 3
 6e8:	81 91       	ld	r24, Z+
 6ea:	7f 01       	movw	r14, r30
 6ec:	81 11       	cpse	r24, r1
 6ee:	b3 cf       	rjmp	.-154    	; 0x656 <vfprintf+0x5c>
 6f0:	98 2f       	mov	r25, r24
 6f2:	9f 7d       	andi	r25, 0xDF	; 223
 6f4:	95 54       	subi	r25, 0x45	; 69
 6f6:	93 30       	cpi	r25, 0x03	; 3
 6f8:	28 f4       	brcc	.+10     	; 0x704 <vfprintf+0x10a>
 6fa:	0c 5f       	subi	r16, 0xFC	; 252
 6fc:	1f 4f       	sbci	r17, 0xFF	; 255
 6fe:	9f e3       	ldi	r25, 0x3F	; 63
 700:	99 83       	std	Y+1, r25	; 0x01
 702:	0d c0       	rjmp	.+26     	; 0x71e <vfprintf+0x124>
 704:	83 36       	cpi	r24, 0x63	; 99
 706:	31 f0       	breq	.+12     	; 0x714 <vfprintf+0x11a>
 708:	83 37       	cpi	r24, 0x73	; 115
 70a:	71 f0       	breq	.+28     	; 0x728 <vfprintf+0x12e>
 70c:	83 35       	cpi	r24, 0x53	; 83
 70e:	09 f0       	breq	.+2      	; 0x712 <vfprintf+0x118>
 710:	59 c0       	rjmp	.+178    	; 0x7c4 <vfprintf+0x1ca>
 712:	21 c0       	rjmp	.+66     	; 0x756 <vfprintf+0x15c>
 714:	f8 01       	movw	r30, r16
 716:	80 81       	ld	r24, Z
 718:	89 83       	std	Y+1, r24	; 0x01
 71a:	0e 5f       	subi	r16, 0xFE	; 254
 71c:	1f 4f       	sbci	r17, 0xFF	; 255
 71e:	88 24       	eor	r8, r8
 720:	83 94       	inc	r8
 722:	91 2c       	mov	r9, r1
 724:	53 01       	movw	r10, r6
 726:	13 c0       	rjmp	.+38     	; 0x74e <vfprintf+0x154>
 728:	28 01       	movw	r4, r16
 72a:	f2 e0       	ldi	r31, 0x02	; 2
 72c:	4f 0e       	add	r4, r31
 72e:	51 1c       	adc	r5, r1
 730:	f8 01       	movw	r30, r16
 732:	a0 80       	ld	r10, Z
 734:	b1 80       	ldd	r11, Z+1	; 0x01
 736:	36 fe       	sbrs	r3, 6
 738:	03 c0       	rjmp	.+6      	; 0x740 <vfprintf+0x146>
 73a:	69 2d       	mov	r22, r9
 73c:	70 e0       	ldi	r23, 0x00	; 0
 73e:	02 c0       	rjmp	.+4      	; 0x744 <vfprintf+0x14a>
 740:	6f ef       	ldi	r22, 0xFF	; 255
 742:	7f ef       	ldi	r23, 0xFF	; 255
 744:	c5 01       	movw	r24, r10
 746:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <strnlen>
 74a:	4c 01       	movw	r8, r24
 74c:	82 01       	movw	r16, r4
 74e:	f3 2d       	mov	r31, r3
 750:	ff 77       	andi	r31, 0x7F	; 127
 752:	3f 2e       	mov	r3, r31
 754:	16 c0       	rjmp	.+44     	; 0x782 <vfprintf+0x188>
 756:	28 01       	movw	r4, r16
 758:	22 e0       	ldi	r18, 0x02	; 2
 75a:	42 0e       	add	r4, r18
 75c:	51 1c       	adc	r5, r1
 75e:	f8 01       	movw	r30, r16
 760:	a0 80       	ld	r10, Z
 762:	b1 80       	ldd	r11, Z+1	; 0x01
 764:	36 fe       	sbrs	r3, 6
 766:	03 c0       	rjmp	.+6      	; 0x76e <vfprintf+0x174>
 768:	69 2d       	mov	r22, r9
 76a:	70 e0       	ldi	r23, 0x00	; 0
 76c:	02 c0       	rjmp	.+4      	; 0x772 <vfprintf+0x178>
 76e:	6f ef       	ldi	r22, 0xFF	; 255
 770:	7f ef       	ldi	r23, 0xFF	; 255
 772:	c5 01       	movw	r24, r10
 774:	0e 94 de 04 	call	0x9bc	; 0x9bc <strnlen_P>
 778:	4c 01       	movw	r8, r24
 77a:	f3 2d       	mov	r31, r3
 77c:	f0 68       	ori	r31, 0x80	; 128
 77e:	3f 2e       	mov	r3, r31
 780:	82 01       	movw	r16, r4
 782:	33 fc       	sbrc	r3, 3
 784:	1b c0       	rjmp	.+54     	; 0x7bc <vfprintf+0x1c2>
 786:	82 2d       	mov	r24, r2
 788:	90 e0       	ldi	r25, 0x00	; 0
 78a:	88 16       	cp	r8, r24
 78c:	99 06       	cpc	r9, r25
 78e:	b0 f4       	brcc	.+44     	; 0x7bc <vfprintf+0x1c2>
 790:	b6 01       	movw	r22, r12
 792:	80 e2       	ldi	r24, 0x20	; 32
 794:	90 e0       	ldi	r25, 0x00	; 0
 796:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <fputc>
 79a:	2a 94       	dec	r2
 79c:	f4 cf       	rjmp	.-24     	; 0x786 <vfprintf+0x18c>
 79e:	f5 01       	movw	r30, r10
 7a0:	37 fc       	sbrc	r3, 7
 7a2:	85 91       	lpm	r24, Z+
 7a4:	37 fe       	sbrs	r3, 7
 7a6:	81 91       	ld	r24, Z+
 7a8:	5f 01       	movw	r10, r30
 7aa:	b6 01       	movw	r22, r12
 7ac:	90 e0       	ldi	r25, 0x00	; 0
 7ae:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <fputc>
 7b2:	21 10       	cpse	r2, r1
 7b4:	2a 94       	dec	r2
 7b6:	21 e0       	ldi	r18, 0x01	; 1
 7b8:	82 1a       	sub	r8, r18
 7ba:	91 08       	sbc	r9, r1
 7bc:	81 14       	cp	r8, r1
 7be:	91 04       	cpc	r9, r1
 7c0:	71 f7       	brne	.-36     	; 0x79e <vfprintf+0x1a4>
 7c2:	e8 c0       	rjmp	.+464    	; 0x994 <__stack+0x95>
 7c4:	84 36       	cpi	r24, 0x64	; 100
 7c6:	11 f0       	breq	.+4      	; 0x7cc <vfprintf+0x1d2>
 7c8:	89 36       	cpi	r24, 0x69	; 105
 7ca:	41 f5       	brne	.+80     	; 0x81c <vfprintf+0x222>
 7cc:	f8 01       	movw	r30, r16
 7ce:	37 fe       	sbrs	r3, 7
 7d0:	07 c0       	rjmp	.+14     	; 0x7e0 <vfprintf+0x1e6>
 7d2:	60 81       	ld	r22, Z
 7d4:	71 81       	ldd	r23, Z+1	; 0x01
 7d6:	82 81       	ldd	r24, Z+2	; 0x02
 7d8:	93 81       	ldd	r25, Z+3	; 0x03
 7da:	0c 5f       	subi	r16, 0xFC	; 252
 7dc:	1f 4f       	sbci	r17, 0xFF	; 255
 7de:	08 c0       	rjmp	.+16     	; 0x7f0 <vfprintf+0x1f6>
 7e0:	60 81       	ld	r22, Z
 7e2:	71 81       	ldd	r23, Z+1	; 0x01
 7e4:	07 2e       	mov	r0, r23
 7e6:	00 0c       	add	r0, r0
 7e8:	88 0b       	sbc	r24, r24
 7ea:	99 0b       	sbc	r25, r25
 7ec:	0e 5f       	subi	r16, 0xFE	; 254
 7ee:	1f 4f       	sbci	r17, 0xFF	; 255
 7f0:	f3 2d       	mov	r31, r3
 7f2:	ff 76       	andi	r31, 0x6F	; 111
 7f4:	3f 2e       	mov	r3, r31
 7f6:	97 ff       	sbrs	r25, 7
 7f8:	09 c0       	rjmp	.+18     	; 0x80c <vfprintf+0x212>
 7fa:	90 95       	com	r25
 7fc:	80 95       	com	r24
 7fe:	70 95       	com	r23
 800:	61 95       	neg	r22
 802:	7f 4f       	sbci	r23, 0xFF	; 255
 804:	8f 4f       	sbci	r24, 0xFF	; 255
 806:	9f 4f       	sbci	r25, 0xFF	; 255
 808:	f0 68       	ori	r31, 0x80	; 128
 80a:	3f 2e       	mov	r3, r31
 80c:	2a e0       	ldi	r18, 0x0A	; 10
 80e:	30 e0       	ldi	r19, 0x00	; 0
 810:	a3 01       	movw	r20, r6
 812:	0e 94 30 05 	call	0xa60	; 0xa60 <__ultoa_invert>
 816:	88 2e       	mov	r8, r24
 818:	86 18       	sub	r8, r6
 81a:	45 c0       	rjmp	.+138    	; 0x8a6 <vfprintf+0x2ac>
 81c:	85 37       	cpi	r24, 0x75	; 117
 81e:	31 f4       	brne	.+12     	; 0x82c <vfprintf+0x232>
 820:	23 2d       	mov	r18, r3
 822:	2f 7e       	andi	r18, 0xEF	; 239
 824:	b2 2e       	mov	r11, r18
 826:	2a e0       	ldi	r18, 0x0A	; 10
 828:	30 e0       	ldi	r19, 0x00	; 0
 82a:	25 c0       	rjmp	.+74     	; 0x876 <vfprintf+0x27c>
 82c:	93 2d       	mov	r25, r3
 82e:	99 7f       	andi	r25, 0xF9	; 249
 830:	b9 2e       	mov	r11, r25
 832:	8f 36       	cpi	r24, 0x6F	; 111
 834:	c1 f0       	breq	.+48     	; 0x866 <vfprintf+0x26c>
 836:	18 f4       	brcc	.+6      	; 0x83e <vfprintf+0x244>
 838:	88 35       	cpi	r24, 0x58	; 88
 83a:	79 f0       	breq	.+30     	; 0x85a <vfprintf+0x260>
 83c:	b5 c0       	rjmp	.+362    	; 0x9a8 <__stack+0xa9>
 83e:	80 37       	cpi	r24, 0x70	; 112
 840:	19 f0       	breq	.+6      	; 0x848 <vfprintf+0x24e>
 842:	88 37       	cpi	r24, 0x78	; 120
 844:	21 f0       	breq	.+8      	; 0x84e <vfprintf+0x254>
 846:	b0 c0       	rjmp	.+352    	; 0x9a8 <__stack+0xa9>
 848:	e9 2f       	mov	r30, r25
 84a:	e0 61       	ori	r30, 0x10	; 16
 84c:	be 2e       	mov	r11, r30
 84e:	b4 fe       	sbrs	r11, 4
 850:	0d c0       	rjmp	.+26     	; 0x86c <vfprintf+0x272>
 852:	fb 2d       	mov	r31, r11
 854:	f4 60       	ori	r31, 0x04	; 4
 856:	bf 2e       	mov	r11, r31
 858:	09 c0       	rjmp	.+18     	; 0x86c <vfprintf+0x272>
 85a:	34 fe       	sbrs	r3, 4
 85c:	0a c0       	rjmp	.+20     	; 0x872 <vfprintf+0x278>
 85e:	29 2f       	mov	r18, r25
 860:	26 60       	ori	r18, 0x06	; 6
 862:	b2 2e       	mov	r11, r18
 864:	06 c0       	rjmp	.+12     	; 0x872 <vfprintf+0x278>
 866:	28 e0       	ldi	r18, 0x08	; 8
 868:	30 e0       	ldi	r19, 0x00	; 0
 86a:	05 c0       	rjmp	.+10     	; 0x876 <vfprintf+0x27c>
 86c:	20 e1       	ldi	r18, 0x10	; 16
 86e:	30 e0       	ldi	r19, 0x00	; 0
 870:	02 c0       	rjmp	.+4      	; 0x876 <vfprintf+0x27c>
 872:	20 e1       	ldi	r18, 0x10	; 16
 874:	32 e0       	ldi	r19, 0x02	; 2
 876:	f8 01       	movw	r30, r16
 878:	b7 fe       	sbrs	r11, 7
 87a:	07 c0       	rjmp	.+14     	; 0x88a <vfprintf+0x290>
 87c:	60 81       	ld	r22, Z
 87e:	71 81       	ldd	r23, Z+1	; 0x01
 880:	82 81       	ldd	r24, Z+2	; 0x02
 882:	93 81       	ldd	r25, Z+3	; 0x03
 884:	0c 5f       	subi	r16, 0xFC	; 252
 886:	1f 4f       	sbci	r17, 0xFF	; 255
 888:	06 c0       	rjmp	.+12     	; 0x896 <vfprintf+0x29c>
 88a:	60 81       	ld	r22, Z
 88c:	71 81       	ldd	r23, Z+1	; 0x01
 88e:	80 e0       	ldi	r24, 0x00	; 0
 890:	90 e0       	ldi	r25, 0x00	; 0
 892:	0e 5f       	subi	r16, 0xFE	; 254
 894:	1f 4f       	sbci	r17, 0xFF	; 255
 896:	a3 01       	movw	r20, r6
 898:	0e 94 30 05 	call	0xa60	; 0xa60 <__ultoa_invert>
 89c:	88 2e       	mov	r8, r24
 89e:	86 18       	sub	r8, r6
 8a0:	fb 2d       	mov	r31, r11
 8a2:	ff 77       	andi	r31, 0x7F	; 127
 8a4:	3f 2e       	mov	r3, r31
 8a6:	36 fe       	sbrs	r3, 6
 8a8:	0d c0       	rjmp	.+26     	; 0x8c4 <vfprintf+0x2ca>
 8aa:	23 2d       	mov	r18, r3
 8ac:	2e 7f       	andi	r18, 0xFE	; 254
 8ae:	a2 2e       	mov	r10, r18
 8b0:	89 14       	cp	r8, r9
 8b2:	58 f4       	brcc	.+22     	; 0x8ca <vfprintf+0x2d0>
 8b4:	34 fe       	sbrs	r3, 4
 8b6:	0b c0       	rjmp	.+22     	; 0x8ce <vfprintf+0x2d4>
 8b8:	32 fc       	sbrc	r3, 2
 8ba:	09 c0       	rjmp	.+18     	; 0x8ce <vfprintf+0x2d4>
 8bc:	83 2d       	mov	r24, r3
 8be:	8e 7e       	andi	r24, 0xEE	; 238
 8c0:	a8 2e       	mov	r10, r24
 8c2:	05 c0       	rjmp	.+10     	; 0x8ce <vfprintf+0x2d4>
 8c4:	b8 2c       	mov	r11, r8
 8c6:	a3 2c       	mov	r10, r3
 8c8:	03 c0       	rjmp	.+6      	; 0x8d0 <vfprintf+0x2d6>
 8ca:	b8 2c       	mov	r11, r8
 8cc:	01 c0       	rjmp	.+2      	; 0x8d0 <vfprintf+0x2d6>
 8ce:	b9 2c       	mov	r11, r9
 8d0:	a4 fe       	sbrs	r10, 4
 8d2:	0f c0       	rjmp	.+30     	; 0x8f2 <vfprintf+0x2f8>
 8d4:	fe 01       	movw	r30, r28
 8d6:	e8 0d       	add	r30, r8
 8d8:	f1 1d       	adc	r31, r1
 8da:	80 81       	ld	r24, Z
 8dc:	80 33       	cpi	r24, 0x30	; 48
 8de:	21 f4       	brne	.+8      	; 0x8e8 <vfprintf+0x2ee>
 8e0:	9a 2d       	mov	r25, r10
 8e2:	99 7e       	andi	r25, 0xE9	; 233
 8e4:	a9 2e       	mov	r10, r25
 8e6:	09 c0       	rjmp	.+18     	; 0x8fa <vfprintf+0x300>
 8e8:	a2 fe       	sbrs	r10, 2
 8ea:	06 c0       	rjmp	.+12     	; 0x8f8 <vfprintf+0x2fe>
 8ec:	b3 94       	inc	r11
 8ee:	b3 94       	inc	r11
 8f0:	04 c0       	rjmp	.+8      	; 0x8fa <vfprintf+0x300>
 8f2:	8a 2d       	mov	r24, r10
 8f4:	86 78       	andi	r24, 0x86	; 134
 8f6:	09 f0       	breq	.+2      	; 0x8fa <vfprintf+0x300>
 8f8:	b3 94       	inc	r11
 8fa:	a3 fc       	sbrc	r10, 3
 8fc:	11 c0       	rjmp	.+34     	; 0x920 <__stack+0x21>
 8fe:	a0 fe       	sbrs	r10, 0
 900:	06 c0       	rjmp	.+12     	; 0x90e <__stack+0xf>
 902:	b2 14       	cp	r11, r2
 904:	88 f4       	brcc	.+34     	; 0x928 <__stack+0x29>
 906:	28 0c       	add	r2, r8
 908:	92 2c       	mov	r9, r2
 90a:	9b 18       	sub	r9, r11
 90c:	0e c0       	rjmp	.+28     	; 0x92a <__stack+0x2b>
 90e:	b2 14       	cp	r11, r2
 910:	60 f4       	brcc	.+24     	; 0x92a <__stack+0x2b>
 912:	b6 01       	movw	r22, r12
 914:	80 e2       	ldi	r24, 0x20	; 32
 916:	90 e0       	ldi	r25, 0x00	; 0
 918:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <fputc>
 91c:	b3 94       	inc	r11
 91e:	f7 cf       	rjmp	.-18     	; 0x90e <__stack+0xf>
 920:	b2 14       	cp	r11, r2
 922:	18 f4       	brcc	.+6      	; 0x92a <__stack+0x2b>
 924:	2b 18       	sub	r2, r11
 926:	02 c0       	rjmp	.+4      	; 0x92c <__stack+0x2d>
 928:	98 2c       	mov	r9, r8
 92a:	21 2c       	mov	r2, r1
 92c:	a4 fe       	sbrs	r10, 4
 92e:	10 c0       	rjmp	.+32     	; 0x950 <__stack+0x51>
 930:	b6 01       	movw	r22, r12
 932:	80 e3       	ldi	r24, 0x30	; 48
 934:	90 e0       	ldi	r25, 0x00	; 0
 936:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <fputc>
 93a:	a2 fe       	sbrs	r10, 2
 93c:	17 c0       	rjmp	.+46     	; 0x96c <__stack+0x6d>
 93e:	a1 fc       	sbrc	r10, 1
 940:	03 c0       	rjmp	.+6      	; 0x948 <__stack+0x49>
 942:	88 e7       	ldi	r24, 0x78	; 120
 944:	90 e0       	ldi	r25, 0x00	; 0
 946:	02 c0       	rjmp	.+4      	; 0x94c <__stack+0x4d>
 948:	88 e5       	ldi	r24, 0x58	; 88
 94a:	90 e0       	ldi	r25, 0x00	; 0
 94c:	b6 01       	movw	r22, r12
 94e:	0c c0       	rjmp	.+24     	; 0x968 <__stack+0x69>
 950:	8a 2d       	mov	r24, r10
 952:	86 78       	andi	r24, 0x86	; 134
 954:	59 f0       	breq	.+22     	; 0x96c <__stack+0x6d>
 956:	a1 fe       	sbrs	r10, 1
 958:	02 c0       	rjmp	.+4      	; 0x95e <__stack+0x5f>
 95a:	8b e2       	ldi	r24, 0x2B	; 43
 95c:	01 c0       	rjmp	.+2      	; 0x960 <__stack+0x61>
 95e:	80 e2       	ldi	r24, 0x20	; 32
 960:	a7 fc       	sbrc	r10, 7
 962:	8d e2       	ldi	r24, 0x2D	; 45
 964:	b6 01       	movw	r22, r12
 966:	90 e0       	ldi	r25, 0x00	; 0
 968:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <fputc>
 96c:	89 14       	cp	r8, r9
 96e:	38 f4       	brcc	.+14     	; 0x97e <__stack+0x7f>
 970:	b6 01       	movw	r22, r12
 972:	80 e3       	ldi	r24, 0x30	; 48
 974:	90 e0       	ldi	r25, 0x00	; 0
 976:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <fputc>
 97a:	9a 94       	dec	r9
 97c:	f7 cf       	rjmp	.-18     	; 0x96c <__stack+0x6d>
 97e:	8a 94       	dec	r8
 980:	f3 01       	movw	r30, r6
 982:	e8 0d       	add	r30, r8
 984:	f1 1d       	adc	r31, r1
 986:	80 81       	ld	r24, Z
 988:	b6 01       	movw	r22, r12
 98a:	90 e0       	ldi	r25, 0x00	; 0
 98c:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <fputc>
 990:	81 10       	cpse	r8, r1
 992:	f5 cf       	rjmp	.-22     	; 0x97e <__stack+0x7f>
 994:	22 20       	and	r2, r2
 996:	09 f4       	brne	.+2      	; 0x99a <__stack+0x9b>
 998:	42 ce       	rjmp	.-892    	; 0x61e <vfprintf+0x24>
 99a:	b6 01       	movw	r22, r12
 99c:	80 e2       	ldi	r24, 0x20	; 32
 99e:	90 e0       	ldi	r25, 0x00	; 0
 9a0:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <fputc>
 9a4:	2a 94       	dec	r2
 9a6:	f6 cf       	rjmp	.-20     	; 0x994 <__stack+0x95>
 9a8:	f6 01       	movw	r30, r12
 9aa:	86 81       	ldd	r24, Z+6	; 0x06
 9ac:	97 81       	ldd	r25, Z+7	; 0x07
 9ae:	02 c0       	rjmp	.+4      	; 0x9b4 <__stack+0xb5>
 9b0:	8f ef       	ldi	r24, 0xFF	; 255
 9b2:	9f ef       	ldi	r25, 0xFF	; 255
 9b4:	2b 96       	adiw	r28, 0x0b	; 11
 9b6:	e2 e1       	ldi	r30, 0x12	; 18
 9b8:	0c 94 aa 05 	jmp	0xb54	; 0xb54 <__epilogue_restores__>

000009bc <strnlen_P>:
 9bc:	fc 01       	movw	r30, r24
 9be:	05 90       	lpm	r0, Z+
 9c0:	61 50       	subi	r22, 0x01	; 1
 9c2:	70 40       	sbci	r23, 0x00	; 0
 9c4:	01 10       	cpse	r0, r1
 9c6:	d8 f7       	brcc	.-10     	; 0x9be <strnlen_P+0x2>
 9c8:	80 95       	com	r24
 9ca:	90 95       	com	r25
 9cc:	8e 0f       	add	r24, r30
 9ce:	9f 1f       	adc	r25, r31
 9d0:	08 95       	ret

000009d2 <strnlen>:
 9d2:	fc 01       	movw	r30, r24
 9d4:	61 50       	subi	r22, 0x01	; 1
 9d6:	70 40       	sbci	r23, 0x00	; 0
 9d8:	01 90       	ld	r0, Z+
 9da:	01 10       	cpse	r0, r1
 9dc:	d8 f7       	brcc	.-10     	; 0x9d4 <strnlen+0x2>
 9de:	80 95       	com	r24
 9e0:	90 95       	com	r25
 9e2:	8e 0f       	add	r24, r30
 9e4:	9f 1f       	adc	r25, r31
 9e6:	08 95       	ret

000009e8 <fputc>:
 9e8:	0f 93       	push	r16
 9ea:	1f 93       	push	r17
 9ec:	cf 93       	push	r28
 9ee:	df 93       	push	r29
 9f0:	fb 01       	movw	r30, r22
 9f2:	23 81       	ldd	r18, Z+3	; 0x03
 9f4:	21 fd       	sbrc	r18, 1
 9f6:	03 c0       	rjmp	.+6      	; 0x9fe <fputc+0x16>
 9f8:	8f ef       	ldi	r24, 0xFF	; 255
 9fa:	9f ef       	ldi	r25, 0xFF	; 255
 9fc:	2c c0       	rjmp	.+88     	; 0xa56 <fputc+0x6e>
 9fe:	22 ff       	sbrs	r18, 2
 a00:	16 c0       	rjmp	.+44     	; 0xa2e <fputc+0x46>
 a02:	46 81       	ldd	r20, Z+6	; 0x06
 a04:	57 81       	ldd	r21, Z+7	; 0x07
 a06:	24 81       	ldd	r18, Z+4	; 0x04
 a08:	35 81       	ldd	r19, Z+5	; 0x05
 a0a:	42 17       	cp	r20, r18
 a0c:	53 07       	cpc	r21, r19
 a0e:	44 f4       	brge	.+16     	; 0xa20 <fputc+0x38>
 a10:	a0 81       	ld	r26, Z
 a12:	b1 81       	ldd	r27, Z+1	; 0x01
 a14:	9d 01       	movw	r18, r26
 a16:	2f 5f       	subi	r18, 0xFF	; 255
 a18:	3f 4f       	sbci	r19, 0xFF	; 255
 a1a:	31 83       	std	Z+1, r19	; 0x01
 a1c:	20 83       	st	Z, r18
 a1e:	8c 93       	st	X, r24
 a20:	26 81       	ldd	r18, Z+6	; 0x06
 a22:	37 81       	ldd	r19, Z+7	; 0x07
 a24:	2f 5f       	subi	r18, 0xFF	; 255
 a26:	3f 4f       	sbci	r19, 0xFF	; 255
 a28:	37 83       	std	Z+7, r19	; 0x07
 a2a:	26 83       	std	Z+6, r18	; 0x06
 a2c:	14 c0       	rjmp	.+40     	; 0xa56 <fputc+0x6e>
 a2e:	8b 01       	movw	r16, r22
 a30:	ec 01       	movw	r28, r24
 a32:	fb 01       	movw	r30, r22
 a34:	00 84       	ldd	r0, Z+8	; 0x08
 a36:	f1 85       	ldd	r31, Z+9	; 0x09
 a38:	e0 2d       	mov	r30, r0
 a3a:	09 95       	icall
 a3c:	89 2b       	or	r24, r25
 a3e:	e1 f6       	brne	.-72     	; 0x9f8 <fputc+0x10>
 a40:	d8 01       	movw	r26, r16
 a42:	16 96       	adiw	r26, 0x06	; 6
 a44:	8d 91       	ld	r24, X+
 a46:	9c 91       	ld	r25, X
 a48:	17 97       	sbiw	r26, 0x07	; 7
 a4a:	01 96       	adiw	r24, 0x01	; 1
 a4c:	17 96       	adiw	r26, 0x07	; 7
 a4e:	9c 93       	st	X, r25
 a50:	8e 93       	st	-X, r24
 a52:	16 97       	sbiw	r26, 0x06	; 6
 a54:	ce 01       	movw	r24, r28
 a56:	df 91       	pop	r29
 a58:	cf 91       	pop	r28
 a5a:	1f 91       	pop	r17
 a5c:	0f 91       	pop	r16
 a5e:	08 95       	ret

00000a60 <__ultoa_invert>:
 a60:	fa 01       	movw	r30, r20
 a62:	aa 27       	eor	r26, r26
 a64:	28 30       	cpi	r18, 0x08	; 8
 a66:	51 f1       	breq	.+84     	; 0xabc <__ultoa_invert+0x5c>
 a68:	20 31       	cpi	r18, 0x10	; 16
 a6a:	81 f1       	breq	.+96     	; 0xacc <__ultoa_invert+0x6c>
 a6c:	e8 94       	clt
 a6e:	6f 93       	push	r22
 a70:	6e 7f       	andi	r22, 0xFE	; 254
 a72:	6e 5f       	subi	r22, 0xFE	; 254
 a74:	7f 4f       	sbci	r23, 0xFF	; 255
 a76:	8f 4f       	sbci	r24, 0xFF	; 255
 a78:	9f 4f       	sbci	r25, 0xFF	; 255
 a7a:	af 4f       	sbci	r26, 0xFF	; 255
 a7c:	b1 e0       	ldi	r27, 0x01	; 1
 a7e:	3e d0       	rcall	.+124    	; 0xafc <__ultoa_invert+0x9c>
 a80:	b4 e0       	ldi	r27, 0x04	; 4
 a82:	3c d0       	rcall	.+120    	; 0xafc <__ultoa_invert+0x9c>
 a84:	67 0f       	add	r22, r23
 a86:	78 1f       	adc	r23, r24
 a88:	89 1f       	adc	r24, r25
 a8a:	9a 1f       	adc	r25, r26
 a8c:	a1 1d       	adc	r26, r1
 a8e:	68 0f       	add	r22, r24
 a90:	79 1f       	adc	r23, r25
 a92:	8a 1f       	adc	r24, r26
 a94:	91 1d       	adc	r25, r1
 a96:	a1 1d       	adc	r26, r1
 a98:	6a 0f       	add	r22, r26
 a9a:	71 1d       	adc	r23, r1
 a9c:	81 1d       	adc	r24, r1
 a9e:	91 1d       	adc	r25, r1
 aa0:	a1 1d       	adc	r26, r1
 aa2:	20 d0       	rcall	.+64     	; 0xae4 <__ultoa_invert+0x84>
 aa4:	09 f4       	brne	.+2      	; 0xaa8 <__ultoa_invert+0x48>
 aa6:	68 94       	set
 aa8:	3f 91       	pop	r19
 aaa:	2a e0       	ldi	r18, 0x0A	; 10
 aac:	26 9f       	mul	r18, r22
 aae:	11 24       	eor	r1, r1
 ab0:	30 19       	sub	r19, r0
 ab2:	30 5d       	subi	r19, 0xD0	; 208
 ab4:	31 93       	st	Z+, r19
 ab6:	de f6       	brtc	.-74     	; 0xa6e <__ultoa_invert+0xe>
 ab8:	cf 01       	movw	r24, r30
 aba:	08 95       	ret
 abc:	46 2f       	mov	r20, r22
 abe:	47 70       	andi	r20, 0x07	; 7
 ac0:	40 5d       	subi	r20, 0xD0	; 208
 ac2:	41 93       	st	Z+, r20
 ac4:	b3 e0       	ldi	r27, 0x03	; 3
 ac6:	0f d0       	rcall	.+30     	; 0xae6 <__ultoa_invert+0x86>
 ac8:	c9 f7       	brne	.-14     	; 0xabc <__ultoa_invert+0x5c>
 aca:	f6 cf       	rjmp	.-20     	; 0xab8 <__ultoa_invert+0x58>
 acc:	46 2f       	mov	r20, r22
 ace:	4f 70       	andi	r20, 0x0F	; 15
 ad0:	40 5d       	subi	r20, 0xD0	; 208
 ad2:	4a 33       	cpi	r20, 0x3A	; 58
 ad4:	18 f0       	brcs	.+6      	; 0xadc <__ultoa_invert+0x7c>
 ad6:	49 5d       	subi	r20, 0xD9	; 217
 ad8:	31 fd       	sbrc	r19, 1
 ada:	40 52       	subi	r20, 0x20	; 32
 adc:	41 93       	st	Z+, r20
 ade:	02 d0       	rcall	.+4      	; 0xae4 <__ultoa_invert+0x84>
 ae0:	a9 f7       	brne	.-22     	; 0xacc <__ultoa_invert+0x6c>
 ae2:	ea cf       	rjmp	.-44     	; 0xab8 <__ultoa_invert+0x58>
 ae4:	b4 e0       	ldi	r27, 0x04	; 4
 ae6:	a6 95       	lsr	r26
 ae8:	97 95       	ror	r25
 aea:	87 95       	ror	r24
 aec:	77 95       	ror	r23
 aee:	67 95       	ror	r22
 af0:	ba 95       	dec	r27
 af2:	c9 f7       	brne	.-14     	; 0xae6 <__ultoa_invert+0x86>
 af4:	00 97       	sbiw	r24, 0x00	; 0
 af6:	61 05       	cpc	r22, r1
 af8:	71 05       	cpc	r23, r1
 afa:	08 95       	ret
 afc:	9b 01       	movw	r18, r22
 afe:	ac 01       	movw	r20, r24
 b00:	0a 2e       	mov	r0, r26
 b02:	06 94       	lsr	r0
 b04:	57 95       	ror	r21
 b06:	47 95       	ror	r20
 b08:	37 95       	ror	r19
 b0a:	27 95       	ror	r18
 b0c:	ba 95       	dec	r27
 b0e:	c9 f7       	brne	.-14     	; 0xb02 <__ultoa_invert+0xa2>
 b10:	62 0f       	add	r22, r18
 b12:	73 1f       	adc	r23, r19
 b14:	84 1f       	adc	r24, r20
 b16:	95 1f       	adc	r25, r21
 b18:	a0 1d       	adc	r26, r0
 b1a:	08 95       	ret

00000b1c <__prologue_saves__>:
 b1c:	2f 92       	push	r2
 b1e:	3f 92       	push	r3
 b20:	4f 92       	push	r4
 b22:	5f 92       	push	r5
 b24:	6f 92       	push	r6
 b26:	7f 92       	push	r7
 b28:	8f 92       	push	r8
 b2a:	9f 92       	push	r9
 b2c:	af 92       	push	r10
 b2e:	bf 92       	push	r11
 b30:	cf 92       	push	r12
 b32:	df 92       	push	r13
 b34:	ef 92       	push	r14
 b36:	ff 92       	push	r15
 b38:	0f 93       	push	r16
 b3a:	1f 93       	push	r17
 b3c:	cf 93       	push	r28
 b3e:	df 93       	push	r29
 b40:	cd b7       	in	r28, 0x3d	; 61
 b42:	de b7       	in	r29, 0x3e	; 62
 b44:	ca 1b       	sub	r28, r26
 b46:	db 0b       	sbc	r29, r27
 b48:	0f b6       	in	r0, 0x3f	; 63
 b4a:	f8 94       	cli
 b4c:	de bf       	out	0x3e, r29	; 62
 b4e:	0f be       	out	0x3f, r0	; 63
 b50:	cd bf       	out	0x3d, r28	; 61
 b52:	09 94       	ijmp

00000b54 <__epilogue_restores__>:
 b54:	2a 88       	ldd	r2, Y+18	; 0x12
 b56:	39 88       	ldd	r3, Y+17	; 0x11
 b58:	48 88       	ldd	r4, Y+16	; 0x10
 b5a:	5f 84       	ldd	r5, Y+15	; 0x0f
 b5c:	6e 84       	ldd	r6, Y+14	; 0x0e
 b5e:	7d 84       	ldd	r7, Y+13	; 0x0d
 b60:	8c 84       	ldd	r8, Y+12	; 0x0c
 b62:	9b 84       	ldd	r9, Y+11	; 0x0b
 b64:	aa 84       	ldd	r10, Y+10	; 0x0a
 b66:	b9 84       	ldd	r11, Y+9	; 0x09
 b68:	c8 84       	ldd	r12, Y+8	; 0x08
 b6a:	df 80       	ldd	r13, Y+7	; 0x07
 b6c:	ee 80       	ldd	r14, Y+6	; 0x06
 b6e:	fd 80       	ldd	r15, Y+5	; 0x05
 b70:	0c 81       	ldd	r16, Y+4	; 0x04
 b72:	1b 81       	ldd	r17, Y+3	; 0x03
 b74:	aa 81       	ldd	r26, Y+2	; 0x02
 b76:	b9 81       	ldd	r27, Y+1	; 0x01
 b78:	ce 0f       	add	r28, r30
 b7a:	d1 1d       	adc	r29, r1
 b7c:	0f b6       	in	r0, 0x3f	; 63
 b7e:	f8 94       	cli
 b80:	de bf       	out	0x3e, r29	; 62
 b82:	0f be       	out	0x3f, r0	; 63
 b84:	cd bf       	out	0x3d, r28	; 61
 b86:	ed 01       	movw	r28, r26
 b88:	08 95       	ret

00000b8a <_exit>:
 b8a:	f8 94       	cli

00000b8c <__stop_program>:
 b8c:	ff cf       	rjmp	.-2      	; 0xb8c <__stop_program>
