
Red Bot Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002c  00800100  00000b2a  00000bbe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b2a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000098  0080012c  0080012c  00000bea  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000bea  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000c48  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e8  00000000  00000000  00000c88  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001022  00000000  00000000  00000d70  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009b1  00000000  00000000  00001d92  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000876  00000000  00000000  00002743  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000024c  00000000  00000000  00002fbc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000677  00000000  00000000  00003208  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000532  00000000  00000000  0000387f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  00003db1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 88 00 	jmp	0x110	; 0x110 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 9e 00 	jmp	0x13c	; 0x13c <__vector_14>
  3c:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__vector_15>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e2       	ldi	r30, 0x2A	; 42
  7c:	fb e0       	ldi	r31, 0x0B	; 11
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 32       	cpi	r26, 0x2C	; 44
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ac e2       	ldi	r26, 0x2C	; 44
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 3c       	cpi	r26, 0xC4	; 196
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 c5 00 	call	0x18a	; 0x18a <main>
  9e:	0c 94 93 05 	jmp	0xb26	; 0xb26 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <initialize_all>:
		DDRD |= (1 << DDD5);			// Set PIND5 as Output
		new_left_duty_cycle = pwm_duty_cycle;			// Set Compare register for desired duty cycle
		break;
		case MOTOR_RIGHT_PWM:
		DDRD |= (1 << DDD6);			// Set PIND6 as Output
		new_right_duty_cycle = pwm_duty_cycle;			// Set Compare registers for desired duty cycle
  a6:	78 94       	sei
  a8:	8a b1       	in	r24, 0x0a	; 10
  aa:	84 63       	ori	r24, 0x34	; 52
  ac:	8a b9       	out	0x0a, r24	; 10
  ae:	84 b1       	in	r24, 0x04	; 4
  b0:	80 6c       	ori	r24, 0xC0	; 192
  b2:	84 b9       	out	0x04, r24	; 4
  b4:	20 9a       	sbi	0x04, 0	; 4
  b6:	0e 94 44 01 	call	0x288	; 0x288 <uart_init>
  ba:	ee eb       	ldi	r30, 0xBE	; 190
  bc:	f1 e0       	ldi	r31, 0x01	; 1
  be:	80 e0       	ldi	r24, 0x00	; 0
  c0:	91 e0       	ldi	r25, 0x01	; 1
  c2:	95 83       	std	Z+5, r25	; 0x05
  c4:	84 83       	std	Z+4, r24	; 0x04
  c6:	93 83       	std	Z+3, r25	; 0x03
  c8:	82 83       	std	Z+2, r24	; 0x02
  ca:	91 83       	std	Z+1, r25	; 0x01
  cc:	80 83       	st	Z, r24
  ce:	ea e7       	ldi	r30, 0x7A	; 122
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	80 81       	ld	r24, Z
  d4:	87 60       	ori	r24, 0x07	; 7
  d6:	80 83       	st	Z, r24
  d8:	80 81       	ld	r24, Z
  da:	80 68       	ori	r24, 0x80	; 128
  dc:	80 83       	st	Z, r24
  de:	ec e7       	ldi	r30, 0x7C	; 124
  e0:	f0 e0       	ldi	r31, 0x00	; 0
  e2:	80 81       	ld	r24, Z
  e4:	80 64       	ori	r24, 0x40	; 64
  e6:	80 83       	st	Z, r24
  e8:	89 e6       	ldi	r24, 0x69	; 105
  ea:	98 e1       	ldi	r25, 0x18	; 24
  ec:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
  f0:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
  f4:	e1 e8       	ldi	r30, 0x81	; 129
  f6:	f0 e0       	ldi	r31, 0x00	; 0
  f8:	80 81       	ld	r24, Z
  fa:	83 60       	ori	r24, 0x03	; 3
  fc:	80 83       	st	Z, r24
  fe:	80 81       	ld	r24, Z
 100:	88 60       	ori	r24, 0x08	; 8
 102:	80 83       	st	Z, r24
 104:	ef e6       	ldi	r30, 0x6F	; 111
 106:	f0 e0       	ldi	r31, 0x00	; 0
 108:	80 81       	ld	r24, Z
 10a:	82 60       	ori	r24, 0x02	; 2
 10c:	80 83       	st	Z, r24
 10e:	08 95       	ret

00000110 <__vector_11>:
 110:	1f 92       	push	r1
 112:	0f 92       	push	r0
 114:	0f b6       	in	r0, 0x3f	; 63
 116:	0f 92       	push	r0
 118:	11 24       	eor	r1, r1
 11a:	8f 93       	push	r24
 11c:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <program_counter_one>
 120:	8f 5f       	subi	r24, 0xFF	; 255
 122:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <program_counter_one>
 126:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <__data_end>
 12a:	8f 5f       	subi	r24, 0xFF	; 255
 12c:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <__data_end>
 130:	8f 91       	pop	r24
 132:	0f 90       	pop	r0
 134:	0f be       	out	0x3f, r0	; 63
 136:	0f 90       	pop	r0
 138:	1f 90       	pop	r1
 13a:	18 95       	reti

0000013c <__vector_14>:
 13c:	1f 92       	push	r1
 13e:	0f 92       	push	r0
 140:	0f b6       	in	r0, 0x3f	; 63
 142:	0f 92       	push	r0
 144:	11 24       	eor	r1, r1
 146:	8f 93       	push	r24
 148:	80 91 bb 01 	lds	r24, 0x01BB	; 0x8001bb <new_right_duty_cycle>
 14c:	87 bd       	out	0x27, r24	; 39
 14e:	8f 91       	pop	r24
 150:	0f 90       	pop	r0
 152:	0f be       	out	0x3f, r0	; 63
 154:	0f 90       	pop	r0
 156:	1f 90       	pop	r1
 158:	18 95       	reti

0000015a <__vector_15>:
 15a:	1f 92       	push	r1
 15c:	0f 92       	push	r0
 15e:	0f b6       	in	r0, 0x3f	; 63
 160:	0f 92       	push	r0
 162:	11 24       	eor	r1, r1
 164:	8f 93       	push	r24
 166:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <new_left_duty_cycle>
 16a:	88 bd       	out	0x28, r24	; 40
 16c:	8f 91       	pop	r24
 16e:	0f 90       	pop	r0
 170:	0f be       	out	0x3f, r0	; 63
 172:	0f 90       	pop	r0
 174:	1f 90       	pop	r1
 176:	18 95       	reti

00000178 <start_ADC_and_wait>:
 178:	ea e7       	ldi	r30, 0x7A	; 122
 17a:	f0 e0       	ldi	r31, 0x00	; 0
 17c:	80 81       	ld	r24, Z
 17e:	80 64       	ori	r24, 0x40	; 64
 180:	80 83       	st	Z, r24
 182:	80 81       	ld	r24, Z
 184:	86 fd       	sbrc	r24, 6
 186:	fd cf       	rjmp	.-6      	; 0x182 <start_ADC_and_wait+0xa>
 188:	08 95       	ret

0000018a <main>:
	}
}

int main(void)
{
    initialize_all();
 18a:	0e 94 53 00 	call	0xa6	; 0xa6 <initialize_all>
    while(1){
		
		ADMUX = LINE_LEFT_IN;
 18e:	0f 2e       	mov	r0, r31
 190:	fc e7       	ldi	r31, 0x7C	; 124
 192:	8f 2e       	mov	r8, r31
 194:	91 2c       	mov	r9, r1
 196:	f0 2d       	mov	r31, r0
		ADMUX |= (1 << REFS0);
		start_ADC_and_wait();
		Ain = (ADCL);
 198:	0f 2e       	mov	r0, r31
 19a:	f8 e7       	ldi	r31, 0x78	; 120
 19c:	af 2e       	mov	r10, r31
 19e:	b1 2c       	mov	r11, r1
 1a0:	f0 2d       	mov	r31, r0
		Ain |= (ADCH << 8);
 1a2:	0f 2e       	mov	r0, r31
 1a4:	f9 e7       	ldi	r31, 0x79	; 121
 1a6:	cf 2e       	mov	r12, r31
 1a8:	d1 2c       	mov	r13, r1
 1aa:	f0 2d       	mov	r31, r0
		
		fprintf(stdout, "Left: %d\n", Ain);
 1ac:	0f 2e       	mov	r0, r31
 1ae:	fe e0       	ldi	r31, 0x0E	; 14
 1b0:	ef 2e       	mov	r14, r31
 1b2:	f1 e0       	ldi	r31, 0x01	; 1
 1b4:	ff 2e       	mov	r15, r31
 1b6:	f0 2d       	mov	r31, r0
 1b8:	ce eb       	ldi	r28, 0xBE	; 190
 1ba:	d1 e0       	ldi	r29, 0x01	; 1
		
		ADMUX = LINE_CENTER_IN;
 1bc:	0f 2e       	mov	r0, r31
 1be:	f6 e0       	ldi	r31, 0x06	; 6
 1c0:	7f 2e       	mov	r7, r31
 1c2:	f0 2d       	mov	r31, r0
		ADMUX |= (1 << REFS0);
		start_ADC_and_wait();
		Ain = (ADCL);
		Ain |= (ADCH << 8);
		
		fprintf(stdout, "Center: %d\n", Ain);
 1c4:	08 e1       	ldi	r16, 0x18	; 24
 1c6:	11 e0       	ldi	r17, 0x01	; 1
int main(void)
{
    initialize_all();
    while(1){
		
		ADMUX = LINE_LEFT_IN;
 1c8:	f4 01       	movw	r30, r8
 1ca:	10 82       	st	Z, r1
		ADMUX |= (1 << REFS0);
 1cc:	80 81       	ld	r24, Z
 1ce:	80 64       	ori	r24, 0x40	; 64
 1d0:	80 83       	st	Z, r24
		start_ADC_and_wait();
 1d2:	0e 94 bc 00 	call	0x178	; 0x178 <start_ADC_and_wait>
		Ain = (ADCL);
 1d6:	f5 01       	movw	r30, r10
 1d8:	80 81       	ld	r24, Z
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	90 93 b8 01 	sts	0x01B8, r25	; 0x8001b8 <Ain+0x1>
 1e0:	80 93 b7 01 	sts	0x01B7, r24	; 0x8001b7 <Ain>
		Ain |= (ADCH << 8);
 1e4:	f6 01       	movw	r30, r12
 1e6:	20 81       	ld	r18, Z
 1e8:	80 91 b7 01 	lds	r24, 0x01B7	; 0x8001b7 <Ain>
 1ec:	90 91 b8 01 	lds	r25, 0x01B8	; 0x8001b8 <Ain+0x1>
 1f0:	92 2b       	or	r25, r18
 1f2:	90 93 b8 01 	sts	0x01B8, r25	; 0x8001b8 <Ain+0x1>
 1f6:	80 93 b7 01 	sts	0x01B7, r24	; 0x8001b7 <Ain>
		
		fprintf(stdout, "Left: %d\n", Ain);
 1fa:	80 91 b7 01 	lds	r24, 0x01B7	; 0x8001b7 <Ain>
 1fe:	90 91 b8 01 	lds	r25, 0x01B8	; 0x8001b8 <Ain+0x1>
 202:	9f 93       	push	r25
 204:	8f 93       	push	r24
 206:	ff 92       	push	r15
 208:	ef 92       	push	r14
 20a:	8b 81       	ldd	r24, Y+3	; 0x03
 20c:	8f 93       	push	r24
 20e:	8a 81       	ldd	r24, Y+2	; 0x02
 210:	8f 93       	push	r24
 212:	0e 94 85 02 	call	0x50a	; 0x50a <fprintf>
		
		ADMUX = LINE_CENTER_IN;
 216:	f4 01       	movw	r30, r8
 218:	70 82       	st	Z, r7
		ADMUX |= (1 << REFS0);
 21a:	80 81       	ld	r24, Z
 21c:	80 64       	ori	r24, 0x40	; 64
 21e:	80 83       	st	Z, r24
		start_ADC_and_wait();
 220:	0e 94 bc 00 	call	0x178	; 0x178 <start_ADC_and_wait>
		Ain = (ADCL);
 224:	f5 01       	movw	r30, r10
 226:	80 81       	ld	r24, Z
 228:	90 e0       	ldi	r25, 0x00	; 0
 22a:	90 93 b8 01 	sts	0x01B8, r25	; 0x8001b8 <Ain+0x1>
 22e:	80 93 b7 01 	sts	0x01B7, r24	; 0x8001b7 <Ain>
		Ain |= (ADCH << 8);
 232:	f6 01       	movw	r30, r12
 234:	20 81       	ld	r18, Z
 236:	80 91 b7 01 	lds	r24, 0x01B7	; 0x8001b7 <Ain>
 23a:	90 91 b8 01 	lds	r25, 0x01B8	; 0x8001b8 <Ain+0x1>
 23e:	92 2b       	or	r25, r18
 240:	90 93 b8 01 	sts	0x01B8, r25	; 0x8001b8 <Ain+0x1>
 244:	80 93 b7 01 	sts	0x01B7, r24	; 0x8001b7 <Ain>
		
		fprintf(stdout, "Center: %d\n", Ain);
 248:	80 91 b7 01 	lds	r24, 0x01B7	; 0x8001b7 <Ain>
 24c:	90 91 b8 01 	lds	r25, 0x01B8	; 0x8001b8 <Ain+0x1>
 250:	9f 93       	push	r25
 252:	8f 93       	push	r24
 254:	1f 93       	push	r17
 256:	0f 93       	push	r16
 258:	8b 81       	ldd	r24, Y+3	; 0x03
 25a:	8f 93       	push	r24
 25c:	8a 81       	ldd	r24, Y+2	; 0x02
 25e:	8f 93       	push	r24
 260:	0e 94 85 02 	call	0x50a	; 0x50a <fprintf>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 264:	ff ef       	ldi	r31, 0xFF	; 255
 266:	21 ee       	ldi	r18, 0xE1	; 225
 268:	84 e0       	ldi	r24, 0x04	; 4
 26a:	f1 50       	subi	r31, 0x01	; 1
 26c:	20 40       	sbci	r18, 0x00	; 0
 26e:	80 40       	sbci	r24, 0x00	; 0
 270:	e1 f7       	brne	.-8      	; 0x26a <main+0xe0>
 272:	00 c0       	rjmp	.+0      	; 0x274 <main+0xea>
 274:	00 00       	nop
 276:	ed b7       	in	r30, 0x3d	; 61
 278:	fe b7       	in	r31, 0x3e	; 62
 27a:	3c 96       	adiw	r30, 0x0c	; 12
 27c:	0f b6       	in	r0, 0x3f	; 63
 27e:	f8 94       	cli
 280:	fe bf       	out	0x3e, r31	; 62
 282:	0f be       	out	0x3f, r0	; 63
 284:	ed bf       	out	0x3d, r30	; 61
 286:	a0 cf       	rjmp	.-192    	; 0x1c8 <main+0x3e>

00000288 <uart_init>:
{
#if F_CPU < 2000000UL && defined(U2X)
  UCSR0A = _BV(U2X);             /* improve baud rate error by using 2x clk */
  UBRR0L = (F_CPU / (8UL * UART_BAUD)) - 1;
#else
  UBRR0L = (F_CPU / (16UL * UART_BAUD)) - 1;
 288:	87 e6       	ldi	r24, 0x67	; 103
 28a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
#endif
  UCSR0B = _BV(TXEN0) | _BV(RXEN0); /* tx/rx enable */
 28e:	88 e1       	ldi	r24, 0x18	; 24
 290:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 294:	08 95       	ret

00000296 <uart_putchar>:
 * Send character c down the UART Tx, wait until tx holding register
 * is empty.
 */
int
uart_putchar(char c, FILE *stream)
{
 296:	cf 93       	push	r28
 298:	c8 2f       	mov	r28, r24

  if (c == '\a')
 29a:	87 30       	cpi	r24, 0x07	; 7
 29c:	69 f4       	brne	.+26     	; 0x2b8 <uart_putchar+0x22>
    {
      fputs("*ring*\n", stderr);
 29e:	20 91 c2 01 	lds	r18, 0x01C2	; 0x8001c2 <__iob+0x4>
 2a2:	30 91 c3 01 	lds	r19, 0x01C3	; 0x8001c3 <__iob+0x5>
 2a6:	47 e0       	ldi	r20, 0x07	; 7
 2a8:	50 e0       	ldi	r21, 0x00	; 0
 2aa:	61 e0       	ldi	r22, 0x01	; 1
 2ac:	70 e0       	ldi	r23, 0x00	; 0
 2ae:	84 e2       	ldi	r24, 0x24	; 36
 2b0:	91 e0       	ldi	r25, 0x01	; 1
 2b2:	0e 94 97 02 	call	0x52e	; 0x52e <fwrite>
      return 0;
 2b6:	0c c0       	rjmp	.+24     	; 0x2d0 <uart_putchar+0x3a>
    }

  if (c == '\n')
 2b8:	8a 30       	cpi	r24, 0x0A	; 10
 2ba:	19 f4       	brne	.+6      	; 0x2c2 <uart_putchar+0x2c>
    uart_putchar('\r', stream);
 2bc:	8d e0       	ldi	r24, 0x0D	; 13
 2be:	0e 94 4b 01 	call	0x296	; 0x296 <uart_putchar>
  loop_until_bit_is_set(UCSR0A, UDRE0);
 2c2:	e0 ec       	ldi	r30, 0xC0	; 192
 2c4:	f0 e0       	ldi	r31, 0x00	; 0
 2c6:	80 81       	ld	r24, Z
 2c8:	85 ff       	sbrs	r24, 5
 2ca:	fd cf       	rjmp	.-6      	; 0x2c6 <uart_putchar+0x30>
  UDR0 = c;
 2cc:	c0 93 c6 00 	sts	0x00C6, r28	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>

  return 0;
}
 2d0:	80 e0       	ldi	r24, 0x00	; 0
 2d2:	90 e0       	ldi	r25, 0x00	; 0
 2d4:	cf 91       	pop	r28
 2d6:	08 95       	ret

000002d8 <uart_getchar>:
 * Successive calls to uart_getchar() will be satisfied from the
 * internal buffer until that buffer is emptied again.
 */
int
uart_getchar(FILE *stream)
{
 2d8:	6f 92       	push	r6
 2da:	7f 92       	push	r7
 2dc:	8f 92       	push	r8
 2de:	9f 92       	push	r9
 2e0:	af 92       	push	r10
 2e2:	bf 92       	push	r11
 2e4:	cf 92       	push	r12
 2e6:	df 92       	push	r13
 2e8:	ef 92       	push	r14
 2ea:	ff 92       	push	r15
 2ec:	0f 93       	push	r16
 2ee:	1f 93       	push	r17
 2f0:	cf 93       	push	r28
 2f2:	df 93       	push	r29
  uint8_t c;
  char *cp, *cp2;
  static char b[RX_BUFSIZE];
  static char *rxp;

  if (rxp == 0)
 2f4:	20 91 7e 01 	lds	r18, 0x017E	; 0x80017e <rxp.1827>
 2f8:	30 91 7f 01 	lds	r19, 0x017F	; 0x80017f <rxp.1827+0x1>
 2fc:	23 2b       	or	r18, r19
 2fe:	09 f0       	breq	.+2      	; 0x302 <uart_getchar+0x2a>
 300:	da c0       	rjmp	.+436    	; 0x4b6 <__LOCK_REGION_LENGTH__+0xb6>
 302:	8c 01       	movw	r16, r24
 304:	0f 2e       	mov	r0, r31
 306:	fe e2       	ldi	r31, 0x2E	; 46
 308:	8f 2e       	mov	r8, r31
 30a:	f1 e0       	ldi	r31, 0x01	; 1
 30c:	9f 2e       	mov	r9, r31
 30e:	f0 2d       	mov	r31, r0
    for (cp = b;;)
      {
	loop_until_bit_is_set(UCSR0A, RXC0);
 310:	c0 ec       	ldi	r28, 0xC0	; 192
 312:	d0 e0       	ldi	r29, 0x00	; 0
	if (UCSR0A & _BV(FE0))
	  return _FDEV_EOF;
	if (UCSR0A & _BV(DOR0))
	  return _FDEV_ERR;
	c = UDR0;
 314:	0f 2e       	mov	r0, r31
 316:	f6 ec       	ldi	r31, 0xC6	; 198
 318:	cf 2e       	mov	r12, r31
 31a:	d1 2c       	mov	r13, r1
 31c:	f0 2d       	mov	r31, r0
 31e:	54 01       	movw	r10, r8
 320:	0f 2e       	mov	r0, r31
 322:	fd e2       	ldi	r31, 0x2D	; 45
 324:	6f 2e       	mov	r6, r31
 326:	f1 e0       	ldi	r31, 0x01	; 1
 328:	7f 2e       	mov	r7, r31
 32a:	f0 2d       	mov	r31, r0
  static char *rxp;

  if (rxp == 0)
    for (cp = b;;)
      {
	loop_until_bit_is_set(UCSR0A, RXC0);
 32c:	88 81       	ld	r24, Y
 32e:	88 23       	and	r24, r24
 330:	ec f7       	brge	.-6      	; 0x32c <uart_getchar+0x54>
	if (UCSR0A & _BV(FE0))
 332:	88 81       	ld	r24, Y
 334:	84 fd       	sbrc	r24, 4
 336:	d2 c0       	rjmp	.+420    	; 0x4dc <__LOCK_REGION_LENGTH__+0xdc>
	  return _FDEV_EOF;
	if (UCSR0A & _BV(DOR0))
 338:	88 81       	ld	r24, Y
 33a:	83 fd       	sbrc	r24, 3
 33c:	d2 c0       	rjmp	.+420    	; 0x4e2 <__LOCK_REGION_LENGTH__+0xe2>
	  return _FDEV_ERR;
	c = UDR0;
 33e:	f6 01       	movw	r30, r12
 340:	80 81       	ld	r24, Z
	/* behaviour similar to Unix stty ICRNL */
	if (c == '\r')
 342:	8d 30       	cpi	r24, 0x0D	; 13
 344:	11 f0       	breq	.+4      	; 0x34a <uart_getchar+0x72>
	  c = '\n';
	if (c == '\n')
 346:	8a 30       	cpi	r24, 0x0A	; 10
 348:	69 f4       	brne	.+26     	; 0x364 <uart_getchar+0x8c>
	  {
	    *cp = c;
 34a:	8a e0       	ldi	r24, 0x0A	; 10
 34c:	f4 01       	movw	r30, r8
 34e:	80 83       	st	Z, r24
	    uart_putchar(c, stream);
 350:	b8 01       	movw	r22, r16
 352:	0e 94 4b 01 	call	0x296	; 0x296 <uart_putchar>
	    rxp = b;
 356:	8e e2       	ldi	r24, 0x2E	; 46
 358:	91 e0       	ldi	r25, 0x01	; 1
 35a:	90 93 7f 01 	sts	0x017F, r25	; 0x80017f <rxp.1827+0x1>
 35e:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <rxp.1827>
	    break;
 362:	a9 c0       	rjmp	.+338    	; 0x4b6 <__LOCK_REGION_LENGTH__+0xb6>
	  }
	else if (c == '\t')
 364:	89 30       	cpi	r24, 0x09	; 9
 366:	39 f0       	breq	.+14     	; 0x376 <uart_getchar+0x9e>
	  c = ' ';

	if ((c >= (uint8_t)' ' && c <= (uint8_t)'\x7e') ||
 368:	90 ee       	ldi	r25, 0xE0	; 224
 36a:	98 0f       	add	r25, r24
 36c:	9f 35       	cpi	r25, 0x5F	; 95
 36e:	20 f0       	brcs	.+8      	; 0x378 <uart_getchar+0xa0>
 370:	80 3a       	cpi	r24, 0xA0	; 160
 372:	b8 f0       	brcs	.+46     	; 0x3a2 <uart_getchar+0xca>
 374:	01 c0       	rjmp	.+2      	; 0x378 <uart_getchar+0xa0>
	    uart_putchar(c, stream);
	    rxp = b;
	    break;
	  }
	else if (c == '\t')
	  c = ' ';
 376:	80 e2       	ldi	r24, 0x20	; 32

	if ((c >= (uint8_t)' ' && c <= (uint8_t)'\x7e') ||
	    c >= (uint8_t)'\xa0')
	  {
	    if (cp == b + RX_BUFSIZE - 1)
 378:	fd e7       	ldi	r31, 0x7D	; 125
 37a:	8f 16       	cp	r8, r31
 37c:	f1 e0       	ldi	r31, 0x01	; 1
 37e:	9f 06       	cpc	r9, r31
 380:	29 f4       	brne	.+10     	; 0x38c <uart_getchar+0xb4>
	      uart_putchar('\a', stream);
 382:	b8 01       	movw	r22, r16
 384:	87 e0       	ldi	r24, 0x07	; 7
 386:	0e 94 4b 01 	call	0x296	; 0x296 <uart_putchar>
 38a:	d0 cf       	rjmp	.-96     	; 0x32c <uart_getchar+0x54>
	    else
	      {
		*cp++ = c;
 38c:	74 01       	movw	r14, r8
 38e:	9f ef       	ldi	r25, 0xFF	; 255
 390:	e9 1a       	sub	r14, r25
 392:	f9 0a       	sbc	r15, r25
 394:	f4 01       	movw	r30, r8
 396:	80 83       	st	Z, r24
		uart_putchar(c, stream);
 398:	b8 01       	movw	r22, r16
 39a:	0e 94 4b 01 	call	0x296	; 0x296 <uart_putchar>
	  {
	    if (cp == b + RX_BUFSIZE - 1)
	      uart_putchar('\a', stream);
	    else
	      {
		*cp++ = c;
 39e:	47 01       	movw	r8, r14
 3a0:	c5 cf       	rjmp	.-118    	; 0x32c <uart_getchar+0x54>
		uart_putchar(c, stream);
	      }
	    continue;
	  }

	switch (c)
 3a2:	82 31       	cpi	r24, 0x12	; 18
 3a4:	d1 f1       	breq	.+116    	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
 3a6:	30 f4       	brcc	.+12     	; 0x3b4 <uart_getchar+0xdc>
 3a8:	83 30       	cpi	r24, 0x03	; 3
 3aa:	09 f4       	brne	.+2      	; 0x3ae <uart_getchar+0xd6>
 3ac:	9d c0       	rjmp	.+314    	; 0x4e8 <__LOCK_REGION_LENGTH__+0xe8>
 3ae:	88 30       	cpi	r24, 0x08	; 8
 3b0:	e9 f0       	breq	.+58     	; 0x3ec <uart_getchar+0x114>
 3b2:	bc cf       	rjmp	.-136    	; 0x32c <uart_getchar+0x54>
 3b4:	87 31       	cpi	r24, 0x17	; 23
 3b6:	29 f0       	breq	.+10     	; 0x3c2 <uart_getchar+0xea>
 3b8:	8f 37       	cpi	r24, 0x7F	; 127
 3ba:	c1 f0       	breq	.+48     	; 0x3ec <uart_getchar+0x114>
 3bc:	85 31       	cpi	r24, 0x15	; 21
 3be:	79 f0       	breq	.+30     	; 0x3de <uart_getchar+0x106>
 3c0:	b5 cf       	rjmp	.-150    	; 0x32c <uart_getchar+0x54>
		cp--;
	      }
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
 3c2:	fe e2       	ldi	r31, 0x2E	; 46
 3c4:	8f 16       	cp	r8, r31
 3c6:	f1 e0       	ldi	r31, 0x01	; 1
 3c8:	9f 06       	cpc	r9, r31
 3ca:	09 f0       	breq	.+2      	; 0x3ce <uart_getchar+0xf6>
 3cc:	08 f4       	brcc	.+2      	; 0x3d0 <uart_getchar+0xf8>
 3ce:	ae cf       	rjmp	.-164    	; 0x32c <uart_getchar+0x54>
 3d0:	f4 01       	movw	r30, r8
 3d2:	31 97       	sbiw	r30, 0x01	; 1
 3d4:	80 81       	ld	r24, Z
 3d6:	80 32       	cpi	r24, 0x20	; 32
 3d8:	09 f0       	breq	.+2      	; 0x3dc <uart_getchar+0x104>
 3da:	52 c0       	rjmp	.+164    	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
 3dc:	a7 cf       	rjmp	.-178    	; 0x32c <uart_getchar+0x54>
	    for (cp2 = b; cp2 < cp; cp2++)
	      uart_putchar(*cp2, stream);
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
 3de:	8e e2       	ldi	r24, 0x2E	; 46
 3e0:	88 16       	cp	r8, r24
 3e2:	81 e0       	ldi	r24, 0x01	; 1
 3e4:	98 06       	cpc	r9, r24
 3e6:	09 f0       	breq	.+2      	; 0x3ea <uart_getchar+0x112>
 3e8:	98 f5       	brcc	.+102    	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
 3ea:	a0 cf       	rjmp	.-192    	; 0x32c <uart_getchar+0x54>
	  case 'c' & 0x1f:
	    return -1;

	  case '\b':
	  case '\x7f':
	    if (cp > b)
 3ec:	9e e2       	ldi	r25, 0x2E	; 46
 3ee:	89 16       	cp	r8, r25
 3f0:	91 e0       	ldi	r25, 0x01	; 1
 3f2:	99 06       	cpc	r9, r25
 3f4:	09 f0       	breq	.+2      	; 0x3f8 <uart_getchar+0x120>
 3f6:	08 f4       	brcc	.+2      	; 0x3fa <uart_getchar+0x122>
 3f8:	99 cf       	rjmp	.-206    	; 0x32c <uart_getchar+0x54>
	      {
		uart_putchar('\b', stream);
 3fa:	b8 01       	movw	r22, r16
 3fc:	88 e0       	ldi	r24, 0x08	; 8
 3fe:	0e 94 4b 01 	call	0x296	; 0x296 <uart_putchar>
		uart_putchar(' ', stream);
 402:	b8 01       	movw	r22, r16
 404:	80 e2       	ldi	r24, 0x20	; 32
 406:	0e 94 4b 01 	call	0x296	; 0x296 <uart_putchar>
		uart_putchar('\b', stream);
 40a:	b8 01       	movw	r22, r16
 40c:	88 e0       	ldi	r24, 0x08	; 8
 40e:	0e 94 4b 01 	call	0x296	; 0x296 <uart_putchar>
		cp--;
 412:	e1 e0       	ldi	r30, 0x01	; 1
 414:	8e 1a       	sub	r8, r30
 416:	91 08       	sbc	r9, r1
 418:	89 cf       	rjmp	.-238    	; 0x32c <uart_getchar+0x54>
	      }
	    break;

	  case 'r' & 0x1f:
	    uart_putchar('\r', stream);
 41a:	b8 01       	movw	r22, r16
 41c:	8d e0       	ldi	r24, 0x0D	; 13
 41e:	0e 94 4b 01 	call	0x296	; 0x296 <uart_putchar>
	    for (cp2 = b; cp2 < cp; cp2++)
 422:	fe e2       	ldi	r31, 0x2E	; 46
 424:	8f 16       	cp	r8, r31
 426:	f1 e0       	ldi	r31, 0x01	; 1
 428:	9f 06       	cpc	r9, r31
 42a:	09 f0       	breq	.+2      	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
 42c:	08 f4       	brcc	.+2      	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
 42e:	7e cf       	rjmp	.-260    	; 0x32c <uart_getchar+0x54>
 430:	0f 2e       	mov	r0, r31
 432:	fe e2       	ldi	r31, 0x2E	; 46
 434:	ef 2e       	mov	r14, r31
 436:	f1 e0       	ldi	r31, 0x01	; 1
 438:	ff 2e       	mov	r15, r31
 43a:	f0 2d       	mov	r31, r0
	      uart_putchar(*cp2, stream);
 43c:	b8 01       	movw	r22, r16
 43e:	f7 01       	movw	r30, r14
 440:	81 91       	ld	r24, Z+
 442:	7f 01       	movw	r14, r30
 444:	0e 94 4b 01 	call	0x296	; 0x296 <uart_putchar>
	      }
	    break;

	  case 'r' & 0x1f:
	    uart_putchar('\r', stream);
	    for (cp2 = b; cp2 < cp; cp2++)
 448:	8e 14       	cp	r8, r14
 44a:	9f 04       	cpc	r9, r15
 44c:	b9 f7       	brne	.-18     	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
 44e:	6e cf       	rjmp	.-292    	; 0x32c <uart_getchar+0x54>
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
	      {
		uart_putchar('\b', stream);
 450:	b8 01       	movw	r22, r16
 452:	88 e0       	ldi	r24, 0x08	; 8
 454:	0e 94 4b 01 	call	0x296	; 0x296 <uart_putchar>
		uart_putchar(' ', stream);
 458:	b8 01       	movw	r22, r16
 45a:	80 e2       	ldi	r24, 0x20	; 32
 45c:	0e 94 4b 01 	call	0x296	; 0x296 <uart_putchar>
		uart_putchar('\b', stream);
 460:	b8 01       	movw	r22, r16
 462:	88 e0       	ldi	r24, 0x08	; 8
 464:	0e 94 4b 01 	call	0x296	; 0x296 <uart_putchar>
		cp--;
 468:	f1 e0       	ldi	r31, 0x01	; 1
 46a:	8f 1a       	sub	r8, r31
 46c:	91 08       	sbc	r9, r1
	    for (cp2 = b; cp2 < cp; cp2++)
	      uart_putchar(*cp2, stream);
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
 46e:	8e e2       	ldi	r24, 0x2E	; 46
 470:	88 16       	cp	r8, r24
 472:	81 e0       	ldi	r24, 0x01	; 1
 474:	98 06       	cpc	r9, r24
 476:	61 f7       	brne	.-40     	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
 478:	f3 01       	movw	r30, r6
 47a:	31 96       	adiw	r30, 0x01	; 1
 47c:	4f 01       	movw	r8, r30
 47e:	56 cf       	rjmp	.-340    	; 0x32c <uart_getchar+0x54>
 480:	74 01       	movw	r14, r8
 482:	f1 e0       	ldi	r31, 0x01	; 1
 484:	ef 1a       	sub	r14, r31
 486:	f1 08       	sbc	r15, r1
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
	      {
		uart_putchar('\b', stream);
 488:	b8 01       	movw	r22, r16
 48a:	88 e0       	ldi	r24, 0x08	; 8
 48c:	0e 94 4b 01 	call	0x296	; 0x296 <uart_putchar>
		uart_putchar(' ', stream);
 490:	b8 01       	movw	r22, r16
 492:	80 e2       	ldi	r24, 0x20	; 32
 494:	0e 94 4b 01 	call	0x296	; 0x296 <uart_putchar>
		uart_putchar('\b', stream);
 498:	b8 01       	movw	r22, r16
 49a:	88 e0       	ldi	r24, 0x08	; 8
 49c:	0e 94 4b 01 	call	0x296	; 0x296 <uart_putchar>
		cp--;
 4a0:	47 01       	movw	r8, r14
		cp--;
	      }
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
 4a2:	ea 14       	cp	r14, r10
 4a4:	fb 04       	cpc	r15, r11
 4a6:	09 f4       	brne	.+2      	; 0x4aa <__LOCK_REGION_LENGTH__+0xaa>
 4a8:	41 cf       	rjmp	.-382    	; 0x32c <uart_getchar+0x54>
 4aa:	f7 01       	movw	r30, r14
 4ac:	82 91       	ld	r24, -Z
 4ae:	7f 01       	movw	r14, r30
 4b0:	80 32       	cpi	r24, 0x20	; 32
 4b2:	51 f7       	brne	.-44     	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
 4b4:	3b cf       	rjmp	.-394    	; 0x32c <uart_getchar+0x54>
	      }
	    break;
	  }
      }

  c = *rxp++;
 4b6:	e0 91 7e 01 	lds	r30, 0x017E	; 0x80017e <rxp.1827>
 4ba:	f0 91 7f 01 	lds	r31, 0x017F	; 0x80017f <rxp.1827+0x1>
 4be:	cf 01       	movw	r24, r30
 4c0:	01 96       	adiw	r24, 0x01	; 1
 4c2:	90 93 7f 01 	sts	0x017F, r25	; 0x80017f <rxp.1827+0x1>
 4c6:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <rxp.1827>
 4ca:	80 81       	ld	r24, Z
  if (c == '\n')
 4cc:	8a 30       	cpi	r24, 0x0A	; 10
 4ce:	21 f4       	brne	.+8      	; 0x4d8 <__LOCK_REGION_LENGTH__+0xd8>
    rxp = 0;
 4d0:	10 92 7f 01 	sts	0x017F, r1	; 0x80017f <rxp.1827+0x1>
 4d4:	10 92 7e 01 	sts	0x017E, r1	; 0x80017e <rxp.1827>

  return c;
 4d8:	90 e0       	ldi	r25, 0x00	; 0
 4da:	08 c0       	rjmp	.+16     	; 0x4ec <__LOCK_REGION_LENGTH__+0xec>
  if (rxp == 0)
    for (cp = b;;)
      {
	loop_until_bit_is_set(UCSR0A, RXC0);
	if (UCSR0A & _BV(FE0))
	  return _FDEV_EOF;
 4dc:	8e ef       	ldi	r24, 0xFE	; 254
 4de:	9f ef       	ldi	r25, 0xFF	; 255
 4e0:	05 c0       	rjmp	.+10     	; 0x4ec <__LOCK_REGION_LENGTH__+0xec>
	if (UCSR0A & _BV(DOR0))
	  return _FDEV_ERR;
 4e2:	8f ef       	ldi	r24, 0xFF	; 255
 4e4:	9f ef       	ldi	r25, 0xFF	; 255
 4e6:	02 c0       	rjmp	.+4      	; 0x4ec <__LOCK_REGION_LENGTH__+0xec>
	  }

	switch (c)
	  {
	  case 'c' & 0x1f:
	    return -1;
 4e8:	8f ef       	ldi	r24, 0xFF	; 255
 4ea:	9f ef       	ldi	r25, 0xFF	; 255
  c = *rxp++;
  if (c == '\n')
    rxp = 0;

  return c;
}
 4ec:	df 91       	pop	r29
 4ee:	cf 91       	pop	r28
 4f0:	1f 91       	pop	r17
 4f2:	0f 91       	pop	r16
 4f4:	ff 90       	pop	r15
 4f6:	ef 90       	pop	r14
 4f8:	df 90       	pop	r13
 4fa:	cf 90       	pop	r12
 4fc:	bf 90       	pop	r11
 4fe:	af 90       	pop	r10
 500:	9f 90       	pop	r9
 502:	8f 90       	pop	r8
 504:	7f 90       	pop	r7
 506:	6f 90       	pop	r6
 508:	08 95       	ret

0000050a <fprintf>:
 50a:	a0 e0       	ldi	r26, 0x00	; 0
 50c:	b0 e0       	ldi	r27, 0x00	; 0
 50e:	eb e8       	ldi	r30, 0x8B	; 139
 510:	f2 e0       	ldi	r31, 0x02	; 2
 512:	0c 94 6c 05 	jmp	0xad8	; 0xad8 <__prologue_saves__+0x20>
 516:	ae 01       	movw	r20, r28
 518:	47 5f       	subi	r20, 0xF7	; 247
 51a:	5f 4f       	sbci	r21, 0xFF	; 255
 51c:	6f 81       	ldd	r22, Y+7	; 0x07
 51e:	78 85       	ldd	r23, Y+8	; 0x08
 520:	8d 81       	ldd	r24, Y+5	; 0x05
 522:	9e 81       	ldd	r25, Y+6	; 0x06
 524:	0e 94 cb 02 	call	0x596	; 0x596 <vfprintf>
 528:	e2 e0       	ldi	r30, 0x02	; 2
 52a:	0c 94 88 05 	jmp	0xb10	; 0xb10 <__epilogue_restores__+0x20>

0000052e <fwrite>:
 52e:	a0 e0       	ldi	r26, 0x00	; 0
 530:	b0 e0       	ldi	r27, 0x00	; 0
 532:	ed e9       	ldi	r30, 0x9D	; 157
 534:	f2 e0       	ldi	r31, 0x02	; 2
 536:	0c 94 62 05 	jmp	0xac4	; 0xac4 <__prologue_saves__+0xc>
 53a:	5b 01       	movw	r10, r22
 53c:	4a 01       	movw	r8, r20
 53e:	79 01       	movw	r14, r18
 540:	d9 01       	movw	r26, r18
 542:	13 96       	adiw	r26, 0x03	; 3
 544:	2c 91       	ld	r18, X
 546:	21 ff       	sbrs	r18, 1
 548:	1d c0       	rjmp	.+58     	; 0x584 <fwrite+0x56>
 54a:	c0 e0       	ldi	r28, 0x00	; 0
 54c:	d0 e0       	ldi	r29, 0x00	; 0
 54e:	c8 15       	cp	r28, r8
 550:	d9 05       	cpc	r29, r9
 552:	d9 f0       	breq	.+54     	; 0x58a <fwrite+0x5c>
 554:	8c 01       	movw	r16, r24
 556:	6c 01       	movw	r12, r24
 558:	ca 0c       	add	r12, r10
 55a:	db 1c       	adc	r13, r11
 55c:	c8 01       	movw	r24, r16
 55e:	0c 15       	cp	r16, r12
 560:	1d 05       	cpc	r17, r13
 562:	71 f0       	breq	.+28     	; 0x580 <fwrite+0x52>
 564:	0f 5f       	subi	r16, 0xFF	; 255
 566:	1f 4f       	sbci	r17, 0xFF	; 255
 568:	d7 01       	movw	r26, r14
 56a:	18 96       	adiw	r26, 0x08	; 8
 56c:	ed 91       	ld	r30, X+
 56e:	fc 91       	ld	r31, X
 570:	19 97       	sbiw	r26, 0x09	; 9
 572:	b7 01       	movw	r22, r14
 574:	dc 01       	movw	r26, r24
 576:	8c 91       	ld	r24, X
 578:	09 95       	icall
 57a:	89 2b       	or	r24, r25
 57c:	79 f3       	breq	.-34     	; 0x55c <fwrite+0x2e>
 57e:	05 c0       	rjmp	.+10     	; 0x58a <fwrite+0x5c>
 580:	21 96       	adiw	r28, 0x01	; 1
 582:	e5 cf       	rjmp	.-54     	; 0x54e <fwrite+0x20>
 584:	80 e0       	ldi	r24, 0x00	; 0
 586:	90 e0       	ldi	r25, 0x00	; 0
 588:	01 c0       	rjmp	.+2      	; 0x58c <fwrite+0x5e>
 58a:	ce 01       	movw	r24, r28
 58c:	cd b7       	in	r28, 0x3d	; 61
 58e:	de b7       	in	r29, 0x3e	; 62
 590:	ec e0       	ldi	r30, 0x0C	; 12
 592:	0c 94 7e 05 	jmp	0xafc	; 0xafc <__epilogue_restores__+0xc>

00000596 <vfprintf>:
 596:	ab e0       	ldi	r26, 0x0B	; 11
 598:	b0 e0       	ldi	r27, 0x00	; 0
 59a:	e1 ed       	ldi	r30, 0xD1	; 209
 59c:	f2 e0       	ldi	r31, 0x02	; 2
 59e:	0c 94 5c 05 	jmp	0xab8	; 0xab8 <__prologue_saves__>
 5a2:	6c 01       	movw	r12, r24
 5a4:	7b 01       	movw	r14, r22
 5a6:	8a 01       	movw	r16, r20
 5a8:	fc 01       	movw	r30, r24
 5aa:	17 82       	std	Z+7, r1	; 0x07
 5ac:	16 82       	std	Z+6, r1	; 0x06
 5ae:	83 81       	ldd	r24, Z+3	; 0x03
 5b0:	81 ff       	sbrs	r24, 1
 5b2:	cc c1       	rjmp	.+920    	; 0x94c <__stack+0x4d>
 5b4:	ce 01       	movw	r24, r28
 5b6:	01 96       	adiw	r24, 0x01	; 1
 5b8:	3c 01       	movw	r6, r24
 5ba:	f6 01       	movw	r30, r12
 5bc:	93 81       	ldd	r25, Z+3	; 0x03
 5be:	f7 01       	movw	r30, r14
 5c0:	93 fd       	sbrc	r25, 3
 5c2:	85 91       	lpm	r24, Z+
 5c4:	93 ff       	sbrs	r25, 3
 5c6:	81 91       	ld	r24, Z+
 5c8:	7f 01       	movw	r14, r30
 5ca:	88 23       	and	r24, r24
 5cc:	09 f4       	brne	.+2      	; 0x5d0 <vfprintf+0x3a>
 5ce:	ba c1       	rjmp	.+884    	; 0x944 <__stack+0x45>
 5d0:	85 32       	cpi	r24, 0x25	; 37
 5d2:	39 f4       	brne	.+14     	; 0x5e2 <vfprintf+0x4c>
 5d4:	93 fd       	sbrc	r25, 3
 5d6:	85 91       	lpm	r24, Z+
 5d8:	93 ff       	sbrs	r25, 3
 5da:	81 91       	ld	r24, Z+
 5dc:	7f 01       	movw	r14, r30
 5de:	85 32       	cpi	r24, 0x25	; 37
 5e0:	29 f4       	brne	.+10     	; 0x5ec <vfprintf+0x56>
 5e2:	b6 01       	movw	r22, r12
 5e4:	90 e0       	ldi	r25, 0x00	; 0
 5e6:	0e 94 c2 04 	call	0x984	; 0x984 <fputc>
 5ea:	e7 cf       	rjmp	.-50     	; 0x5ba <vfprintf+0x24>
 5ec:	91 2c       	mov	r9, r1
 5ee:	21 2c       	mov	r2, r1
 5f0:	31 2c       	mov	r3, r1
 5f2:	ff e1       	ldi	r31, 0x1F	; 31
 5f4:	f3 15       	cp	r31, r3
 5f6:	d8 f0       	brcs	.+54     	; 0x62e <vfprintf+0x98>
 5f8:	8b 32       	cpi	r24, 0x2B	; 43
 5fa:	79 f0       	breq	.+30     	; 0x61a <vfprintf+0x84>
 5fc:	38 f4       	brcc	.+14     	; 0x60c <vfprintf+0x76>
 5fe:	80 32       	cpi	r24, 0x20	; 32
 600:	79 f0       	breq	.+30     	; 0x620 <vfprintf+0x8a>
 602:	83 32       	cpi	r24, 0x23	; 35
 604:	a1 f4       	brne	.+40     	; 0x62e <vfprintf+0x98>
 606:	23 2d       	mov	r18, r3
 608:	20 61       	ori	r18, 0x10	; 16
 60a:	1d c0       	rjmp	.+58     	; 0x646 <vfprintf+0xb0>
 60c:	8d 32       	cpi	r24, 0x2D	; 45
 60e:	61 f0       	breq	.+24     	; 0x628 <vfprintf+0x92>
 610:	80 33       	cpi	r24, 0x30	; 48
 612:	69 f4       	brne	.+26     	; 0x62e <vfprintf+0x98>
 614:	23 2d       	mov	r18, r3
 616:	21 60       	ori	r18, 0x01	; 1
 618:	16 c0       	rjmp	.+44     	; 0x646 <vfprintf+0xb0>
 61a:	83 2d       	mov	r24, r3
 61c:	82 60       	ori	r24, 0x02	; 2
 61e:	38 2e       	mov	r3, r24
 620:	e3 2d       	mov	r30, r3
 622:	e4 60       	ori	r30, 0x04	; 4
 624:	3e 2e       	mov	r3, r30
 626:	2a c0       	rjmp	.+84     	; 0x67c <vfprintf+0xe6>
 628:	f3 2d       	mov	r31, r3
 62a:	f8 60       	ori	r31, 0x08	; 8
 62c:	1d c0       	rjmp	.+58     	; 0x668 <vfprintf+0xd2>
 62e:	37 fc       	sbrc	r3, 7
 630:	2d c0       	rjmp	.+90     	; 0x68c <vfprintf+0xf6>
 632:	20 ed       	ldi	r18, 0xD0	; 208
 634:	28 0f       	add	r18, r24
 636:	2a 30       	cpi	r18, 0x0A	; 10
 638:	40 f0       	brcs	.+16     	; 0x64a <vfprintf+0xb4>
 63a:	8e 32       	cpi	r24, 0x2E	; 46
 63c:	b9 f4       	brne	.+46     	; 0x66c <vfprintf+0xd6>
 63e:	36 fc       	sbrc	r3, 6
 640:	81 c1       	rjmp	.+770    	; 0x944 <__stack+0x45>
 642:	23 2d       	mov	r18, r3
 644:	20 64       	ori	r18, 0x40	; 64
 646:	32 2e       	mov	r3, r18
 648:	19 c0       	rjmp	.+50     	; 0x67c <vfprintf+0xe6>
 64a:	36 fe       	sbrs	r3, 6
 64c:	06 c0       	rjmp	.+12     	; 0x65a <vfprintf+0xc4>
 64e:	8a e0       	ldi	r24, 0x0A	; 10
 650:	98 9e       	mul	r9, r24
 652:	20 0d       	add	r18, r0
 654:	11 24       	eor	r1, r1
 656:	92 2e       	mov	r9, r18
 658:	11 c0       	rjmp	.+34     	; 0x67c <vfprintf+0xe6>
 65a:	ea e0       	ldi	r30, 0x0A	; 10
 65c:	2e 9e       	mul	r2, r30
 65e:	20 0d       	add	r18, r0
 660:	11 24       	eor	r1, r1
 662:	22 2e       	mov	r2, r18
 664:	f3 2d       	mov	r31, r3
 666:	f0 62       	ori	r31, 0x20	; 32
 668:	3f 2e       	mov	r3, r31
 66a:	08 c0       	rjmp	.+16     	; 0x67c <vfprintf+0xe6>
 66c:	8c 36       	cpi	r24, 0x6C	; 108
 66e:	21 f4       	brne	.+8      	; 0x678 <vfprintf+0xe2>
 670:	83 2d       	mov	r24, r3
 672:	80 68       	ori	r24, 0x80	; 128
 674:	38 2e       	mov	r3, r24
 676:	02 c0       	rjmp	.+4      	; 0x67c <vfprintf+0xe6>
 678:	88 36       	cpi	r24, 0x68	; 104
 67a:	41 f4       	brne	.+16     	; 0x68c <vfprintf+0xf6>
 67c:	f7 01       	movw	r30, r14
 67e:	93 fd       	sbrc	r25, 3
 680:	85 91       	lpm	r24, Z+
 682:	93 ff       	sbrs	r25, 3
 684:	81 91       	ld	r24, Z+
 686:	7f 01       	movw	r14, r30
 688:	81 11       	cpse	r24, r1
 68a:	b3 cf       	rjmp	.-154    	; 0x5f2 <vfprintf+0x5c>
 68c:	98 2f       	mov	r25, r24
 68e:	9f 7d       	andi	r25, 0xDF	; 223
 690:	95 54       	subi	r25, 0x45	; 69
 692:	93 30       	cpi	r25, 0x03	; 3
 694:	28 f4       	brcc	.+10     	; 0x6a0 <vfprintf+0x10a>
 696:	0c 5f       	subi	r16, 0xFC	; 252
 698:	1f 4f       	sbci	r17, 0xFF	; 255
 69a:	9f e3       	ldi	r25, 0x3F	; 63
 69c:	99 83       	std	Y+1, r25	; 0x01
 69e:	0d c0       	rjmp	.+26     	; 0x6ba <vfprintf+0x124>
 6a0:	83 36       	cpi	r24, 0x63	; 99
 6a2:	31 f0       	breq	.+12     	; 0x6b0 <vfprintf+0x11a>
 6a4:	83 37       	cpi	r24, 0x73	; 115
 6a6:	71 f0       	breq	.+28     	; 0x6c4 <vfprintf+0x12e>
 6a8:	83 35       	cpi	r24, 0x53	; 83
 6aa:	09 f0       	breq	.+2      	; 0x6ae <vfprintf+0x118>
 6ac:	59 c0       	rjmp	.+178    	; 0x760 <vfprintf+0x1ca>
 6ae:	21 c0       	rjmp	.+66     	; 0x6f2 <vfprintf+0x15c>
 6b0:	f8 01       	movw	r30, r16
 6b2:	80 81       	ld	r24, Z
 6b4:	89 83       	std	Y+1, r24	; 0x01
 6b6:	0e 5f       	subi	r16, 0xFE	; 254
 6b8:	1f 4f       	sbci	r17, 0xFF	; 255
 6ba:	88 24       	eor	r8, r8
 6bc:	83 94       	inc	r8
 6be:	91 2c       	mov	r9, r1
 6c0:	53 01       	movw	r10, r6
 6c2:	13 c0       	rjmp	.+38     	; 0x6ea <vfprintf+0x154>
 6c4:	28 01       	movw	r4, r16
 6c6:	f2 e0       	ldi	r31, 0x02	; 2
 6c8:	4f 0e       	add	r4, r31
 6ca:	51 1c       	adc	r5, r1
 6cc:	f8 01       	movw	r30, r16
 6ce:	a0 80       	ld	r10, Z
 6d0:	b1 80       	ldd	r11, Z+1	; 0x01
 6d2:	36 fe       	sbrs	r3, 6
 6d4:	03 c0       	rjmp	.+6      	; 0x6dc <vfprintf+0x146>
 6d6:	69 2d       	mov	r22, r9
 6d8:	70 e0       	ldi	r23, 0x00	; 0
 6da:	02 c0       	rjmp	.+4      	; 0x6e0 <vfprintf+0x14a>
 6dc:	6f ef       	ldi	r22, 0xFF	; 255
 6de:	7f ef       	ldi	r23, 0xFF	; 255
 6e0:	c5 01       	movw	r24, r10
 6e2:	0e 94 b7 04 	call	0x96e	; 0x96e <strnlen>
 6e6:	4c 01       	movw	r8, r24
 6e8:	82 01       	movw	r16, r4
 6ea:	f3 2d       	mov	r31, r3
 6ec:	ff 77       	andi	r31, 0x7F	; 127
 6ee:	3f 2e       	mov	r3, r31
 6f0:	16 c0       	rjmp	.+44     	; 0x71e <vfprintf+0x188>
 6f2:	28 01       	movw	r4, r16
 6f4:	22 e0       	ldi	r18, 0x02	; 2
 6f6:	42 0e       	add	r4, r18
 6f8:	51 1c       	adc	r5, r1
 6fa:	f8 01       	movw	r30, r16
 6fc:	a0 80       	ld	r10, Z
 6fe:	b1 80       	ldd	r11, Z+1	; 0x01
 700:	36 fe       	sbrs	r3, 6
 702:	03 c0       	rjmp	.+6      	; 0x70a <vfprintf+0x174>
 704:	69 2d       	mov	r22, r9
 706:	70 e0       	ldi	r23, 0x00	; 0
 708:	02 c0       	rjmp	.+4      	; 0x70e <vfprintf+0x178>
 70a:	6f ef       	ldi	r22, 0xFF	; 255
 70c:	7f ef       	ldi	r23, 0xFF	; 255
 70e:	c5 01       	movw	r24, r10
 710:	0e 94 ac 04 	call	0x958	; 0x958 <strnlen_P>
 714:	4c 01       	movw	r8, r24
 716:	f3 2d       	mov	r31, r3
 718:	f0 68       	ori	r31, 0x80	; 128
 71a:	3f 2e       	mov	r3, r31
 71c:	82 01       	movw	r16, r4
 71e:	33 fc       	sbrc	r3, 3
 720:	1b c0       	rjmp	.+54     	; 0x758 <vfprintf+0x1c2>
 722:	82 2d       	mov	r24, r2
 724:	90 e0       	ldi	r25, 0x00	; 0
 726:	88 16       	cp	r8, r24
 728:	99 06       	cpc	r9, r25
 72a:	b0 f4       	brcc	.+44     	; 0x758 <vfprintf+0x1c2>
 72c:	b6 01       	movw	r22, r12
 72e:	80 e2       	ldi	r24, 0x20	; 32
 730:	90 e0       	ldi	r25, 0x00	; 0
 732:	0e 94 c2 04 	call	0x984	; 0x984 <fputc>
 736:	2a 94       	dec	r2
 738:	f4 cf       	rjmp	.-24     	; 0x722 <vfprintf+0x18c>
 73a:	f5 01       	movw	r30, r10
 73c:	37 fc       	sbrc	r3, 7
 73e:	85 91       	lpm	r24, Z+
 740:	37 fe       	sbrs	r3, 7
 742:	81 91       	ld	r24, Z+
 744:	5f 01       	movw	r10, r30
 746:	b6 01       	movw	r22, r12
 748:	90 e0       	ldi	r25, 0x00	; 0
 74a:	0e 94 c2 04 	call	0x984	; 0x984 <fputc>
 74e:	21 10       	cpse	r2, r1
 750:	2a 94       	dec	r2
 752:	21 e0       	ldi	r18, 0x01	; 1
 754:	82 1a       	sub	r8, r18
 756:	91 08       	sbc	r9, r1
 758:	81 14       	cp	r8, r1
 75a:	91 04       	cpc	r9, r1
 75c:	71 f7       	brne	.-36     	; 0x73a <vfprintf+0x1a4>
 75e:	e8 c0       	rjmp	.+464    	; 0x930 <__stack+0x31>
 760:	84 36       	cpi	r24, 0x64	; 100
 762:	11 f0       	breq	.+4      	; 0x768 <vfprintf+0x1d2>
 764:	89 36       	cpi	r24, 0x69	; 105
 766:	41 f5       	brne	.+80     	; 0x7b8 <vfprintf+0x222>
 768:	f8 01       	movw	r30, r16
 76a:	37 fe       	sbrs	r3, 7
 76c:	07 c0       	rjmp	.+14     	; 0x77c <vfprintf+0x1e6>
 76e:	60 81       	ld	r22, Z
 770:	71 81       	ldd	r23, Z+1	; 0x01
 772:	82 81       	ldd	r24, Z+2	; 0x02
 774:	93 81       	ldd	r25, Z+3	; 0x03
 776:	0c 5f       	subi	r16, 0xFC	; 252
 778:	1f 4f       	sbci	r17, 0xFF	; 255
 77a:	08 c0       	rjmp	.+16     	; 0x78c <vfprintf+0x1f6>
 77c:	60 81       	ld	r22, Z
 77e:	71 81       	ldd	r23, Z+1	; 0x01
 780:	07 2e       	mov	r0, r23
 782:	00 0c       	add	r0, r0
 784:	88 0b       	sbc	r24, r24
 786:	99 0b       	sbc	r25, r25
 788:	0e 5f       	subi	r16, 0xFE	; 254
 78a:	1f 4f       	sbci	r17, 0xFF	; 255
 78c:	f3 2d       	mov	r31, r3
 78e:	ff 76       	andi	r31, 0x6F	; 111
 790:	3f 2e       	mov	r3, r31
 792:	97 ff       	sbrs	r25, 7
 794:	09 c0       	rjmp	.+18     	; 0x7a8 <vfprintf+0x212>
 796:	90 95       	com	r25
 798:	80 95       	com	r24
 79a:	70 95       	com	r23
 79c:	61 95       	neg	r22
 79e:	7f 4f       	sbci	r23, 0xFF	; 255
 7a0:	8f 4f       	sbci	r24, 0xFF	; 255
 7a2:	9f 4f       	sbci	r25, 0xFF	; 255
 7a4:	f0 68       	ori	r31, 0x80	; 128
 7a6:	3f 2e       	mov	r3, r31
 7a8:	2a e0       	ldi	r18, 0x0A	; 10
 7aa:	30 e0       	ldi	r19, 0x00	; 0
 7ac:	a3 01       	movw	r20, r6
 7ae:	0e 94 fe 04 	call	0x9fc	; 0x9fc <__ultoa_invert>
 7b2:	88 2e       	mov	r8, r24
 7b4:	86 18       	sub	r8, r6
 7b6:	45 c0       	rjmp	.+138    	; 0x842 <vfprintf+0x2ac>
 7b8:	85 37       	cpi	r24, 0x75	; 117
 7ba:	31 f4       	brne	.+12     	; 0x7c8 <vfprintf+0x232>
 7bc:	23 2d       	mov	r18, r3
 7be:	2f 7e       	andi	r18, 0xEF	; 239
 7c0:	b2 2e       	mov	r11, r18
 7c2:	2a e0       	ldi	r18, 0x0A	; 10
 7c4:	30 e0       	ldi	r19, 0x00	; 0
 7c6:	25 c0       	rjmp	.+74     	; 0x812 <vfprintf+0x27c>
 7c8:	93 2d       	mov	r25, r3
 7ca:	99 7f       	andi	r25, 0xF9	; 249
 7cc:	b9 2e       	mov	r11, r25
 7ce:	8f 36       	cpi	r24, 0x6F	; 111
 7d0:	c1 f0       	breq	.+48     	; 0x802 <vfprintf+0x26c>
 7d2:	18 f4       	brcc	.+6      	; 0x7da <vfprintf+0x244>
 7d4:	88 35       	cpi	r24, 0x58	; 88
 7d6:	79 f0       	breq	.+30     	; 0x7f6 <vfprintf+0x260>
 7d8:	b5 c0       	rjmp	.+362    	; 0x944 <__stack+0x45>
 7da:	80 37       	cpi	r24, 0x70	; 112
 7dc:	19 f0       	breq	.+6      	; 0x7e4 <vfprintf+0x24e>
 7de:	88 37       	cpi	r24, 0x78	; 120
 7e0:	21 f0       	breq	.+8      	; 0x7ea <vfprintf+0x254>
 7e2:	b0 c0       	rjmp	.+352    	; 0x944 <__stack+0x45>
 7e4:	e9 2f       	mov	r30, r25
 7e6:	e0 61       	ori	r30, 0x10	; 16
 7e8:	be 2e       	mov	r11, r30
 7ea:	b4 fe       	sbrs	r11, 4
 7ec:	0d c0       	rjmp	.+26     	; 0x808 <vfprintf+0x272>
 7ee:	fb 2d       	mov	r31, r11
 7f0:	f4 60       	ori	r31, 0x04	; 4
 7f2:	bf 2e       	mov	r11, r31
 7f4:	09 c0       	rjmp	.+18     	; 0x808 <vfprintf+0x272>
 7f6:	34 fe       	sbrs	r3, 4
 7f8:	0a c0       	rjmp	.+20     	; 0x80e <vfprintf+0x278>
 7fa:	29 2f       	mov	r18, r25
 7fc:	26 60       	ori	r18, 0x06	; 6
 7fe:	b2 2e       	mov	r11, r18
 800:	06 c0       	rjmp	.+12     	; 0x80e <vfprintf+0x278>
 802:	28 e0       	ldi	r18, 0x08	; 8
 804:	30 e0       	ldi	r19, 0x00	; 0
 806:	05 c0       	rjmp	.+10     	; 0x812 <vfprintf+0x27c>
 808:	20 e1       	ldi	r18, 0x10	; 16
 80a:	30 e0       	ldi	r19, 0x00	; 0
 80c:	02 c0       	rjmp	.+4      	; 0x812 <vfprintf+0x27c>
 80e:	20 e1       	ldi	r18, 0x10	; 16
 810:	32 e0       	ldi	r19, 0x02	; 2
 812:	f8 01       	movw	r30, r16
 814:	b7 fe       	sbrs	r11, 7
 816:	07 c0       	rjmp	.+14     	; 0x826 <vfprintf+0x290>
 818:	60 81       	ld	r22, Z
 81a:	71 81       	ldd	r23, Z+1	; 0x01
 81c:	82 81       	ldd	r24, Z+2	; 0x02
 81e:	93 81       	ldd	r25, Z+3	; 0x03
 820:	0c 5f       	subi	r16, 0xFC	; 252
 822:	1f 4f       	sbci	r17, 0xFF	; 255
 824:	06 c0       	rjmp	.+12     	; 0x832 <vfprintf+0x29c>
 826:	60 81       	ld	r22, Z
 828:	71 81       	ldd	r23, Z+1	; 0x01
 82a:	80 e0       	ldi	r24, 0x00	; 0
 82c:	90 e0       	ldi	r25, 0x00	; 0
 82e:	0e 5f       	subi	r16, 0xFE	; 254
 830:	1f 4f       	sbci	r17, 0xFF	; 255
 832:	a3 01       	movw	r20, r6
 834:	0e 94 fe 04 	call	0x9fc	; 0x9fc <__ultoa_invert>
 838:	88 2e       	mov	r8, r24
 83a:	86 18       	sub	r8, r6
 83c:	fb 2d       	mov	r31, r11
 83e:	ff 77       	andi	r31, 0x7F	; 127
 840:	3f 2e       	mov	r3, r31
 842:	36 fe       	sbrs	r3, 6
 844:	0d c0       	rjmp	.+26     	; 0x860 <vfprintf+0x2ca>
 846:	23 2d       	mov	r18, r3
 848:	2e 7f       	andi	r18, 0xFE	; 254
 84a:	a2 2e       	mov	r10, r18
 84c:	89 14       	cp	r8, r9
 84e:	58 f4       	brcc	.+22     	; 0x866 <vfprintf+0x2d0>
 850:	34 fe       	sbrs	r3, 4
 852:	0b c0       	rjmp	.+22     	; 0x86a <vfprintf+0x2d4>
 854:	32 fc       	sbrc	r3, 2
 856:	09 c0       	rjmp	.+18     	; 0x86a <vfprintf+0x2d4>
 858:	83 2d       	mov	r24, r3
 85a:	8e 7e       	andi	r24, 0xEE	; 238
 85c:	a8 2e       	mov	r10, r24
 85e:	05 c0       	rjmp	.+10     	; 0x86a <vfprintf+0x2d4>
 860:	b8 2c       	mov	r11, r8
 862:	a3 2c       	mov	r10, r3
 864:	03 c0       	rjmp	.+6      	; 0x86c <vfprintf+0x2d6>
 866:	b8 2c       	mov	r11, r8
 868:	01 c0       	rjmp	.+2      	; 0x86c <vfprintf+0x2d6>
 86a:	b9 2c       	mov	r11, r9
 86c:	a4 fe       	sbrs	r10, 4
 86e:	0f c0       	rjmp	.+30     	; 0x88e <vfprintf+0x2f8>
 870:	fe 01       	movw	r30, r28
 872:	e8 0d       	add	r30, r8
 874:	f1 1d       	adc	r31, r1
 876:	80 81       	ld	r24, Z
 878:	80 33       	cpi	r24, 0x30	; 48
 87a:	21 f4       	brne	.+8      	; 0x884 <vfprintf+0x2ee>
 87c:	9a 2d       	mov	r25, r10
 87e:	99 7e       	andi	r25, 0xE9	; 233
 880:	a9 2e       	mov	r10, r25
 882:	09 c0       	rjmp	.+18     	; 0x896 <vfprintf+0x300>
 884:	a2 fe       	sbrs	r10, 2
 886:	06 c0       	rjmp	.+12     	; 0x894 <vfprintf+0x2fe>
 888:	b3 94       	inc	r11
 88a:	b3 94       	inc	r11
 88c:	04 c0       	rjmp	.+8      	; 0x896 <vfprintf+0x300>
 88e:	8a 2d       	mov	r24, r10
 890:	86 78       	andi	r24, 0x86	; 134
 892:	09 f0       	breq	.+2      	; 0x896 <vfprintf+0x300>
 894:	b3 94       	inc	r11
 896:	a3 fc       	sbrc	r10, 3
 898:	11 c0       	rjmp	.+34     	; 0x8bc <vfprintf+0x326>
 89a:	a0 fe       	sbrs	r10, 0
 89c:	06 c0       	rjmp	.+12     	; 0x8aa <vfprintf+0x314>
 89e:	b2 14       	cp	r11, r2
 8a0:	88 f4       	brcc	.+34     	; 0x8c4 <vfprintf+0x32e>
 8a2:	28 0c       	add	r2, r8
 8a4:	92 2c       	mov	r9, r2
 8a6:	9b 18       	sub	r9, r11
 8a8:	0e c0       	rjmp	.+28     	; 0x8c6 <vfprintf+0x330>
 8aa:	b2 14       	cp	r11, r2
 8ac:	60 f4       	brcc	.+24     	; 0x8c6 <vfprintf+0x330>
 8ae:	b6 01       	movw	r22, r12
 8b0:	80 e2       	ldi	r24, 0x20	; 32
 8b2:	90 e0       	ldi	r25, 0x00	; 0
 8b4:	0e 94 c2 04 	call	0x984	; 0x984 <fputc>
 8b8:	b3 94       	inc	r11
 8ba:	f7 cf       	rjmp	.-18     	; 0x8aa <vfprintf+0x314>
 8bc:	b2 14       	cp	r11, r2
 8be:	18 f4       	brcc	.+6      	; 0x8c6 <vfprintf+0x330>
 8c0:	2b 18       	sub	r2, r11
 8c2:	02 c0       	rjmp	.+4      	; 0x8c8 <vfprintf+0x332>
 8c4:	98 2c       	mov	r9, r8
 8c6:	21 2c       	mov	r2, r1
 8c8:	a4 fe       	sbrs	r10, 4
 8ca:	10 c0       	rjmp	.+32     	; 0x8ec <vfprintf+0x356>
 8cc:	b6 01       	movw	r22, r12
 8ce:	80 e3       	ldi	r24, 0x30	; 48
 8d0:	90 e0       	ldi	r25, 0x00	; 0
 8d2:	0e 94 c2 04 	call	0x984	; 0x984 <fputc>
 8d6:	a2 fe       	sbrs	r10, 2
 8d8:	17 c0       	rjmp	.+46     	; 0x908 <__stack+0x9>
 8da:	a1 fc       	sbrc	r10, 1
 8dc:	03 c0       	rjmp	.+6      	; 0x8e4 <vfprintf+0x34e>
 8de:	88 e7       	ldi	r24, 0x78	; 120
 8e0:	90 e0       	ldi	r25, 0x00	; 0
 8e2:	02 c0       	rjmp	.+4      	; 0x8e8 <vfprintf+0x352>
 8e4:	88 e5       	ldi	r24, 0x58	; 88
 8e6:	90 e0       	ldi	r25, 0x00	; 0
 8e8:	b6 01       	movw	r22, r12
 8ea:	0c c0       	rjmp	.+24     	; 0x904 <__stack+0x5>
 8ec:	8a 2d       	mov	r24, r10
 8ee:	86 78       	andi	r24, 0x86	; 134
 8f0:	59 f0       	breq	.+22     	; 0x908 <__stack+0x9>
 8f2:	a1 fe       	sbrs	r10, 1
 8f4:	02 c0       	rjmp	.+4      	; 0x8fa <vfprintf+0x364>
 8f6:	8b e2       	ldi	r24, 0x2B	; 43
 8f8:	01 c0       	rjmp	.+2      	; 0x8fc <vfprintf+0x366>
 8fa:	80 e2       	ldi	r24, 0x20	; 32
 8fc:	a7 fc       	sbrc	r10, 7
 8fe:	8d e2       	ldi	r24, 0x2D	; 45
 900:	b6 01       	movw	r22, r12
 902:	90 e0       	ldi	r25, 0x00	; 0
 904:	0e 94 c2 04 	call	0x984	; 0x984 <fputc>
 908:	89 14       	cp	r8, r9
 90a:	38 f4       	brcc	.+14     	; 0x91a <__stack+0x1b>
 90c:	b6 01       	movw	r22, r12
 90e:	80 e3       	ldi	r24, 0x30	; 48
 910:	90 e0       	ldi	r25, 0x00	; 0
 912:	0e 94 c2 04 	call	0x984	; 0x984 <fputc>
 916:	9a 94       	dec	r9
 918:	f7 cf       	rjmp	.-18     	; 0x908 <__stack+0x9>
 91a:	8a 94       	dec	r8
 91c:	f3 01       	movw	r30, r6
 91e:	e8 0d       	add	r30, r8
 920:	f1 1d       	adc	r31, r1
 922:	80 81       	ld	r24, Z
 924:	b6 01       	movw	r22, r12
 926:	90 e0       	ldi	r25, 0x00	; 0
 928:	0e 94 c2 04 	call	0x984	; 0x984 <fputc>
 92c:	81 10       	cpse	r8, r1
 92e:	f5 cf       	rjmp	.-22     	; 0x91a <__stack+0x1b>
 930:	22 20       	and	r2, r2
 932:	09 f4       	brne	.+2      	; 0x936 <__stack+0x37>
 934:	42 ce       	rjmp	.-892    	; 0x5ba <vfprintf+0x24>
 936:	b6 01       	movw	r22, r12
 938:	80 e2       	ldi	r24, 0x20	; 32
 93a:	90 e0       	ldi	r25, 0x00	; 0
 93c:	0e 94 c2 04 	call	0x984	; 0x984 <fputc>
 940:	2a 94       	dec	r2
 942:	f6 cf       	rjmp	.-20     	; 0x930 <__stack+0x31>
 944:	f6 01       	movw	r30, r12
 946:	86 81       	ldd	r24, Z+6	; 0x06
 948:	97 81       	ldd	r25, Z+7	; 0x07
 94a:	02 c0       	rjmp	.+4      	; 0x950 <__stack+0x51>
 94c:	8f ef       	ldi	r24, 0xFF	; 255
 94e:	9f ef       	ldi	r25, 0xFF	; 255
 950:	2b 96       	adiw	r28, 0x0b	; 11
 952:	e2 e1       	ldi	r30, 0x12	; 18
 954:	0c 94 78 05 	jmp	0xaf0	; 0xaf0 <__epilogue_restores__>

00000958 <strnlen_P>:
 958:	fc 01       	movw	r30, r24
 95a:	05 90       	lpm	r0, Z+
 95c:	61 50       	subi	r22, 0x01	; 1
 95e:	70 40       	sbci	r23, 0x00	; 0
 960:	01 10       	cpse	r0, r1
 962:	d8 f7       	brcc	.-10     	; 0x95a <strnlen_P+0x2>
 964:	80 95       	com	r24
 966:	90 95       	com	r25
 968:	8e 0f       	add	r24, r30
 96a:	9f 1f       	adc	r25, r31
 96c:	08 95       	ret

0000096e <strnlen>:
 96e:	fc 01       	movw	r30, r24
 970:	61 50       	subi	r22, 0x01	; 1
 972:	70 40       	sbci	r23, 0x00	; 0
 974:	01 90       	ld	r0, Z+
 976:	01 10       	cpse	r0, r1
 978:	d8 f7       	brcc	.-10     	; 0x970 <strnlen+0x2>
 97a:	80 95       	com	r24
 97c:	90 95       	com	r25
 97e:	8e 0f       	add	r24, r30
 980:	9f 1f       	adc	r25, r31
 982:	08 95       	ret

00000984 <fputc>:
 984:	0f 93       	push	r16
 986:	1f 93       	push	r17
 988:	cf 93       	push	r28
 98a:	df 93       	push	r29
 98c:	fb 01       	movw	r30, r22
 98e:	23 81       	ldd	r18, Z+3	; 0x03
 990:	21 fd       	sbrc	r18, 1
 992:	03 c0       	rjmp	.+6      	; 0x99a <fputc+0x16>
 994:	8f ef       	ldi	r24, 0xFF	; 255
 996:	9f ef       	ldi	r25, 0xFF	; 255
 998:	2c c0       	rjmp	.+88     	; 0x9f2 <fputc+0x6e>
 99a:	22 ff       	sbrs	r18, 2
 99c:	16 c0       	rjmp	.+44     	; 0x9ca <fputc+0x46>
 99e:	46 81       	ldd	r20, Z+6	; 0x06
 9a0:	57 81       	ldd	r21, Z+7	; 0x07
 9a2:	24 81       	ldd	r18, Z+4	; 0x04
 9a4:	35 81       	ldd	r19, Z+5	; 0x05
 9a6:	42 17       	cp	r20, r18
 9a8:	53 07       	cpc	r21, r19
 9aa:	44 f4       	brge	.+16     	; 0x9bc <fputc+0x38>
 9ac:	a0 81       	ld	r26, Z
 9ae:	b1 81       	ldd	r27, Z+1	; 0x01
 9b0:	9d 01       	movw	r18, r26
 9b2:	2f 5f       	subi	r18, 0xFF	; 255
 9b4:	3f 4f       	sbci	r19, 0xFF	; 255
 9b6:	31 83       	std	Z+1, r19	; 0x01
 9b8:	20 83       	st	Z, r18
 9ba:	8c 93       	st	X, r24
 9bc:	26 81       	ldd	r18, Z+6	; 0x06
 9be:	37 81       	ldd	r19, Z+7	; 0x07
 9c0:	2f 5f       	subi	r18, 0xFF	; 255
 9c2:	3f 4f       	sbci	r19, 0xFF	; 255
 9c4:	37 83       	std	Z+7, r19	; 0x07
 9c6:	26 83       	std	Z+6, r18	; 0x06
 9c8:	14 c0       	rjmp	.+40     	; 0x9f2 <fputc+0x6e>
 9ca:	8b 01       	movw	r16, r22
 9cc:	ec 01       	movw	r28, r24
 9ce:	fb 01       	movw	r30, r22
 9d0:	00 84       	ldd	r0, Z+8	; 0x08
 9d2:	f1 85       	ldd	r31, Z+9	; 0x09
 9d4:	e0 2d       	mov	r30, r0
 9d6:	09 95       	icall
 9d8:	89 2b       	or	r24, r25
 9da:	e1 f6       	brne	.-72     	; 0x994 <fputc+0x10>
 9dc:	d8 01       	movw	r26, r16
 9de:	16 96       	adiw	r26, 0x06	; 6
 9e0:	8d 91       	ld	r24, X+
 9e2:	9c 91       	ld	r25, X
 9e4:	17 97       	sbiw	r26, 0x07	; 7
 9e6:	01 96       	adiw	r24, 0x01	; 1
 9e8:	17 96       	adiw	r26, 0x07	; 7
 9ea:	9c 93       	st	X, r25
 9ec:	8e 93       	st	-X, r24
 9ee:	16 97       	sbiw	r26, 0x06	; 6
 9f0:	ce 01       	movw	r24, r28
 9f2:	df 91       	pop	r29
 9f4:	cf 91       	pop	r28
 9f6:	1f 91       	pop	r17
 9f8:	0f 91       	pop	r16
 9fa:	08 95       	ret

000009fc <__ultoa_invert>:
 9fc:	fa 01       	movw	r30, r20
 9fe:	aa 27       	eor	r26, r26
 a00:	28 30       	cpi	r18, 0x08	; 8
 a02:	51 f1       	breq	.+84     	; 0xa58 <__ultoa_invert+0x5c>
 a04:	20 31       	cpi	r18, 0x10	; 16
 a06:	81 f1       	breq	.+96     	; 0xa68 <__ultoa_invert+0x6c>
 a08:	e8 94       	clt
 a0a:	6f 93       	push	r22
 a0c:	6e 7f       	andi	r22, 0xFE	; 254
 a0e:	6e 5f       	subi	r22, 0xFE	; 254
 a10:	7f 4f       	sbci	r23, 0xFF	; 255
 a12:	8f 4f       	sbci	r24, 0xFF	; 255
 a14:	9f 4f       	sbci	r25, 0xFF	; 255
 a16:	af 4f       	sbci	r26, 0xFF	; 255
 a18:	b1 e0       	ldi	r27, 0x01	; 1
 a1a:	3e d0       	rcall	.+124    	; 0xa98 <__ultoa_invert+0x9c>
 a1c:	b4 e0       	ldi	r27, 0x04	; 4
 a1e:	3c d0       	rcall	.+120    	; 0xa98 <__ultoa_invert+0x9c>
 a20:	67 0f       	add	r22, r23
 a22:	78 1f       	adc	r23, r24
 a24:	89 1f       	adc	r24, r25
 a26:	9a 1f       	adc	r25, r26
 a28:	a1 1d       	adc	r26, r1
 a2a:	68 0f       	add	r22, r24
 a2c:	79 1f       	adc	r23, r25
 a2e:	8a 1f       	adc	r24, r26
 a30:	91 1d       	adc	r25, r1
 a32:	a1 1d       	adc	r26, r1
 a34:	6a 0f       	add	r22, r26
 a36:	71 1d       	adc	r23, r1
 a38:	81 1d       	adc	r24, r1
 a3a:	91 1d       	adc	r25, r1
 a3c:	a1 1d       	adc	r26, r1
 a3e:	20 d0       	rcall	.+64     	; 0xa80 <__ultoa_invert+0x84>
 a40:	09 f4       	brne	.+2      	; 0xa44 <__ultoa_invert+0x48>
 a42:	68 94       	set
 a44:	3f 91       	pop	r19
 a46:	2a e0       	ldi	r18, 0x0A	; 10
 a48:	26 9f       	mul	r18, r22
 a4a:	11 24       	eor	r1, r1
 a4c:	30 19       	sub	r19, r0
 a4e:	30 5d       	subi	r19, 0xD0	; 208
 a50:	31 93       	st	Z+, r19
 a52:	de f6       	brtc	.-74     	; 0xa0a <__ultoa_invert+0xe>
 a54:	cf 01       	movw	r24, r30
 a56:	08 95       	ret
 a58:	46 2f       	mov	r20, r22
 a5a:	47 70       	andi	r20, 0x07	; 7
 a5c:	40 5d       	subi	r20, 0xD0	; 208
 a5e:	41 93       	st	Z+, r20
 a60:	b3 e0       	ldi	r27, 0x03	; 3
 a62:	0f d0       	rcall	.+30     	; 0xa82 <__ultoa_invert+0x86>
 a64:	c9 f7       	brne	.-14     	; 0xa58 <__ultoa_invert+0x5c>
 a66:	f6 cf       	rjmp	.-20     	; 0xa54 <__ultoa_invert+0x58>
 a68:	46 2f       	mov	r20, r22
 a6a:	4f 70       	andi	r20, 0x0F	; 15
 a6c:	40 5d       	subi	r20, 0xD0	; 208
 a6e:	4a 33       	cpi	r20, 0x3A	; 58
 a70:	18 f0       	brcs	.+6      	; 0xa78 <__ultoa_invert+0x7c>
 a72:	49 5d       	subi	r20, 0xD9	; 217
 a74:	31 fd       	sbrc	r19, 1
 a76:	40 52       	subi	r20, 0x20	; 32
 a78:	41 93       	st	Z+, r20
 a7a:	02 d0       	rcall	.+4      	; 0xa80 <__ultoa_invert+0x84>
 a7c:	a9 f7       	brne	.-22     	; 0xa68 <__ultoa_invert+0x6c>
 a7e:	ea cf       	rjmp	.-44     	; 0xa54 <__ultoa_invert+0x58>
 a80:	b4 e0       	ldi	r27, 0x04	; 4
 a82:	a6 95       	lsr	r26
 a84:	97 95       	ror	r25
 a86:	87 95       	ror	r24
 a88:	77 95       	ror	r23
 a8a:	67 95       	ror	r22
 a8c:	ba 95       	dec	r27
 a8e:	c9 f7       	brne	.-14     	; 0xa82 <__ultoa_invert+0x86>
 a90:	00 97       	sbiw	r24, 0x00	; 0
 a92:	61 05       	cpc	r22, r1
 a94:	71 05       	cpc	r23, r1
 a96:	08 95       	ret
 a98:	9b 01       	movw	r18, r22
 a9a:	ac 01       	movw	r20, r24
 a9c:	0a 2e       	mov	r0, r26
 a9e:	06 94       	lsr	r0
 aa0:	57 95       	ror	r21
 aa2:	47 95       	ror	r20
 aa4:	37 95       	ror	r19
 aa6:	27 95       	ror	r18
 aa8:	ba 95       	dec	r27
 aaa:	c9 f7       	brne	.-14     	; 0xa9e <__ultoa_invert+0xa2>
 aac:	62 0f       	add	r22, r18
 aae:	73 1f       	adc	r23, r19
 ab0:	84 1f       	adc	r24, r20
 ab2:	95 1f       	adc	r25, r21
 ab4:	a0 1d       	adc	r26, r0
 ab6:	08 95       	ret

00000ab8 <__prologue_saves__>:
 ab8:	2f 92       	push	r2
 aba:	3f 92       	push	r3
 abc:	4f 92       	push	r4
 abe:	5f 92       	push	r5
 ac0:	6f 92       	push	r6
 ac2:	7f 92       	push	r7
 ac4:	8f 92       	push	r8
 ac6:	9f 92       	push	r9
 ac8:	af 92       	push	r10
 aca:	bf 92       	push	r11
 acc:	cf 92       	push	r12
 ace:	df 92       	push	r13
 ad0:	ef 92       	push	r14
 ad2:	ff 92       	push	r15
 ad4:	0f 93       	push	r16
 ad6:	1f 93       	push	r17
 ad8:	cf 93       	push	r28
 ada:	df 93       	push	r29
 adc:	cd b7       	in	r28, 0x3d	; 61
 ade:	de b7       	in	r29, 0x3e	; 62
 ae0:	ca 1b       	sub	r28, r26
 ae2:	db 0b       	sbc	r29, r27
 ae4:	0f b6       	in	r0, 0x3f	; 63
 ae6:	f8 94       	cli
 ae8:	de bf       	out	0x3e, r29	; 62
 aea:	0f be       	out	0x3f, r0	; 63
 aec:	cd bf       	out	0x3d, r28	; 61
 aee:	09 94       	ijmp

00000af0 <__epilogue_restores__>:
 af0:	2a 88       	ldd	r2, Y+18	; 0x12
 af2:	39 88       	ldd	r3, Y+17	; 0x11
 af4:	48 88       	ldd	r4, Y+16	; 0x10
 af6:	5f 84       	ldd	r5, Y+15	; 0x0f
 af8:	6e 84       	ldd	r6, Y+14	; 0x0e
 afa:	7d 84       	ldd	r7, Y+13	; 0x0d
 afc:	8c 84       	ldd	r8, Y+12	; 0x0c
 afe:	9b 84       	ldd	r9, Y+11	; 0x0b
 b00:	aa 84       	ldd	r10, Y+10	; 0x0a
 b02:	b9 84       	ldd	r11, Y+9	; 0x09
 b04:	c8 84       	ldd	r12, Y+8	; 0x08
 b06:	df 80       	ldd	r13, Y+7	; 0x07
 b08:	ee 80       	ldd	r14, Y+6	; 0x06
 b0a:	fd 80       	ldd	r15, Y+5	; 0x05
 b0c:	0c 81       	ldd	r16, Y+4	; 0x04
 b0e:	1b 81       	ldd	r17, Y+3	; 0x03
 b10:	aa 81       	ldd	r26, Y+2	; 0x02
 b12:	b9 81       	ldd	r27, Y+1	; 0x01
 b14:	ce 0f       	add	r28, r30
 b16:	d1 1d       	adc	r29, r1
 b18:	0f b6       	in	r0, 0x3f	; 63
 b1a:	f8 94       	cli
 b1c:	de bf       	out	0x3e, r29	; 62
 b1e:	0f be       	out	0x3f, r0	; 63
 b20:	cd bf       	out	0x3d, r28	; 61
 b22:	ed 01       	movw	r28, r26
 b24:	08 95       	ret

00000b26 <_exit>:
 b26:	f8 94       	cli

00000b28 <__stop_program>:
 b28:	ff cf       	rjmp	.-2      	; 0xb28 <__stop_program>
